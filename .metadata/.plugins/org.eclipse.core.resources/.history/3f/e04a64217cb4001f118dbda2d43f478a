#include "main.h"
#include "gpio.h"
#include <stdbool.h> // For boolean type

/* Global Variables */
bool isBlinking = false;                // Tracks whether LEDs should blink
volatile uint8_t BspButtonState = 0;    // Tracks button state (updated in interrupt)

/* Function Prototypes */
void SystemClock_Config(void);          // Configures the system clock
void MX_GPIO_Init(void);                // Configures GPIO pins
void HandleLEDs(void);                  // Handles LED blinking logic
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin); // Button interrupt callback

/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
    /* Initialize HAL library and configure system clock */
    HAL_Init();
    SystemClock_Config();

    /* Initialize GPIOs and LEDs */
    MX_GPIO_Init();

    /* Main application loop */
    while (1)
    {
        /* Handle LED blinking logic */
        HandleLEDs();

        /* Check and handle button press */
        if (BspButtonState == 1)
        {
            BspButtonState = 0;       // Reset button state
            isBlinking = !isBlinking; // Toggle blinking mode
        }
    }
}

/**
 * @brief Handles the LED blinking logic.
 */
void HandleLEDs(void)
{
    if (isBlinking)
    {
        /* Sequentially toggle LEDs with a delay */
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // Green LED
        HAL_Delay(300);
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Yellow LED
        HAL_Delay(150);
        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // Red LED
        HAL_Delay(30);
    }
    else
    {
        /* Turn off all LEDs when blinking is stopped */
        HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
    }
}

/**
 * @brief GPIO EXTI Callback for the button interrupt.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == B1_Pin)
    {
        BspButtonState = 1; // Set button state
    }
}

/**
 * @brief Configures the system clock.
 */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /* Supply configuration update enable */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

    /* Configure the main internal regulator output voltage */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

    /* Initialize the RCC Oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    HAL_RCC_OscConfig(&RCC_OscInitStruct);

    /* Configure the CPU, AHB, and APB buses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
}

/**
 * @brief Configures GPIO pins.
 */


/**
 * @brief Error handler for unexpected situations.
 */
void Error_Handler(void)
{
    while (1)
    {
        /* Infinite loop to indicate error */
    }
}
