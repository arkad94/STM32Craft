
WS2812B_SPI_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  08005c60  08005c60  00006c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007540  08007540  00008540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007544  08007544  00008544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  08007548  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005b0  24000060  080075a8  00009060  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000610  080075a8  00009610  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e438  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002002  00000000  00000000  000174c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca8  00000000  00000000  000194c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000009bc  00000000  00000000  0001a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037a5b  00000000  00000000  0001ab2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011c98  00000000  00000000  00052587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00164a8f  00000000  00000000  0006421f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001c8cae  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000037c0  00000000  00000000  001c8cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  001cc4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005c48 	.word	0x08005c48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	08005c48 	.word	0x08005c48

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fe30 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fe47 	bl	8000f9a <HAL_NVIC_EnableIRQ>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	58024400 	.word	0x58024400

08000318 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	@ 0x28
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b42      	ldr	r3, [pc, #264]	@ (8000438 <MX_GPIO_Init+0x120>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000334:	4a40      	ldr	r2, [pc, #256]	@ (8000438 <MX_GPIO_Init+0x120>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033e:	4b3e      	ldr	r3, [pc, #248]	@ (8000438 <MX_GPIO_Init+0x120>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034c:	4b3a      	ldr	r3, [pc, #232]	@ (8000438 <MX_GPIO_Init+0x120>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000352:	4a39      	ldr	r2, [pc, #228]	@ (8000438 <MX_GPIO_Init+0x120>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800035c:	4b36      	ldr	r3, [pc, #216]	@ (8000438 <MX_GPIO_Init+0x120>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b33      	ldr	r3, [pc, #204]	@ (8000438 <MX_GPIO_Init+0x120>)
 800036c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000370:	4a31      	ldr	r2, [pc, #196]	@ (8000438 <MX_GPIO_Init+0x120>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800037a:	4b2f      	ldr	r3, [pc, #188]	@ (8000438 <MX_GPIO_Init+0x120>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000380:	f003 0302 	and.w	r3, r3, #2
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b2b      	ldr	r3, [pc, #172]	@ (8000438 <MX_GPIO_Init+0x120>)
 800038a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800038e:	4a2a      	ldr	r2, [pc, #168]	@ (8000438 <MX_GPIO_Init+0x120>)
 8000390:	f043 0308 	orr.w	r3, r3, #8
 8000394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000398:	4b27      	ldr	r3, [pc, #156]	@ (8000438 <MX_GPIO_Init+0x120>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039e:	f003 0308 	and.w	r3, r3, #8
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003a6:	4b24      	ldr	r3, [pc, #144]	@ (8000438 <MX_GPIO_Init+0x120>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ac:	4a22      	ldr	r2, [pc, #136]	@ (8000438 <MX_GPIO_Init+0x120>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003b6:	4b20      	ldr	r3, [pc, #128]	@ (8000438 <MX_GPIO_Init+0x120>)
 80003b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80003ca:	481c      	ldr	r0, [pc, #112]	@ (800043c <MX_GPIO_Init+0x124>)
 80003cc:	f003 f888 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2102      	movs	r1, #2
 80003d4:	481a      	ldr	r0, [pc, #104]	@ (8000440 <MX_GPIO_Init+0x128>)
 80003d6:	f003 f883 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	4619      	mov	r1, r3
 80003ee:	4815      	ldr	r0, [pc, #84]	@ (8000444 <MX_GPIO_Init+0x12c>)
 80003f0:	f002 fec6 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80003f4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2300      	movs	r3, #0
 8000404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4619      	mov	r1, r3
 800040c:	480b      	ldr	r0, [pc, #44]	@ (800043c <MX_GPIO_Init+0x124>)
 800040e:	f002 feb7 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000412:	2302      	movs	r3, #2
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4619      	mov	r1, r3
 8000428:	4805      	ldr	r0, [pc, #20]	@ (8000440 <MX_GPIO_Init+0x128>)
 800042a:	f002 fea9 	bl	8003180 <HAL_GPIO_Init>

}
 800042e:	bf00      	nop
 8000430:	3728      	adds	r7, #40	@ 0x28
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	58024400 	.word	0x58024400
 800043c:	58020400 	.word	0x58020400
 8000440:	58021000 	.word	0x58021000
 8000444:	58020800 	.word	0x58020800

08000448 <gammaCorrect>:
#include "tim.h"
#include "gpio.h"
#include <math.h>  // For pow() function

/* Gamma correction function */
uint8_t gammaCorrect(uint8_t value) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
    float gamma = 2.2;  // Standard gamma value
 8000452:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <gammaCorrect+0x60>)
 8000454:	60fb      	str	r3, [r7, #12]
    return (uint8_t)(pow((float)value / 255.0, gamma) * 255.0);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	ee07 3a90 	vmov	s15, r3
 800045c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000460:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000464:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 80004a0 <gammaCorrect+0x58>
 8000468:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800046c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000470:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000474:	eeb0 1b47 	vmov.f64	d1, d7
 8000478:	eeb0 0b46 	vmov.f64	d0, d6
 800047c:	f005 f920 	bl	80056c0 <pow>
 8000480:	eeb0 7b40 	vmov.f64	d7, d0
 8000484:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 80004a0 <gammaCorrect+0x58>
 8000488:	ee27 7b06 	vmul.f64	d7, d7, d6
 800048c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000490:	edc7 7a00 	vstr	s15, [r7]
 8000494:	783b      	ldrb	r3, [r7, #0]
 8000496:	b2db      	uxtb	r3, r3
}
 8000498:	4618      	mov	r0, r3
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	00000000 	.word	0x00000000
 80004a4:	406fe000 	.word	0x406fe000
 80004a8:	400ccccd 	.word	0x400ccccd

080004ac <WS2812_SetColor>:
  * @param  led: LED index (0-15)
  * @param  green: Green intensity (0-255)
  * @param  red: Red intensity (0-255)
  * @param  blue: Blue intensity (0-255)
  */
void WS2812_SetColor(uint8_t led, uint8_t green, uint8_t red, uint8_t blue) {
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4604      	mov	r4, r0
 80004b4:	4608      	mov	r0, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	461a      	mov	r2, r3
 80004ba:	4623      	mov	r3, r4
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	4603      	mov	r3, r0
 80004c0:	71bb      	strb	r3, [r7, #6]
 80004c2:	460b      	mov	r3, r1
 80004c4:	717b      	strb	r3, [r7, #5]
 80004c6:	4613      	mov	r3, r2
 80004c8:	713b      	strb	r3, [r7, #4]
    if (led >= NUM_LEDS) return;  // Check if the LED index is valid
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b0f      	cmp	r3, #15
 80004ce:	d824      	bhi.n	800051a <WS2812_SetColor+0x6e>

    uint32_t ledOffset = led * 3;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]

    // Apply gamma correction to each color component
    LED_Data[ledOffset] = gammaCorrect(green);  // Corrected Green
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ffb3 	bl	8000448 <gammaCorrect>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4619      	mov	r1, r3
 80004e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <WS2812_SetColor+0x78>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	460a      	mov	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
    LED_Data[ledOffset + 1] = gammaCorrect(red);  // Corrected Red
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	1c5c      	adds	r4, r3, #1
 80004f4:	797b      	ldrb	r3, [r7, #5]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffa6 	bl	8000448 <gammaCorrect>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <WS2812_SetColor+0x78>)
 8000502:	551a      	strb	r2, [r3, r4]
    LED_Data[ledOffset + 2] = gammaCorrect(blue);  // Corrected Blue
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	1c9c      	adds	r4, r3, #2
 8000508:	793b      	ldrb	r3, [r7, #4]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff9c 	bl	8000448 <gammaCorrect>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <WS2812_SetColor+0x78>)
 8000516:	551a      	strb	r2, [r3, r4]
 8000518:	e000      	b.n	800051c <WS2812_SetColor+0x70>
    if (led >= NUM_LEDS) return;  // Check if the LED index is valid
 800051a:	bf00      	nop
}
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bd90      	pop	{r4, r7, pc}
 8000522:	bf00      	nop
 8000524:	240003e0 	.word	0x240003e0

08000528 <WS2812_Refresh>:

/**
  * @brief  Prepare and send LED data via DMA
  */
void WS2812_Refresh(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
    uint16_t pos = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	82fb      	strh	r3, [r7, #22]

    // Convert LED_Data to PWM signal
    for (int led = 0; led < NUM_LEDS; led++) {
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	e02f      	b.n	8000598 <WS2812_Refresh+0x70>
        for (int color = 0; color < 3; color++) {
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e026      	b.n	800058c <WS2812_Refresh+0x64>
            uint8_t byte = LED_Data[led * 3 + color];
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	441a      	add	r2, r3
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	4413      	add	r3, r2
 800054a:	4a23      	ldr	r2, [pc, #140]	@ (80005d8 <WS2812_Refresh+0xb0>)
 800054c:	5cd3      	ldrb	r3, [r2, r3]
 800054e:	70fb      	strb	r3, [r7, #3]

            // Send each bit (MSB first)
            for (int bit = 7; bit >= 0; bit--) {
 8000550:	2307      	movs	r3, #7
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	e014      	b.n	8000580 <WS2812_Refresh+0x58>
                LEDBuffer[pos++] = (byte & (1 << bit)) ? 56 : 28;
 8000556:	78fa      	ldrb	r2, [r7, #3]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	fa42 f303 	asr.w	r3, r2, r3
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <WS2812_Refresh+0x42>
 8000566:	2138      	movs	r1, #56	@ 0x38
 8000568:	e000      	b.n	800056c <WS2812_Refresh+0x44>
 800056a:	211c      	movs	r1, #28
 800056c:	8afb      	ldrh	r3, [r7, #22]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	82fa      	strh	r2, [r7, #22]
 8000572:	461a      	mov	r2, r3
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <WS2812_Refresh+0xb4>)
 8000576:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (int bit = 7; bit >= 0; bit--) {
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	3b01      	subs	r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	dae7      	bge.n	8000556 <WS2812_Refresh+0x2e>
        for (int color = 0; color < 3; color++) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b02      	cmp	r3, #2
 8000590:	ddd5      	ble.n	800053e <WS2812_Refresh+0x16>
    for (int led = 0; led < NUM_LEDS; led++) {
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	3301      	adds	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	2b0f      	cmp	r3, #15
 800059c:	ddcc      	ble.n	8000538 <WS2812_Refresh+0x10>
            }
        }
    }

    // Add reset pulse (all zeros)
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 800059e:	8afb      	ldrh	r3, [r7, #22]
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	e00a      	b.n	80005ba <WS2812_Refresh+0x92>
        LEDBuffer[pos++] = 0;
 80005a4:	8afb      	ldrh	r3, [r7, #22]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	82fa      	strh	r2, [r7, #22]
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <WS2812_Refresh+0xb4>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f5b3 7fd9 	cmp.w	r3, #434	@ 0x1b2
 80005c0:	dbf0      	blt.n	80005a4 <WS2812_Refresh+0x7c>
    }

    // Start DMA transfer using TIM4 Channel 3
    HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t*)LEDBuffer, LED_BUFFER_SIZE);  // Updated for TIM4 Channel 3
 80005c2:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <WS2812_Refresh+0xb4>)
 80005c8:	2108      	movs	r1, #8
 80005ca:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <WS2812_Refresh+0xb8>)
 80005cc:	f003 ffbe 	bl	800454c <HAL_TIM_PWM_Start_DMA>
}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	240003e0 	.word	0x240003e0
 80005dc:	2400007c 	.word	0x2400007c
 80005e0:	24000410 	.word	0x24000410

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 80005ea:	f000 fb1f 	bl	8000c2c <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80005ee:	f000 f8a5 	bl	800073c <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005f2:	f7ff fe91 	bl	8000318 <MX_GPIO_Init>
    MX_DMA_Init();
 80005f6:	f7ff fe6f 	bl	80002d8 <MX_DMA_Init>
    MX_TIM4_Init();  // Updated to initialize TIM4 instead of TIM3
 80005fa:	f000 fa01 	bl	8000a00 <MX_TIM4_Init>

    /* Define LED colors */
    uint8_t redShade[3] = {0x40, 0x00, 0x00};   // Shade of red (GRB format)
 80005fe:	4a4a      	ldr	r2, [pc, #296]	@ (8000728 <main+0x144>)
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	8019      	strh	r1, [r3, #0]
 800060a:	3302      	adds	r3, #2
 800060c:	0c12      	lsrs	r2, r2, #16
 800060e:	701a      	strb	r2, [r3, #0]
    uint8_t currentColor[3] = {0x6B, 0x00, 0x3C}; // Current color (GRB format)
 8000610:	4a46      	ldr	r2, [pc, #280]	@ (800072c <main+0x148>)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	6812      	ldr	r2, [r2, #0]
 8000616:	4611      	mov	r1, r2
 8000618:	8019      	strh	r1, [r3, #0]
 800061a:	3302      	adds	r3, #2
 800061c:	0c12      	lsrs	r2, r2, #16
 800061e:	701a      	strb	r2, [r3, #0]
    uint8_t greenShade[3] = {0x00, 0x40, 0x00}; // Shade of green (GRB format)
 8000620:	4a43      	ldr	r2, [pc, #268]	@ (8000730 <main+0x14c>)
 8000622:	463b      	mov	r3, r7
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	4611      	mov	r1, r2
 8000628:	8019      	strh	r1, [r3, #0]
 800062a:	3302      	adds	r3, #2
 800062c:	0c12      	lsrs	r2, r2, #16
 800062e:	701a      	strb	r2, [r3, #0]

    /* Infinite loop */
    while (1)
    {
        // Loop through cycles with different delays
        for (float delay = 1.0; delay >= 0.25; delay /= 2)
 8000630:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e06d      	b.n	8000714 <main+0x130>
        {
            // Loop through all LEDs
            for (int i = 0; i < NUM_LEDS; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	e040      	b.n	80006c0 <main+0xdc>
            {
                // Set LED color based on position
                if (i % 3 == 0)
 800063e:	6939      	ldr	r1, [r7, #16]
 8000640:	4b3c      	ldr	r3, [pc, #240]	@ (8000734 <main+0x150>)
 8000642:	fb83 3201 	smull	r3, r2, r3, r1
 8000646:	17cb      	asrs	r3, r1, #31
 8000648:	1ad2      	subs	r2, r2, r3
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	1aca      	subs	r2, r1, r3
 8000652:	2a00      	cmp	r2, #0
 8000654:	d107      	bne.n	8000666 <main+0x82>
                    WS2812_SetColor(i, redShade[0], redShade[1], redShade[2]);
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	7a39      	ldrb	r1, [r7, #8]
 800065c:	7a7a      	ldrb	r2, [r7, #9]
 800065e:	7abb      	ldrb	r3, [r7, #10]
 8000660:	f7ff ff24 	bl	80004ac <WS2812_SetColor>
 8000664:	e01a      	b.n	800069c <main+0xb8>
                else if (i % 3 == 1)
 8000666:	6939      	ldr	r1, [r7, #16]
 8000668:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <main+0x150>)
 800066a:	fb83 3201 	smull	r3, r2, r3, r1
 800066e:	17cb      	asrs	r3, r1, #31
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	2a01      	cmp	r2, #1
 800067c:	d107      	bne.n	800068e <main+0xaa>
                    WS2812_SetColor(i, currentColor[0], currentColor[1], currentColor[2]);
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	b2d8      	uxtb	r0, r3
 8000682:	7939      	ldrb	r1, [r7, #4]
 8000684:	797a      	ldrb	r2, [r7, #5]
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	f7ff ff10 	bl	80004ac <WS2812_SetColor>
 800068c:	e006      	b.n	800069c <main+0xb8>
                else
                    WS2812_SetColor(i, greenShade[0], greenShade[1], greenShade[2]);
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	b2d8      	uxtb	r0, r3
 8000692:	7839      	ldrb	r1, [r7, #0]
 8000694:	787a      	ldrb	r2, [r7, #1]
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	f7ff ff08 	bl	80004ac <WS2812_SetColor>

                // Refresh LED strip
                WS2812_Refresh();
 800069c:	f7ff ff44 	bl	8000528 <WS2812_Refresh>
                HAL_Delay((int)(delay * 1000)); // Delay in milliseconds
 80006a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006a4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000738 <main+0x154>
 80006a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b0:	ee17 3a90 	vmov	r3, s15
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fb4b 	bl	8000d50 <HAL_Delay>
            for (int i = 0; i < NUM_LEDS; i++)
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	3301      	adds	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	ddbb      	ble.n	800063e <main+0x5a>
            }

            // Clear all LEDs after a full cycle
            for (int i = 0; i < NUM_LEDS; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e009      	b.n	80006e0 <main+0xfc>
            {
                WS2812_SetColor(i, 0, 0, 0); // Turn off LED
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	b2d8      	uxtb	r0, r3
 80006d0:	2300      	movs	r3, #0
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	f7ff fee9 	bl	80004ac <WS2812_SetColor>
            for (int i = 0; i < NUM_LEDS; i++)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b0f      	cmp	r3, #15
 80006e4:	ddf2      	ble.n	80006cc <main+0xe8>
            }
            WS2812_Refresh();
 80006e6:	f7ff ff1f 	bl	8000528 <WS2812_Refresh>
            HAL_Delay((int)(delay * 1000)); // Add a gap before the next cycle
 80006ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80006ee:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000738 <main+0x154>
 80006f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fa:	ee17 3a90 	vmov	r3, s15
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fb26 	bl	8000d50 <HAL_Delay>
        for (float delay = 1.0; delay >= 0.25; delay /= 2)
 8000704:	ed97 7a05 	vldr	s14, [r7, #20]
 8000708:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800070c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000710:	edc7 7a05 	vstr	s15, [r7, #20]
 8000714:	edd7 7a05 	vldr	s15, [r7, #20]
 8000718:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800071c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	da88      	bge.n	8000638 <main+0x54>
 8000726:	e783      	b.n	8000630 <main+0x4c>
 8000728:	08005c60 	.word	0x08005c60
 800072c:	08005c64 	.word	0x08005c64
 8000730:	08005c68 	.word	0x08005c68
 8000734:	55555556 	.word	0x55555556
 8000738:	447a0000 	.word	0x447a0000

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	@ 0x70
 8000740:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	224c      	movs	r2, #76	@ 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 ff52 	bl	80055f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 ff4c 	bl	80055f4 <memset>

    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800075c:	2002      	movs	r0, #2
 800075e:	f002 fed9 	bl	8003514 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <SystemClock_Config+0xcc>)
 8000768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076a:	4a27      	ldr	r2, [pc, #156]	@ (8000808 <SystemClock_Config+0xcc>)
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000772:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <SystemClock_Config+0xcc>)
 8000774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	@ (800080c <SystemClock_Config+0xd0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000784:	4a21      	ldr	r2, [pc, #132]	@ (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <SystemClock_Config+0xd0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000798:	bf00      	nop
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <SystemClock_Config+0xd0>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007a6:	d1f8      	bne.n	800079a <SystemClock_Config+0x5e>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2340      	movs	r3, #64	@ 0x40
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fee3 	bl	8003588 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x90>
    {
        Error_Handler();
 80007c8:	f000 f822 	bl	8000810 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	233f      	movs	r3, #63	@ 0x3f
 80007ce:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                                |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 fb23 	bl	8003e3c <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 80007fc:	f000 f808 	bl	8000810 <Error_Handler>
    }
}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	@ 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	58000400 	.word	0x58000400
 800080c:	58024800 	.word	0x58024800

08000810 <Error_Handler>:

/**
  * @brief Error handler
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
    // Infinite loop
    while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x4>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <HAL_MspInit+0x30>)
 8000820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000824:	4a08      	ldr	r2, [pc, #32]	@ (8000848 <HAL_MspInit+0x30>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_MspInit+0x30>)
 8000830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	58024400 	.word	0x58024400

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <NMI_Handler+0x4>

08000854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <MemManage_Handler+0x4>

08000864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <UsageFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f000 fa35 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80008b0:	4802      	ldr	r0, [pc, #8]	@ (80008bc <DMA1_Stream0_IRQHandler+0x10>)
 80008b2:	f001 f953 	bl	8001b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2400045c 	.word	0x2400045c

080008c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c4:	4b37      	ldr	r3, [pc, #220]	@ (80009a4 <SystemInit+0xe4>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ca:	4a36      	ldr	r2, [pc, #216]	@ (80009a4 <SystemInit+0xe4>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008d4:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <SystemInit+0xe8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 030f 	and.w	r3, r3, #15
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d807      	bhi.n	80008f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e0:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <SystemInit+0xe8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f023 030f 	bic.w	r3, r3, #15
 80008e8:	4a2f      	ldr	r2, [pc, #188]	@ (80009a8 <SystemInit+0xe8>)
 80008ea:	f043 0307 	orr.w	r3, r3, #7
 80008ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <SystemInit+0xec>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <SystemInit+0xec>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <SystemInit+0xec>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000902:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <SystemInit+0xec>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4929      	ldr	r1, [pc, #164]	@ (80009ac <SystemInit+0xec>)
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <SystemInit+0xf0>)
 800090a:	4013      	ands	r3, r2
 800090c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <SystemInit+0xe8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	2b00      	cmp	r3, #0
 8000918:	d007      	beq.n	800092a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <SystemInit+0xe8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f023 030f 	bic.w	r3, r3, #15
 8000922:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <SystemInit+0xe8>)
 8000924:	f043 0307 	orr.w	r3, r3, #7
 8000928:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <SystemInit+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <SystemInit+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000936:	4b1d      	ldr	r3, [pc, #116]	@ (80009ac <SystemInit+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <SystemInit+0xec>)
 800093e:	4a1d      	ldr	r2, [pc, #116]	@ (80009b4 <SystemInit+0xf4>)
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <SystemInit+0xec>)
 8000944:	4a1c      	ldr	r2, [pc, #112]	@ (80009b8 <SystemInit+0xf8>)
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <SystemInit+0xec>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	@ (80009bc <SystemInit+0xfc>)
 800094c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <SystemInit+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <SystemInit+0xec>)
 8000956:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <SystemInit+0xfc>)
 8000958:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <SystemInit+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <SystemInit+0xec>)
 8000962:	4a16      	ldr	r2, [pc, #88]	@ (80009bc <SystemInit+0xfc>)
 8000964:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <SystemInit+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <SystemInit+0xec>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <SystemInit+0xec>)
 8000972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000976:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <SystemInit+0xec>)
 800097a:	2200      	movs	r2, #0
 800097c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <SystemInit+0x100>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <SystemInit+0x104>)
 8000984:	4013      	ands	r3, r2
 8000986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800098a:	d202      	bcs.n	8000992 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <SystemInit+0x108>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <SystemInit+0x10c>)
 8000994:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00
 80009a8:	52002000 	.word	0x52002000
 80009ac:	58024400 	.word	0x58024400
 80009b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80009b4:	02020200 	.word	0x02020200
 80009b8:	01ff0000 	.word	0x01ff0000
 80009bc:	01010280 	.word	0x01010280
 80009c0:	5c001000 	.word	0x5c001000
 80009c4:	ffff0000 	.word	0xffff0000
 80009c8:	51008108 	.word	0x51008108
 80009cc:	52004000 	.word	0x52004000

080009d0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <ExitRun0Mode+0x2c>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <ExitRun0Mode+0x2c>)
 80009da:	f043 0302 	orr.w	r3, r3, #2
 80009de:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009e0:	bf00      	nop
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <ExitRun0Mode+0x2c>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f9      	beq.n	80009e2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80009ee:	bf00      	nop
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024800 	.word	0x58024800

08000a00 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	463b      	mov	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a24:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a26:	4a22      	ldr	r2, [pc, #136]	@ (8000ab0 <MX_TIM4_Init+0xb0>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 79;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a38:	224f      	movs	r2, #79	@ 0x4f
 8000a3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a48:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a4a:	f003 fd27 	bl	800449c <HAL_TIM_PWM_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a54:	f7ff fedc 	bl	8000810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4811      	ldr	r0, [pc, #68]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a68:	f004 fd36 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a72:	f7ff fecd 	bl	8000810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	@ 0x60
 8000a78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4807      	ldr	r0, [pc, #28]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a8e:	f003 ff83 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a98:	f7ff feba 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <MX_TIM4_Init+0xac>)
 8000a9e:	f000 f85d 	bl	8000b5c <HAL_TIM_MspPostInit>

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	@ 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24000410 	.word	0x24000410
 8000ab0:	40000800 	.word	0x40000800

08000ab4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	@ (8000b4c <HAL_TIM_PWM_MspInit+0x98>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d13e      	bne.n	8000b44 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ac6:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x9c>)
 8000ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000acc:	4a20      	ldr	r2, [pc, #128]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x9c>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <HAL_TIM_PWM_MspInit+0x9c>)
 8000ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b58 <HAL_TIM_PWM_MspInit+0xa4>)
 8000ae8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000aec:	221f      	movs	r2, #31
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000af2:	2240      	movs	r2, #64	@ 0x40
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b0a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b12:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b1c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b20:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8000b28:	480a      	ldr	r0, [pc, #40]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b2a:	f000 fa51 	bl	8000fd0 <HAL_DMA_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000b34:	f7ff fe6c 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <HAL_TIM_PWM_MspInit+0xa0>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40000800 	.word	0x40000800
 8000b50:	58024400 	.word	0x58024400
 8000b54:	2400045c 	.word	0x2400045c
 8000b58:	40020010 	.word	0x40020010

08000b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <HAL_TIM_MspPostInit+0x6c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d11f      	bne.n	8000bbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_TIM_MspPostInit+0x70>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_TIM_MspPostInit+0x70>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_TIM_MspPostInit+0x70>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ba0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_TIM_MspPostInit+0x74>)
 8000bba:	f002 fae1 	bl	8003180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40000800 	.word	0x40000800
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020c00 	.word	0x58020c00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c10 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bd8:	f7ff fefa 	bl	80009d0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff fe70 	bl	80008c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c06:	f004 fd03 	bl	8005610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fceb 	bl	80005e4 <main>
  bx  lr
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c18:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000c1c:	08007548 	.word	0x08007548
  ldr r2, =_sbss
 8000c20:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000c24:	24000610 	.word	0x24000610

08000c28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC3_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f98c 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c38:	f003 fab6 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_Init+0x68>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	4913      	ldr	r1, [pc, #76]	@ (8000c98 <HAL_Init+0x6c>)
 8000c4a:	5ccb      	ldrb	r3, [r1, r3]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c56:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <HAL_Init+0x68>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <HAL_Init+0x6c>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <HAL_Init+0x70>)
 8000c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <HAL_Init+0x74>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f814 	bl	8000ca4 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e002      	b.n	8000c8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c86:	f7ff fdc7 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024400 	.word	0x58024400
 8000c98:	08005c6c 	.word	0x08005c6c
 8000c9c:	24000004 	.word	0x24000004
 8000ca0:	24000000 	.word	0x24000000

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_InitTick+0x60>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e021      	b.n	8000cfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <HAL_InitTick+0x64>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_InitTick+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f971 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 f93b 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x68>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2400000c 	.word	0x2400000c
 8000d08:	24000000 	.word	0x24000000
 8000d0c:	24000008 	.word	0x24000008

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2400000c 	.word	0x2400000c
 8000d34:	240004d4 	.word	0x240004d4

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	240004d4 	.word	0x240004d4

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2400000c 	.word	0x2400000c

08000d98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetREVID+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0c1b      	lsrs	r3, r3, #16
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	5c001000 	.word	0x5c001000

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	05fa0000 	.word	0x05fa0000

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff29 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff40 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff90 	bl	8000ea4 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5f 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff33 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa4 	bl	8000f0c <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff feae 	bl	8000d38 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e316      	b.n	8001616 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a66      	ldr	r2, [pc, #408]	@ (8001188 <HAL_DMA_Init+0x1b8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d04a      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a65      	ldr	r2, [pc, #404]	@ (800118c <HAL_DMA_Init+0x1bc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d045      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a63      	ldr	r2, [pc, #396]	@ (8001190 <HAL_DMA_Init+0x1c0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d040      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a62      	ldr	r2, [pc, #392]	@ (8001194 <HAL_DMA_Init+0x1c4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d03b      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a60      	ldr	r2, [pc, #384]	@ (8001198 <HAL_DMA_Init+0x1c8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d036      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a5f      	ldr	r2, [pc, #380]	@ (800119c <HAL_DMA_Init+0x1cc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d031      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a5d      	ldr	r2, [pc, #372]	@ (80011a0 <HAL_DMA_Init+0x1d0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d02c      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a5c      	ldr	r2, [pc, #368]	@ (80011a4 <HAL_DMA_Init+0x1d4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d027      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a5a      	ldr	r2, [pc, #360]	@ (80011a8 <HAL_DMA_Init+0x1d8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d022      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a59      	ldr	r2, [pc, #356]	@ (80011ac <HAL_DMA_Init+0x1dc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d01d      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a57      	ldr	r2, [pc, #348]	@ (80011b0 <HAL_DMA_Init+0x1e0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d018      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a56      	ldr	r2, [pc, #344]	@ (80011b4 <HAL_DMA_Init+0x1e4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d013      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a54      	ldr	r2, [pc, #336]	@ (80011b8 <HAL_DMA_Init+0x1e8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00e      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a53      	ldr	r2, [pc, #332]	@ (80011bc <HAL_DMA_Init+0x1ec>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d009      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a51      	ldr	r2, [pc, #324]	@ (80011c0 <HAL_DMA_Init+0x1f0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d004      	beq.n	8001088 <HAL_DMA_Init+0xb8>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a50      	ldr	r2, [pc, #320]	@ (80011c4 <HAL_DMA_Init+0x1f4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_DMA_Init+0xbc>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_DMA_Init+0xbe>
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 813b 	beq.w	800130a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a37      	ldr	r2, [pc, #220]	@ (8001188 <HAL_DMA_Init+0x1b8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d04a      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a36      	ldr	r2, [pc, #216]	@ (800118c <HAL_DMA_Init+0x1bc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d045      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a34      	ldr	r2, [pc, #208]	@ (8001190 <HAL_DMA_Init+0x1c0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d040      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a33      	ldr	r2, [pc, #204]	@ (8001194 <HAL_DMA_Init+0x1c4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d03b      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a31      	ldr	r2, [pc, #196]	@ (8001198 <HAL_DMA_Init+0x1c8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d036      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a30      	ldr	r2, [pc, #192]	@ (800119c <HAL_DMA_Init+0x1cc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d031      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <HAL_DMA_Init+0x1d0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02c      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <HAL_DMA_Init+0x1d4>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d027      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <HAL_DMA_Init+0x1d8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d022      	beq.n	8001144 <HAL_DMA_Init+0x174>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a2a      	ldr	r2, [pc, #168]	@ (80011ac <HAL_DMA_Init+0x1dc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d01d      	beq.n	8001144 <HAL_DMA_Init+0x174>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <HAL_DMA_Init+0x1e0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d018      	beq.n	8001144 <HAL_DMA_Init+0x174>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_DMA_Init+0x1e4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_DMA_Init+0x174>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <HAL_DMA_Init+0x1e8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d00e      	beq.n	8001144 <HAL_DMA_Init+0x174>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <HAL_DMA_Init+0x1ec>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d009      	beq.n	8001144 <HAL_DMA_Init+0x174>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a22      	ldr	r2, [pc, #136]	@ (80011c0 <HAL_DMA_Init+0x1f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_DMA_Init+0x174>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <HAL_DMA_Init+0x1f4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d108      	bne.n	8001156 <HAL_DMA_Init+0x186>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_DMA_Init+0x196>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001166:	e02f      	b.n	80011c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001168:	f7ff fde6 	bl	8000d38 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b05      	cmp	r3, #5
 8001174:	d928      	bls.n	80011c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2220      	movs	r2, #32
 800117a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e246      	b.n	8001616 <HAL_DMA_Init+0x646>
 8001188:	40020010 	.word	0x40020010
 800118c:	40020028 	.word	0x40020028
 8001190:	40020040 	.word	0x40020040
 8001194:	40020058 	.word	0x40020058
 8001198:	40020070 	.word	0x40020070
 800119c:	40020088 	.word	0x40020088
 80011a0:	400200a0 	.word	0x400200a0
 80011a4:	400200b8 	.word	0x400200b8
 80011a8:	40020410 	.word	0x40020410
 80011ac:	40020428 	.word	0x40020428
 80011b0:	40020440 	.word	0x40020440
 80011b4:	40020458 	.word	0x40020458
 80011b8:	40020470 	.word	0x40020470
 80011bc:	40020488 	.word	0x40020488
 80011c0:	400204a0 	.word	0x400204a0
 80011c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1c8      	bne.n	8001168 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4b83      	ldr	r3, [pc, #524]	@ (80013f0 <HAL_DMA_Init+0x420>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80011ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001206:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001218:	2b04      	cmp	r3, #4
 800121a:	d107      	bne.n	800122c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	4313      	orrs	r3, r2
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800122c:	4b71      	ldr	r3, [pc, #452]	@ (80013f4 <HAL_DMA_Init+0x424>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b71      	ldr	r3, [pc, #452]	@ (80013f8 <HAL_DMA_Init+0x428>)
 8001232:	4013      	ands	r3, r2
 8001234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001238:	d328      	bcc.n	800128c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b28      	cmp	r3, #40	@ 0x28
 8001240:	d903      	bls.n	800124a <HAL_DMA_Init+0x27a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b2e      	cmp	r3, #46	@ 0x2e
 8001248:	d917      	bls.n	800127a <HAL_DMA_Init+0x2aa>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001250:	d903      	bls.n	800125a <HAL_DMA_Init+0x28a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b42      	cmp	r3, #66	@ 0x42
 8001258:	d90f      	bls.n	800127a <HAL_DMA_Init+0x2aa>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b46      	cmp	r3, #70	@ 0x46
 8001260:	d903      	bls.n	800126a <HAL_DMA_Init+0x29a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b48      	cmp	r3, #72	@ 0x48
 8001268:	d907      	bls.n	800127a <HAL_DMA_Init+0x2aa>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001270:	d905      	bls.n	800127e <HAL_DMA_Init+0x2ae>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b52      	cmp	r3, #82	@ 0x52
 8001278:	d801      	bhi.n	800127e <HAL_DMA_Init+0x2ae>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_DMA_Init+0x2b0>
 800127e:	2300      	movs	r3, #0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800128a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f023 0307 	bic.w	r3, r3, #7
 80012a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d117      	bne.n	80012e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00e      	beq.n	80012e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f001 fdcf 	bl	8002e6c <DMA_CheckFifoParam>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2240      	movs	r2, #64	@ 0x40
 80012d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e197      	b.n	8001616 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 fd0a 	bl	8002d08 <DMA_CalcBaseAndBitshift>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	223f      	movs	r2, #63	@ 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e0cd      	b.n	80014a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a3b      	ldr	r2, [pc, #236]	@ (80013fc <HAL_DMA_Init+0x42c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d022      	beq.n	800135a <HAL_DMA_Init+0x38a>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a39      	ldr	r2, [pc, #228]	@ (8001400 <HAL_DMA_Init+0x430>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01d      	beq.n	800135a <HAL_DMA_Init+0x38a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <HAL_DMA_Init+0x434>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d018      	beq.n	800135a <HAL_DMA_Init+0x38a>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <HAL_DMA_Init+0x438>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_DMA_Init+0x38a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a35      	ldr	r2, [pc, #212]	@ (800140c <HAL_DMA_Init+0x43c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00e      	beq.n	800135a <HAL_DMA_Init+0x38a>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a33      	ldr	r2, [pc, #204]	@ (8001410 <HAL_DMA_Init+0x440>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d009      	beq.n	800135a <HAL_DMA_Init+0x38a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a32      	ldr	r2, [pc, #200]	@ (8001414 <HAL_DMA_Init+0x444>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d004      	beq.n	800135a <HAL_DMA_Init+0x38a>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a30      	ldr	r2, [pc, #192]	@ (8001418 <HAL_DMA_Init+0x448>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_DMA_Init+0x38e>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_DMA_Init+0x390>
 800135e:	2300      	movs	r3, #0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 8097 	beq.w	8001494 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <HAL_DMA_Init+0x42c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d021      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <HAL_DMA_Init+0x430>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01c      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a21      	ldr	r2, [pc, #132]	@ (8001404 <HAL_DMA_Init+0x434>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d017      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <HAL_DMA_Init+0x438>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d012      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_DMA_Init+0x43c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d00d      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1c      	ldr	r2, [pc, #112]	@ (8001410 <HAL_DMA_Init+0x440>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <HAL_DMA_Init+0x444>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_Init+0x3e4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	@ (8001418 <HAL_DMA_Init+0x448>)
 80013b2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_DMA_Init+0x44c>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b40      	cmp	r3, #64	@ 0x40
 80013da:	d021      	beq.n	8001420 <HAL_DMA_Init+0x450>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b80      	cmp	r3, #128	@ 0x80
 80013e2:	d102      	bne.n	80013ea <HAL_DMA_Init+0x41a>
 80013e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013e8:	e01b      	b.n	8001422 <HAL_DMA_Init+0x452>
 80013ea:	2300      	movs	r3, #0
 80013ec:	e019      	b.n	8001422 <HAL_DMA_Init+0x452>
 80013ee:	bf00      	nop
 80013f0:	fe10803f 	.word	0xfe10803f
 80013f4:	5c001000 	.word	0x5c001000
 80013f8:	ffff0000 	.word	0xffff0000
 80013fc:	58025408 	.word	0x58025408
 8001400:	5802541c 	.word	0x5802541c
 8001404:	58025430 	.word	0x58025430
 8001408:	58025444 	.word	0x58025444
 800140c:	58025458 	.word	0x58025458
 8001410:	5802546c 	.word	0x5802546c
 8001414:	58025480 	.word	0x58025480
 8001418:	58025494 	.word	0x58025494
 800141c:	fffe000f 	.word	0xfffe000f
 8001420:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68d2      	ldr	r2, [r2, #12]
 8001426:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001428:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001450:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b6e      	ldr	r3, [pc, #440]	@ (8001620 <HAL_DMA_Init+0x650>)
 8001468:	4413      	add	r3, r2
 800146a:	4a6e      	ldr	r2, [pc, #440]	@ (8001624 <HAL_DMA_Init+0x654>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	009a      	lsls	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 fc45 	bl	8002d08 <DMA_CalcBaseAndBitshift>
 800147e:	4603      	mov	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2201      	movs	r2, #1
 800148c:	409a      	lsls	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	e008      	b.n	80014a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2240      	movs	r2, #64	@ 0x40
 8001498:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0b7      	b.n	8001616 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001628 <HAL_DMA_Init+0x658>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d072      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a5d      	ldr	r2, [pc, #372]	@ (800162c <HAL_DMA_Init+0x65c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d06d      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a5c      	ldr	r2, [pc, #368]	@ (8001630 <HAL_DMA_Init+0x660>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d068      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001634 <HAL_DMA_Init+0x664>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d063      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a59      	ldr	r2, [pc, #356]	@ (8001638 <HAL_DMA_Init+0x668>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d05e      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a57      	ldr	r2, [pc, #348]	@ (800163c <HAL_DMA_Init+0x66c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d059      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <HAL_DMA_Init+0x670>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d054      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a54      	ldr	r2, [pc, #336]	@ (8001644 <HAL_DMA_Init+0x674>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d04f      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a53      	ldr	r2, [pc, #332]	@ (8001648 <HAL_DMA_Init+0x678>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d04a      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a51      	ldr	r2, [pc, #324]	@ (800164c <HAL_DMA_Init+0x67c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d045      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a50      	ldr	r2, [pc, #320]	@ (8001650 <HAL_DMA_Init+0x680>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d040      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a4e      	ldr	r2, [pc, #312]	@ (8001654 <HAL_DMA_Init+0x684>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d03b      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a4d      	ldr	r2, [pc, #308]	@ (8001658 <HAL_DMA_Init+0x688>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d036      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a4b      	ldr	r2, [pc, #300]	@ (800165c <HAL_DMA_Init+0x68c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d031      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4a      	ldr	r2, [pc, #296]	@ (8001660 <HAL_DMA_Init+0x690>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d02c      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a48      	ldr	r2, [pc, #288]	@ (8001664 <HAL_DMA_Init+0x694>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d027      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a47      	ldr	r2, [pc, #284]	@ (8001668 <HAL_DMA_Init+0x698>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d022      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a45      	ldr	r2, [pc, #276]	@ (800166c <HAL_DMA_Init+0x69c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01d      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a44      	ldr	r2, [pc, #272]	@ (8001670 <HAL_DMA_Init+0x6a0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d018      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a42      	ldr	r2, [pc, #264]	@ (8001674 <HAL_DMA_Init+0x6a4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a41      	ldr	r2, [pc, #260]	@ (8001678 <HAL_DMA_Init+0x6a8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d00e      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a3f      	ldr	r2, [pc, #252]	@ (800167c <HAL_DMA_Init+0x6ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d009      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a3e      	ldr	r2, [pc, #248]	@ (8001680 <HAL_DMA_Init+0x6b0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d004      	beq.n	8001596 <HAL_DMA_Init+0x5c6>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <HAL_DMA_Init+0x6b4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_DMA_Init+0x5ca>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_DMA_Init+0x5cc>
 800159a:	2300      	movs	r3, #0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d032      	beq.n	8001606 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f001 fcdf 	bl	8002f64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b80      	cmp	r3, #128	@ 0x80
 80015ac:	d102      	bne.n	80015b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80015c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <HAL_DMA_Init+0x624>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d80c      	bhi.n	80015f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f001 fd5c 	bl	8003098 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e008      	b.n	8001606 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	a7fdabf8 	.word	0xa7fdabf8
 8001624:	cccccccd 	.word	0xcccccccd
 8001628:	40020010 	.word	0x40020010
 800162c:	40020028 	.word	0x40020028
 8001630:	40020040 	.word	0x40020040
 8001634:	40020058 	.word	0x40020058
 8001638:	40020070 	.word	0x40020070
 800163c:	40020088 	.word	0x40020088
 8001640:	400200a0 	.word	0x400200a0
 8001644:	400200b8 	.word	0x400200b8
 8001648:	40020410 	.word	0x40020410
 800164c:	40020428 	.word	0x40020428
 8001650:	40020440 	.word	0x40020440
 8001654:	40020458 	.word	0x40020458
 8001658:	40020470 	.word	0x40020470
 800165c:	40020488 	.word	0x40020488
 8001660:	400204a0 	.word	0x400204a0
 8001664:	400204b8 	.word	0x400204b8
 8001668:	58025408 	.word	0x58025408
 800166c:	5802541c 	.word	0x5802541c
 8001670:	58025430 	.word	0x58025430
 8001674:	58025444 	.word	0x58025444
 8001678:	58025458 	.word	0x58025458
 800167c:	5802546c 	.word	0x5802546c
 8001680:	58025480 	.word	0x58025480
 8001684:	58025494 	.word	0x58025494

08001688 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e226      	b.n	8001af2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Start_IT+0x2a>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e21f      	b.n	8001af2 <HAL_DMA_Start_IT+0x46a>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f040 820a 	bne.w	8001adc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a68      	ldr	r2, [pc, #416]	@ (800187c <HAL_DMA_Start_IT+0x1f4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d04a      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a66      	ldr	r2, [pc, #408]	@ (8001880 <HAL_DMA_Start_IT+0x1f8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d045      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a65      	ldr	r2, [pc, #404]	@ (8001884 <HAL_DMA_Start_IT+0x1fc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d040      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a63      	ldr	r2, [pc, #396]	@ (8001888 <HAL_DMA_Start_IT+0x200>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d03b      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a62      	ldr	r2, [pc, #392]	@ (800188c <HAL_DMA_Start_IT+0x204>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d036      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <HAL_DMA_Start_IT+0x208>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d031      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5f      	ldr	r2, [pc, #380]	@ (8001894 <HAL_DMA_Start_IT+0x20c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d02c      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a5d      	ldr	r2, [pc, #372]	@ (8001898 <HAL_DMA_Start_IT+0x210>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d027      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a5c      	ldr	r2, [pc, #368]	@ (800189c <HAL_DMA_Start_IT+0x214>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d022      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a5a      	ldr	r2, [pc, #360]	@ (80018a0 <HAL_DMA_Start_IT+0x218>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01d      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a59      	ldr	r2, [pc, #356]	@ (80018a4 <HAL_DMA_Start_IT+0x21c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d018      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a57      	ldr	r2, [pc, #348]	@ (80018a8 <HAL_DMA_Start_IT+0x220>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a56      	ldr	r2, [pc, #344]	@ (80018ac <HAL_DMA_Start_IT+0x224>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00e      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a54      	ldr	r2, [pc, #336]	@ (80018b0 <HAL_DMA_Start_IT+0x228>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d009      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a53      	ldr	r2, [pc, #332]	@ (80018b4 <HAL_DMA_Start_IT+0x22c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d004      	beq.n	8001776 <HAL_DMA_Start_IT+0xee>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a51      	ldr	r2, [pc, #324]	@ (80018b8 <HAL_DMA_Start_IT+0x230>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d108      	bne.n	8001788 <HAL_DMA_Start_IT+0x100>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e007      	b.n	8001798 <HAL_DMA_Start_IT+0x110>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f001 f906 	bl	80029b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a34      	ldr	r2, [pc, #208]	@ (800187c <HAL_DMA_Start_IT+0x1f4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d04a      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a33      	ldr	r2, [pc, #204]	@ (8001880 <HAL_DMA_Start_IT+0x1f8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d045      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a31      	ldr	r2, [pc, #196]	@ (8001884 <HAL_DMA_Start_IT+0x1fc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d040      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a30      	ldr	r2, [pc, #192]	@ (8001888 <HAL_DMA_Start_IT+0x200>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d03b      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2e      	ldr	r2, [pc, #184]	@ (800188c <HAL_DMA_Start_IT+0x204>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d036      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2d      	ldr	r2, [pc, #180]	@ (8001890 <HAL_DMA_Start_IT+0x208>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d031      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <HAL_DMA_Start_IT+0x20c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d02c      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001898 <HAL_DMA_Start_IT+0x210>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d027      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a28      	ldr	r2, [pc, #160]	@ (800189c <HAL_DMA_Start_IT+0x214>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d022      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a27      	ldr	r2, [pc, #156]	@ (80018a0 <HAL_DMA_Start_IT+0x218>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01d      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <HAL_DMA_Start_IT+0x21c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d018      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a24      	ldr	r2, [pc, #144]	@ (80018a8 <HAL_DMA_Start_IT+0x220>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a22      	ldr	r2, [pc, #136]	@ (80018ac <HAL_DMA_Start_IT+0x224>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00e      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a21      	ldr	r2, [pc, #132]	@ (80018b0 <HAL_DMA_Start_IT+0x228>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1f      	ldr	r2, [pc, #124]	@ (80018b4 <HAL_DMA_Start_IT+0x22c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Start_IT+0x1bc>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1e      	ldr	r2, [pc, #120]	@ (80018b8 <HAL_DMA_Start_IT+0x230>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Start_IT+0x1c0>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_DMA_Start_IT+0x1c2>
 8001848:	2300      	movs	r3, #0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d036      	beq.n	80018bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 021e 	bic.w	r2, r3, #30
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0216 	orr.w	r2, r2, #22
 8001860:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03e      	beq.n	80018e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0208 	orr.w	r2, r2, #8
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e035      	b.n	80018e8 <HAL_DMA_Start_IT+0x260>
 800187c:	40020010 	.word	0x40020010
 8001880:	40020028 	.word	0x40020028
 8001884:	40020040 	.word	0x40020040
 8001888:	40020058 	.word	0x40020058
 800188c:	40020070 	.word	0x40020070
 8001890:	40020088 	.word	0x40020088
 8001894:	400200a0 	.word	0x400200a0
 8001898:	400200b8 	.word	0x400200b8
 800189c:	40020410 	.word	0x40020410
 80018a0:	40020428 	.word	0x40020428
 80018a4:	40020440 	.word	0x40020440
 80018a8:	40020458 	.word	0x40020458
 80018ac:	40020470 	.word	0x40020470
 80018b0:	40020488 	.word	0x40020488
 80018b4:	400204a0 	.word	0x400204a0
 80018b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 020e 	bic.w	r2, r3, #14
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 020a 	orr.w	r2, r2, #10
 80018ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0204 	orr.w	r2, r2, #4
 80018e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a83      	ldr	r2, [pc, #524]	@ (8001afc <HAL_DMA_Start_IT+0x474>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d072      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a82      	ldr	r2, [pc, #520]	@ (8001b00 <HAL_DMA_Start_IT+0x478>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d06d      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a80      	ldr	r2, [pc, #512]	@ (8001b04 <HAL_DMA_Start_IT+0x47c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d068      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b08 <HAL_DMA_Start_IT+0x480>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d063      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a7d      	ldr	r2, [pc, #500]	@ (8001b0c <HAL_DMA_Start_IT+0x484>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d05e      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b10 <HAL_DMA_Start_IT+0x488>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d059      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a7a      	ldr	r2, [pc, #488]	@ (8001b14 <HAL_DMA_Start_IT+0x48c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d054      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a79      	ldr	r2, [pc, #484]	@ (8001b18 <HAL_DMA_Start_IT+0x490>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04f      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a77      	ldr	r2, [pc, #476]	@ (8001b1c <HAL_DMA_Start_IT+0x494>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d04a      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a76      	ldr	r2, [pc, #472]	@ (8001b20 <HAL_DMA_Start_IT+0x498>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d045      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a74      	ldr	r2, [pc, #464]	@ (8001b24 <HAL_DMA_Start_IT+0x49c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d040      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a73      	ldr	r2, [pc, #460]	@ (8001b28 <HAL_DMA_Start_IT+0x4a0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d03b      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a71      	ldr	r2, [pc, #452]	@ (8001b2c <HAL_DMA_Start_IT+0x4a4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d036      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a70      	ldr	r2, [pc, #448]	@ (8001b30 <HAL_DMA_Start_IT+0x4a8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d031      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6e      	ldr	r2, [pc, #440]	@ (8001b34 <HAL_DMA_Start_IT+0x4ac>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02c      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6d      	ldr	r2, [pc, #436]	@ (8001b38 <HAL_DMA_Start_IT+0x4b0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d027      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b3c <HAL_DMA_Start_IT+0x4b4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d022      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6a      	ldr	r2, [pc, #424]	@ (8001b40 <HAL_DMA_Start_IT+0x4b8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d01d      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a68      	ldr	r2, [pc, #416]	@ (8001b44 <HAL_DMA_Start_IT+0x4bc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d018      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a67      	ldr	r2, [pc, #412]	@ (8001b48 <HAL_DMA_Start_IT+0x4c0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a65      	ldr	r2, [pc, #404]	@ (8001b4c <HAL_DMA_Start_IT+0x4c4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00e      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a64      	ldr	r2, [pc, #400]	@ (8001b50 <HAL_DMA_Start_IT+0x4c8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d009      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a62      	ldr	r2, [pc, #392]	@ (8001b54 <HAL_DMA_Start_IT+0x4cc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_Start_IT+0x350>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a61      	ldr	r2, [pc, #388]	@ (8001b58 <HAL_DMA_Start_IT+0x4d0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_DMA_Start_IT+0x354>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_DMA_Start_IT+0x356>
 80019dc:	2300      	movs	r3, #0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01a      	beq.n	8001a18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d007      	beq.n	8001a00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a37      	ldr	r2, [pc, #220]	@ (8001afc <HAL_DMA_Start_IT+0x474>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d04a      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a36      	ldr	r2, [pc, #216]	@ (8001b00 <HAL_DMA_Start_IT+0x478>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d045      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a34      	ldr	r2, [pc, #208]	@ (8001b04 <HAL_DMA_Start_IT+0x47c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d040      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a33      	ldr	r2, [pc, #204]	@ (8001b08 <HAL_DMA_Start_IT+0x480>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d03b      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <HAL_DMA_Start_IT+0x484>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d036      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a30      	ldr	r2, [pc, #192]	@ (8001b10 <HAL_DMA_Start_IT+0x488>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d031      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a2e      	ldr	r2, [pc, #184]	@ (8001b14 <HAL_DMA_Start_IT+0x48c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02c      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2d      	ldr	r2, [pc, #180]	@ (8001b18 <HAL_DMA_Start_IT+0x490>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d027      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001b1c <HAL_DMA_Start_IT+0x494>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d022      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <HAL_DMA_Start_IT+0x498>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d01d      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a28      	ldr	r2, [pc, #160]	@ (8001b24 <HAL_DMA_Start_IT+0x49c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d018      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a27      	ldr	r2, [pc, #156]	@ (8001b28 <HAL_DMA_Start_IT+0x4a0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a25      	ldr	r2, [pc, #148]	@ (8001b2c <HAL_DMA_Start_IT+0x4a4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00e      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a24      	ldr	r2, [pc, #144]	@ (8001b30 <HAL_DMA_Start_IT+0x4a8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d009      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a22      	ldr	r2, [pc, #136]	@ (8001b34 <HAL_DMA_Start_IT+0x4ac>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d004      	beq.n	8001ab8 <HAL_DMA_Start_IT+0x430>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <HAL_DMA_Start_IT+0x4b0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d108      	bne.n	8001aca <HAL_DMA_Start_IT+0x442>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e012      	b.n	8001af0 <HAL_DMA_Start_IT+0x468>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e009      	b.n	8001af0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ae2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020010 	.word	0x40020010
 8001b00:	40020028 	.word	0x40020028
 8001b04:	40020040 	.word	0x40020040
 8001b08:	40020058 	.word	0x40020058
 8001b0c:	40020070 	.word	0x40020070
 8001b10:	40020088 	.word	0x40020088
 8001b14:	400200a0 	.word	0x400200a0
 8001b18:	400200b8 	.word	0x400200b8
 8001b1c:	40020410 	.word	0x40020410
 8001b20:	40020428 	.word	0x40020428
 8001b24:	40020440 	.word	0x40020440
 8001b28:	40020458 	.word	0x40020458
 8001b2c:	40020470 	.word	0x40020470
 8001b30:	40020488 	.word	0x40020488
 8001b34:	400204a0 	.word	0x400204a0
 8001b38:	400204b8 	.word	0x400204b8
 8001b3c:	58025408 	.word	0x58025408
 8001b40:	5802541c 	.word	0x5802541c
 8001b44:	58025430 	.word	0x58025430
 8001b48:	58025444 	.word	0x58025444
 8001b4c:	58025458 	.word	0x58025458
 8001b50:	5802546c 	.word	0x5802546c
 8001b54:	58025480 	.word	0x58025480
 8001b58:	58025494 	.word	0x58025494

08001b5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b68:	4b67      	ldr	r3, [pc, #412]	@ (8001d08 <HAL_DMA_IRQHandler+0x1ac>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a67      	ldr	r2, [pc, #412]	@ (8001d0c <HAL_DMA_IRQHandler+0x1b0>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0a9b      	lsrs	r3, r3, #10
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5f      	ldr	r2, [pc, #380]	@ (8001d10 <HAL_DMA_IRQHandler+0x1b4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04a      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d14 <HAL_DMA_IRQHandler+0x1b8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d045      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d18 <HAL_DMA_IRQHandler+0x1bc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d1c <HAL_DMA_IRQHandler+0x1c0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d03b      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a59      	ldr	r2, [pc, #356]	@ (8001d20 <HAL_DMA_IRQHandler+0x1c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a57      	ldr	r2, [pc, #348]	@ (8001d24 <HAL_DMA_IRQHandler+0x1c8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a56      	ldr	r2, [pc, #344]	@ (8001d28 <HAL_DMA_IRQHandler+0x1cc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d02c      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a54      	ldr	r2, [pc, #336]	@ (8001d2c <HAL_DMA_IRQHandler+0x1d0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a53      	ldr	r2, [pc, #332]	@ (8001d30 <HAL_DMA_IRQHandler+0x1d4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a51      	ldr	r2, [pc, #324]	@ (8001d34 <HAL_DMA_IRQHandler+0x1d8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a50      	ldr	r2, [pc, #320]	@ (8001d38 <HAL_DMA_IRQHandler+0x1dc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	@ (8001d3c <HAL_DMA_IRQHandler+0x1e0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d40 <HAL_DMA_IRQHandler+0x1e4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	@ (8001d44 <HAL_DMA_IRQHandler+0x1e8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d48 <HAL_DMA_IRQHandler+0x1ec>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xd2>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a48      	ldr	r2, [pc, #288]	@ (8001d4c <HAL_DMA_IRQHandler+0x1f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_DMA_IRQHandler+0xd6>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_DMA_IRQHandler+0xd8>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 842b 	beq.w	8002490 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2208      	movs	r2, #8
 8001c44:	409a      	lsls	r2, r3
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a2 	beq.w	8001d94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2e      	ldr	r2, [pc, #184]	@ (8001d10 <HAL_DMA_IRQHandler+0x1b4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d04a      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d14 <HAL_DMA_IRQHandler+0x1b8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d045      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <HAL_DMA_IRQHandler+0x1bc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d040      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2a      	ldr	r2, [pc, #168]	@ (8001d1c <HAL_DMA_IRQHandler+0x1c0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d03b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a28      	ldr	r2, [pc, #160]	@ (8001d20 <HAL_DMA_IRQHandler+0x1c4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d036      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <HAL_DMA_IRQHandler+0x1c8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d031      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a25      	ldr	r2, [pc, #148]	@ (8001d28 <HAL_DMA_IRQHandler+0x1cc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02c      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a24      	ldr	r2, [pc, #144]	@ (8001d2c <HAL_DMA_IRQHandler+0x1d0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d027      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	@ (8001d30 <HAL_DMA_IRQHandler+0x1d4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d022      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <HAL_DMA_IRQHandler+0x1d8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d38 <HAL_DMA_IRQHandler+0x1dc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <HAL_DMA_IRQHandler+0x1e0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d40 <HAL_DMA_IRQHandler+0x1e4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d44 <HAL_DMA_IRQHandler+0x1e8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_DMA_IRQHandler+0x1ec>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x194>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a18      	ldr	r2, [pc, #96]	@ (8001d4c <HAL_DMA_IRQHandler+0x1f0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d12f      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x1f4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e02e      	b.n	8001d64 <HAL_DMA_IRQHandler+0x208>
 8001d06:	bf00      	nop
 8001d08:	24000000 	.word	0x24000000
 8001d0c:	1b4e81b5 	.word	0x1b4e81b5
 8001d10:	40020010 	.word	0x40020010
 8001d14:	40020028 	.word	0x40020028
 8001d18:	40020040 	.word	0x40020040
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	40020070 	.word	0x40020070
 8001d24:	40020088 	.word	0x40020088
 8001d28:	400200a0 	.word	0x400200a0
 8001d2c:	400200b8 	.word	0x400200b8
 8001d30:	40020410 	.word	0x40020410
 8001d34:	40020428 	.word	0x40020428
 8001d38:	40020440 	.word	0x40020440
 8001d3c:	40020458 	.word	0x40020458
 8001d40:	40020470 	.word	0x40020470
 8001d44:	40020488 	.word	0x40020488
 8001d48:	400204a0 	.word	0x400204a0
 8001d4c:	400204b8 	.word	0x400204b8
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2208      	movs	r2, #8
 8001d82:	409a      	lsls	r2, r3
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06e      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a69      	ldr	r2, [pc, #420]	@ (8001f54 <HAL_DMA_IRQHandler+0x3f8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d04a      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	@ (8001f58 <HAL_DMA_IRQHandler+0x3fc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d045      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	@ (8001f5c <HAL_DMA_IRQHandler+0x400>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d040      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a64      	ldr	r2, [pc, #400]	@ (8001f60 <HAL_DMA_IRQHandler+0x404>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d03b      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a63      	ldr	r2, [pc, #396]	@ (8001f64 <HAL_DMA_IRQHandler+0x408>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d036      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a61      	ldr	r2, [pc, #388]	@ (8001f68 <HAL_DMA_IRQHandler+0x40c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d031      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a60      	ldr	r2, [pc, #384]	@ (8001f6c <HAL_DMA_IRQHandler+0x410>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d02c      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5e      	ldr	r2, [pc, #376]	@ (8001f70 <HAL_DMA_IRQHandler+0x414>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d027      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001f74 <HAL_DMA_IRQHandler+0x418>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5b      	ldr	r2, [pc, #364]	@ (8001f78 <HAL_DMA_IRQHandler+0x41c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01d      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a5a      	ldr	r2, [pc, #360]	@ (8001f7c <HAL_DMA_IRQHandler+0x420>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a58      	ldr	r2, [pc, #352]	@ (8001f80 <HAL_DMA_IRQHandler+0x424>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a57      	ldr	r2, [pc, #348]	@ (8001f84 <HAL_DMA_IRQHandler+0x428>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a55      	ldr	r2, [pc, #340]	@ (8001f88 <HAL_DMA_IRQHandler+0x42c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a54      	ldr	r2, [pc, #336]	@ (8001f8c <HAL_DMA_IRQHandler+0x430>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2ee>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_DMA_IRQHandler+0x434>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10a      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x304>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	e003      	b.n	8001e68 <HAL_DMA_IRQHandler+0x30c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2204      	movs	r2, #4
 8001e92:	409a      	lsls	r2, r3
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 808f 	beq.w	8001fbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f54 <HAL_DMA_IRQHandler+0x3f8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04a      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_DMA_IRQHandler+0x3fc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d045      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <HAL_DMA_IRQHandler+0x400>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d040      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_IRQHandler+0x404>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d03b      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a26      	ldr	r2, [pc, #152]	@ (8001f64 <HAL_DMA_IRQHandler+0x408>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d036      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_DMA_IRQHandler+0x40c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <HAL_DMA_IRQHandler+0x410>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d02c      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_DMA_IRQHandler+0x414>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d027      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a20      	ldr	r2, [pc, #128]	@ (8001f74 <HAL_DMA_IRQHandler+0x418>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d022      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_DMA_IRQHandler+0x41c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01d      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_DMA_IRQHandler+0x420>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d018      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_DMA_IRQHandler+0x424>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_DMA_IRQHandler+0x428>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <HAL_DMA_IRQHandler+0x42c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a17      	ldr	r2, [pc, #92]	@ (8001f8c <HAL_DMA_IRQHandler+0x430>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x3e2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <HAL_DMA_IRQHandler+0x434>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d12a      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x438>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e023      	b.n	8001f9c <HAL_DMA_IRQHandler+0x440>
 8001f54:	40020010 	.word	0x40020010
 8001f58:	40020028 	.word	0x40020028
 8001f5c:	40020040 	.word	0x40020040
 8001f60:	40020058 	.word	0x40020058
 8001f64:	40020070 	.word	0x40020070
 8001f68:	40020088 	.word	0x40020088
 8001f6c:	400200a0 	.word	0x400200a0
 8001f70:	400200b8 	.word	0x400200b8
 8001f74:	40020410 	.word	0x40020410
 8001f78:	40020428 	.word	0x40020428
 8001f7c:	40020440 	.word	0x40020440
 8001f80:	40020458 	.word	0x40020458
 8001f84:	40020470 	.word	0x40020470
 8001f88:	40020488 	.word	0x40020488
 8001f8c:	400204a0 	.word	0x400204a0
 8001f90:	400204b8 	.word	0x400204b8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2204      	movs	r2, #4
 8001faa:	409a      	lsls	r2, r3
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a6 	beq.w	800211e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a85      	ldr	r2, [pc, #532]	@ (80021ec <HAL_DMA_IRQHandler+0x690>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d04a      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a83      	ldr	r2, [pc, #524]	@ (80021f0 <HAL_DMA_IRQHandler+0x694>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d045      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a82      	ldr	r2, [pc, #520]	@ (80021f4 <HAL_DMA_IRQHandler+0x698>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d040      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a80      	ldr	r2, [pc, #512]	@ (80021f8 <HAL_DMA_IRQHandler+0x69c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d03b      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7f      	ldr	r2, [pc, #508]	@ (80021fc <HAL_DMA_IRQHandler+0x6a0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d036      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a7d      	ldr	r2, [pc, #500]	@ (8002200 <HAL_DMA_IRQHandler+0x6a4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d031      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7c      	ldr	r2, [pc, #496]	@ (8002204 <HAL_DMA_IRQHandler+0x6a8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d02c      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7a      	ldr	r2, [pc, #488]	@ (8002208 <HAL_DMA_IRQHandler+0x6ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d027      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a79      	ldr	r2, [pc, #484]	@ (800220c <HAL_DMA_IRQHandler+0x6b0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a77      	ldr	r2, [pc, #476]	@ (8002210 <HAL_DMA_IRQHandler+0x6b4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01d      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a76      	ldr	r2, [pc, #472]	@ (8002214 <HAL_DMA_IRQHandler+0x6b8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d018      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a74      	ldr	r2, [pc, #464]	@ (8002218 <HAL_DMA_IRQHandler+0x6bc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a73      	ldr	r2, [pc, #460]	@ (800221c <HAL_DMA_IRQHandler+0x6c0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00e      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a71      	ldr	r2, [pc, #452]	@ (8002220 <HAL_DMA_IRQHandler+0x6c4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d009      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a70      	ldr	r2, [pc, #448]	@ (8002224 <HAL_DMA_IRQHandler+0x6c8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d004      	beq.n	8002072 <HAL_DMA_IRQHandler+0x516>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6e      	ldr	r2, [pc, #440]	@ (8002228 <HAL_DMA_IRQHandler+0x6cc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10a      	bne.n	8002088 <HAL_DMA_IRQHandler+0x52c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e009      	b.n	800209c <HAL_DMA_IRQHandler+0x540>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03e      	beq.n	800211e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2210      	movs	r2, #16
 80020aa:	409a      	lsls	r2, r3
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d018      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d108      	bne.n	80020de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d024      	beq.n	800211e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e01f      	b.n	800211e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01b      	beq.n	800211e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
 80020ee:	e016      	b.n	800211e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d107      	bne.n	800210e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2220      	movs	r2, #32
 8002128:	409a      	lsls	r2, r3
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8110 	beq.w	8002354 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2c      	ldr	r2, [pc, #176]	@ (80021ec <HAL_DMA_IRQHandler+0x690>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d04a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <HAL_DMA_IRQHandler+0x694>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d045      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <HAL_DMA_IRQHandler+0x698>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d040      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a28      	ldr	r2, [pc, #160]	@ (80021f8 <HAL_DMA_IRQHandler+0x69c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d03b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <HAL_DMA_IRQHandler+0x6a0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d036      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a25      	ldr	r2, [pc, #148]	@ (8002200 <HAL_DMA_IRQHandler+0x6a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a23      	ldr	r2, [pc, #140]	@ (8002204 <HAL_DMA_IRQHandler+0x6a8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02c      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <HAL_DMA_IRQHandler+0x6ac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d027      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_DMA_IRQHandler+0x6b0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1f      	ldr	r2, [pc, #124]	@ (8002210 <HAL_DMA_IRQHandler+0x6b4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d01d      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_DMA_IRQHandler+0x6b8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d018      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_DMA_IRQHandler+0x6bc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1a      	ldr	r2, [pc, #104]	@ (800221c <HAL_DMA_IRQHandler+0x6c0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <HAL_DMA_IRQHandler+0x6c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HAL_DMA_IRQHandler+0x6c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x678>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a16      	ldr	r2, [pc, #88]	@ (8002228 <HAL_DMA_IRQHandler+0x6cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d12b      	bne.n	800222c <HAL_DMA_IRQHandler+0x6d0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e02a      	b.n	8002240 <HAL_DMA_IRQHandler+0x6e4>
 80021ea:	bf00      	nop
 80021ec:	40020010 	.word	0x40020010
 80021f0:	40020028 	.word	0x40020028
 80021f4:	40020040 	.word	0x40020040
 80021f8:	40020058 	.word	0x40020058
 80021fc:	40020070 	.word	0x40020070
 8002200:	40020088 	.word	0x40020088
 8002204:	400200a0 	.word	0x400200a0
 8002208:	400200b8 	.word	0x400200b8
 800220c:	40020410 	.word	0x40020410
 8002210:	40020428 	.word	0x40020428
 8002214:	40020440 	.word	0x40020440
 8002218:	40020458 	.word	0x40020458
 800221c:	40020470 	.word	0x40020470
 8002220:	40020488 	.word	0x40020488
 8002224:	400204a0 	.word	0x400204a0
 8002228:	400204b8 	.word	0x400204b8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf14      	ite	ne
 800223a:	2301      	movne	r3, #1
 800223c:	2300      	moveq	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8087 	beq.w	8002354 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2220      	movs	r2, #32
 8002250:	409a      	lsls	r2, r3
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b04      	cmp	r3, #4
 8002260:	d139      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0216 	bic.w	r2, r2, #22
 8002270:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002280:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_DMA_IRQHandler+0x736>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	223f      	movs	r2, #63	@ 0x3f
 80022ac:	409a      	lsls	r2, r3
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 834a 	beq.w	8002960 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
          }
          return;
 80022d4:	e344      	b.n	8002960 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d02c      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
 8002302:	e027      	b.n	8002354 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e01e      	b.n	8002354 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0210 	bic.w	r2, r2, #16
 8002332:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8306 	beq.w	800296a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8088 	beq.w	800247c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7a      	ldr	r2, [pc, #488]	@ (8002564 <HAL_DMA_IRQHandler+0xa08>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	@ (8002568 <HAL_DMA_IRQHandler+0xa0c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a77      	ldr	r2, [pc, #476]	@ (800256c <HAL_DMA_IRQHandler+0xa10>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	@ (8002570 <HAL_DMA_IRQHandler+0xa14>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a74      	ldr	r2, [pc, #464]	@ (8002574 <HAL_DMA_IRQHandler+0xa18>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	@ (8002578 <HAL_DMA_IRQHandler+0xa1c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a71      	ldr	r2, [pc, #452]	@ (800257c <HAL_DMA_IRQHandler+0xa20>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a70      	ldr	r2, [pc, #448]	@ (8002580 <HAL_DMA_IRQHandler+0xa24>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002584 <HAL_DMA_IRQHandler+0xa28>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002588 <HAL_DMA_IRQHandler+0xa2c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6b      	ldr	r2, [pc, #428]	@ (800258c <HAL_DMA_IRQHandler+0xa30>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002590 <HAL_DMA_IRQHandler+0xa34>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a68      	ldr	r2, [pc, #416]	@ (8002594 <HAL_DMA_IRQHandler+0xa38>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a67      	ldr	r2, [pc, #412]	@ (8002598 <HAL_DMA_IRQHandler+0xa3c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a65      	ldr	r2, [pc, #404]	@ (800259c <HAL_DMA_IRQHandler+0xa40>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_IRQHandler+0x8b8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a64      	ldr	r2, [pc, #400]	@ (80025a0 <HAL_DMA_IRQHandler+0xa44>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <HAL_DMA_IRQHandler+0x8ca>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <HAL_DMA_IRQHandler+0x8da>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243e:	429a      	cmp	r2, r3
 8002440:	d307      	bcc.n	8002452 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f2      	bne.n	8002436 <HAL_DMA_IRQHandler+0x8da>
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002452:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800246a:	e003      	b.n	8002474 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8272 	beq.w	800296a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
 800248e:	e26c      	b.n	800296a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a43      	ldr	r2, [pc, #268]	@ (80025a4 <HAL_DMA_IRQHandler+0xa48>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a42      	ldr	r2, [pc, #264]	@ (80025a8 <HAL_DMA_IRQHandler+0xa4c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d01d      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a40      	ldr	r2, [pc, #256]	@ (80025ac <HAL_DMA_IRQHandler+0xa50>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a3f      	ldr	r2, [pc, #252]	@ (80025b0 <HAL_DMA_IRQHandler+0xa54>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3d      	ldr	r2, [pc, #244]	@ (80025b4 <HAL_DMA_IRQHandler+0xa58>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a3c      	ldr	r2, [pc, #240]	@ (80025b8 <HAL_DMA_IRQHandler+0xa5c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3a      	ldr	r2, [pc, #232]	@ (80025bc <HAL_DMA_IRQHandler+0xa60>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x984>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a39      	ldr	r2, [pc, #228]	@ (80025c0 <HAL_DMA_IRQHandler+0xa64>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x988>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_IRQHandler+0x98a>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 823f 	beq.w	800296a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2204      	movs	r2, #4
 80024fe:	409a      	lsls	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80cd 	beq.w	80026a4 <HAL_DMA_IRQHandler+0xb48>
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80c7 	beq.w	80026a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d049      	beq.n	80025c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8210 	beq.w	8002964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800254c:	e20a      	b.n	8002964 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8206 	beq.w	8002964 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002560:	e200      	b.n	8002964 <HAL_DMA_IRQHandler+0xe08>
 8002562:	bf00      	nop
 8002564:	40020010 	.word	0x40020010
 8002568:	40020028 	.word	0x40020028
 800256c:	40020040 	.word	0x40020040
 8002570:	40020058 	.word	0x40020058
 8002574:	40020070 	.word	0x40020070
 8002578:	40020088 	.word	0x40020088
 800257c:	400200a0 	.word	0x400200a0
 8002580:	400200b8 	.word	0x400200b8
 8002584:	40020410 	.word	0x40020410
 8002588:	40020428 	.word	0x40020428
 800258c:	40020440 	.word	0x40020440
 8002590:	40020458 	.word	0x40020458
 8002594:	40020470 	.word	0x40020470
 8002598:	40020488 	.word	0x40020488
 800259c:	400204a0 	.word	0x400204a0
 80025a0:	400204b8 	.word	0x400204b8
 80025a4:	58025408 	.word	0x58025408
 80025a8:	5802541c 	.word	0x5802541c
 80025ac:	58025430 	.word	0x58025430
 80025b0:	58025444 	.word	0x58025444
 80025b4:	58025458 	.word	0x58025458
 80025b8:	5802546c 	.word	0x5802546c
 80025bc:	58025480 	.word	0x58025480
 80025c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d160      	bne.n	8002690 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7f      	ldr	r2, [pc, #508]	@ (80027d0 <HAL_DMA_IRQHandler+0xc74>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d04a      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7d      	ldr	r2, [pc, #500]	@ (80027d4 <HAL_DMA_IRQHandler+0xc78>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d045      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7c      	ldr	r2, [pc, #496]	@ (80027d8 <HAL_DMA_IRQHandler+0xc7c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d040      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7a      	ldr	r2, [pc, #488]	@ (80027dc <HAL_DMA_IRQHandler+0xc80>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d03b      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a79      	ldr	r2, [pc, #484]	@ (80027e0 <HAL_DMA_IRQHandler+0xc84>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d036      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a77      	ldr	r2, [pc, #476]	@ (80027e4 <HAL_DMA_IRQHandler+0xc88>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d031      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a76      	ldr	r2, [pc, #472]	@ (80027e8 <HAL_DMA_IRQHandler+0xc8c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d02c      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a74      	ldr	r2, [pc, #464]	@ (80027ec <HAL_DMA_IRQHandler+0xc90>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d027      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a73      	ldr	r2, [pc, #460]	@ (80027f0 <HAL_DMA_IRQHandler+0xc94>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d022      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a71      	ldr	r2, [pc, #452]	@ (80027f4 <HAL_DMA_IRQHandler+0xc98>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01d      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a70      	ldr	r2, [pc, #448]	@ (80027f8 <HAL_DMA_IRQHandler+0xc9c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d018      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6e      	ldr	r2, [pc, #440]	@ (80027fc <HAL_DMA_IRQHandler+0xca0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a6d      	ldr	r2, [pc, #436]	@ (8002800 <HAL_DMA_IRQHandler+0xca4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6b      	ldr	r2, [pc, #428]	@ (8002804 <HAL_DMA_IRQHandler+0xca8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6a      	ldr	r2, [pc, #424]	@ (8002808 <HAL_DMA_IRQHandler+0xcac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_DMA_IRQHandler+0xb12>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a68      	ldr	r2, [pc, #416]	@ (800280c <HAL_DMA_IRQHandler+0xcb0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <HAL_DMA_IRQHandler+0xb24>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0208 	bic.w	r2, r2, #8
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e007      	b.n	8002690 <HAL_DMA_IRQHandler+0xb34>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0204 	bic.w	r2, r2, #4
 800268e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8165 	beq.w	8002964 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026a2:	e15f      	b.n	8002964 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2202      	movs	r2, #2
 80026ae:	409a      	lsls	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80c5 	beq.w	8002844 <HAL_DMA_IRQHandler+0xce8>
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80bf 	beq.w	8002844 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2202      	movs	r2, #2
 80026d0:	409a      	lsls	r2, r3
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d018      	beq.n	8002712 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 813a 	beq.w	8002968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026fc:	e134      	b.n	8002968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8130 	beq.w	8002968 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002710:	e12a      	b.n	8002968 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 8089 	bne.w	8002830 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2b      	ldr	r2, [pc, #172]	@ (80027d0 <HAL_DMA_IRQHandler+0xc74>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d04a      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <HAL_DMA_IRQHandler+0xc78>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d045      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a28      	ldr	r2, [pc, #160]	@ (80027d8 <HAL_DMA_IRQHandler+0xc7c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d040      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_DMA_IRQHandler+0xc80>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d03b      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <HAL_DMA_IRQHandler+0xc84>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d036      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <HAL_DMA_IRQHandler+0xc88>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a22      	ldr	r2, [pc, #136]	@ (80027e8 <HAL_DMA_IRQHandler+0xc8c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d02c      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a20      	ldr	r2, [pc, #128]	@ (80027ec <HAL_DMA_IRQHandler+0xc90>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d027      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_DMA_IRQHandler+0xc94>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d022      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_DMA_IRQHandler+0xc98>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d01d      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_DMA_IRQHandler+0xc9c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d018      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_DMA_IRQHandler+0xca0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_DMA_IRQHandler+0xca4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00e      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_DMA_IRQHandler+0xca8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a16      	ldr	r2, [pc, #88]	@ (8002808 <HAL_DMA_IRQHandler+0xcac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d004      	beq.n	80027be <HAL_DMA_IRQHandler+0xc62>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a14      	ldr	r2, [pc, #80]	@ (800280c <HAL_DMA_IRQHandler+0xcb0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d128      	bne.n	8002810 <HAL_DMA_IRQHandler+0xcb4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0214 	bic.w	r2, r2, #20
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	e027      	b.n	8002820 <HAL_DMA_IRQHandler+0xcc4>
 80027d0:	40020010 	.word	0x40020010
 80027d4:	40020028 	.word	0x40020028
 80027d8:	40020040 	.word	0x40020040
 80027dc:	40020058 	.word	0x40020058
 80027e0:	40020070 	.word	0x40020070
 80027e4:	40020088 	.word	0x40020088
 80027e8:	400200a0 	.word	0x400200a0
 80027ec:	400200b8 	.word	0x400200b8
 80027f0:	40020410 	.word	0x40020410
 80027f4:	40020428 	.word	0x40020428
 80027f8:	40020440 	.word	0x40020440
 80027fc:	40020458 	.word	0x40020458
 8002800:	40020470 	.word	0x40020470
 8002804:	40020488 	.word	0x40020488
 8002808:	400204a0 	.word	0x400204a0
 800280c:	400204b8 	.word	0x400204b8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020a 	bic.w	r2, r2, #10
 800281e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002842:	e091      	b.n	8002968 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2208      	movs	r2, #8
 800284e:	409a      	lsls	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8088 	beq.w	800296a <HAL_DMA_IRQHandler+0xe0e>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 8082 	beq.w	800296a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a41      	ldr	r2, [pc, #260]	@ (8002970 <HAL_DMA_IRQHandler+0xe14>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04a      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3f      	ldr	r2, [pc, #252]	@ (8002974 <HAL_DMA_IRQHandler+0xe18>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d045      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3e      	ldr	r2, [pc, #248]	@ (8002978 <HAL_DMA_IRQHandler+0xe1c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d040      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3c      	ldr	r2, [pc, #240]	@ (800297c <HAL_DMA_IRQHandler+0xe20>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d03b      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3b      	ldr	r2, [pc, #236]	@ (8002980 <HAL_DMA_IRQHandler+0xe24>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d036      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a39      	ldr	r2, [pc, #228]	@ (8002984 <HAL_DMA_IRQHandler+0xe28>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a38      	ldr	r2, [pc, #224]	@ (8002988 <HAL_DMA_IRQHandler+0xe2c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d02c      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a36      	ldr	r2, [pc, #216]	@ (800298c <HAL_DMA_IRQHandler+0xe30>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d027      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a35      	ldr	r2, [pc, #212]	@ (8002990 <HAL_DMA_IRQHandler+0xe34>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d022      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a33      	ldr	r2, [pc, #204]	@ (8002994 <HAL_DMA_IRQHandler+0xe38>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a32      	ldr	r2, [pc, #200]	@ (8002998 <HAL_DMA_IRQHandler+0xe3c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a30      	ldr	r2, [pc, #192]	@ (800299c <HAL_DMA_IRQHandler+0xe40>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2f      	ldr	r2, [pc, #188]	@ (80029a0 <HAL_DMA_IRQHandler+0xe44>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00e      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <HAL_DMA_IRQHandler+0xe48>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2c      	ldr	r2, [pc, #176]	@ (80029a8 <HAL_DMA_IRQHandler+0xe4c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_IRQHandler+0xdaa>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a2a      	ldr	r2, [pc, #168]	@ (80029ac <HAL_DMA_IRQHandler+0xe50>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <HAL_DMA_IRQHandler+0xdbc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 021c 	bic.w	r2, r2, #28
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e007      	b.n	8002928 <HAL_DMA_IRQHandler+0xdcc>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2201      	movs	r2, #1
 8002932:	409a      	lsls	r2, r3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	e004      	b.n	800296a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002960:	bf00      	nop
 8002962:	e002      	b.n	800296a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002964:	bf00      	nop
 8002966:	e000      	b.n	800296a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002968:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800296a:	3728      	adds	r7, #40	@ 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40020010 	.word	0x40020010
 8002974:	40020028 	.word	0x40020028
 8002978:	40020040 	.word	0x40020040
 800297c:	40020058 	.word	0x40020058
 8002980:	40020070 	.word	0x40020070
 8002984:	40020088 	.word	0x40020088
 8002988:	400200a0 	.word	0x400200a0
 800298c:	400200b8 	.word	0x400200b8
 8002990:	40020410 	.word	0x40020410
 8002994:	40020428 	.word	0x40020428
 8002998:	40020440 	.word	0x40020440
 800299c:	40020458 	.word	0x40020458
 80029a0:	40020470 	.word	0x40020470
 80029a4:	40020488 	.word	0x40020488
 80029a8:	400204a0 	.word	0x400204a0
 80029ac:	400204b8 	.word	0x400204b8

080029b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7f      	ldr	r2, [pc, #508]	@ (8002bcc <DMA_SetConfig+0x21c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d072      	beq.n	8002aba <DMA_SetConfig+0x10a>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd0 <DMA_SetConfig+0x220>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d06d      	beq.n	8002aba <DMA_SetConfig+0x10a>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd4 <DMA_SetConfig+0x224>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d068      	beq.n	8002aba <DMA_SetConfig+0x10a>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a7a      	ldr	r2, [pc, #488]	@ (8002bd8 <DMA_SetConfig+0x228>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d063      	beq.n	8002aba <DMA_SetConfig+0x10a>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a79      	ldr	r2, [pc, #484]	@ (8002bdc <DMA_SetConfig+0x22c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d05e      	beq.n	8002aba <DMA_SetConfig+0x10a>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a77      	ldr	r2, [pc, #476]	@ (8002be0 <DMA_SetConfig+0x230>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d059      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a76      	ldr	r2, [pc, #472]	@ (8002be4 <DMA_SetConfig+0x234>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d054      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a74      	ldr	r2, [pc, #464]	@ (8002be8 <DMA_SetConfig+0x238>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d04f      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a73      	ldr	r2, [pc, #460]	@ (8002bec <DMA_SetConfig+0x23c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04a      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a71      	ldr	r2, [pc, #452]	@ (8002bf0 <DMA_SetConfig+0x240>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d045      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a70      	ldr	r2, [pc, #448]	@ (8002bf4 <DMA_SetConfig+0x244>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d040      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf8 <DMA_SetConfig+0x248>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d03b      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6d      	ldr	r2, [pc, #436]	@ (8002bfc <DMA_SetConfig+0x24c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d036      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6b      	ldr	r2, [pc, #428]	@ (8002c00 <DMA_SetConfig+0x250>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002c04 <DMA_SetConfig+0x254>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d02c      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a68      	ldr	r2, [pc, #416]	@ (8002c08 <DMA_SetConfig+0x258>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d027      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a67      	ldr	r2, [pc, #412]	@ (8002c0c <DMA_SetConfig+0x25c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	@ (8002c10 <DMA_SetConfig+0x260>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01d      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a64      	ldr	r2, [pc, #400]	@ (8002c14 <DMA_SetConfig+0x264>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a62      	ldr	r2, [pc, #392]	@ (8002c18 <DMA_SetConfig+0x268>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a61      	ldr	r2, [pc, #388]	@ (8002c1c <DMA_SetConfig+0x26c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c20 <DMA_SetConfig+0x270>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8002c24 <DMA_SetConfig+0x274>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <DMA_SetConfig+0x10a>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a5c      	ldr	r2, [pc, #368]	@ (8002c28 <DMA_SetConfig+0x278>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <DMA_SetConfig+0x10e>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <DMA_SetConfig+0x110>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002acc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ade:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a39      	ldr	r2, [pc, #228]	@ (8002bcc <DMA_SetConfig+0x21c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d04a      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <DMA_SetConfig+0x220>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d045      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a36      	ldr	r2, [pc, #216]	@ (8002bd4 <DMA_SetConfig+0x224>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d040      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a35      	ldr	r2, [pc, #212]	@ (8002bd8 <DMA_SetConfig+0x228>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d03b      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a33      	ldr	r2, [pc, #204]	@ (8002bdc <DMA_SetConfig+0x22c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d036      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <DMA_SetConfig+0x230>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d031      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a30      	ldr	r2, [pc, #192]	@ (8002be4 <DMA_SetConfig+0x234>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02c      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <DMA_SetConfig+0x238>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d027      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2d      	ldr	r2, [pc, #180]	@ (8002bec <DMA_SetConfig+0x23c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <DMA_SetConfig+0x240>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d01d      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf4 <DMA_SetConfig+0x244>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a29      	ldr	r2, [pc, #164]	@ (8002bf8 <DMA_SetConfig+0x248>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <DMA_SetConfig+0x24c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <DMA_SetConfig+0x250>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <DMA_SetConfig+0x254>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <DMA_SetConfig+0x1d0>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a23      	ldr	r2, [pc, #140]	@ (8002c08 <DMA_SetConfig+0x258>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d101      	bne.n	8002b84 <DMA_SetConfig+0x1d4>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <DMA_SetConfig+0x1d6>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d059      	beq.n	8002c3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	223f      	movs	r2, #63	@ 0x3f
 8002b94:	409a      	lsls	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b40      	cmp	r3, #64	@ 0x40
 8002bb8:	d138      	bne.n	8002c2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002bca:	e086      	b.n	8002cda <DMA_SetConfig+0x32a>
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
 8002c0c:	58025408 	.word	0x58025408
 8002c10:	5802541c 	.word	0x5802541c
 8002c14:	58025430 	.word	0x58025430
 8002c18:	58025444 	.word	0x58025444
 8002c1c:	58025458 	.word	0x58025458
 8002c20:	5802546c 	.word	0x5802546c
 8002c24:	58025480 	.word	0x58025480
 8002c28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	e04d      	b.n	8002cda <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a29      	ldr	r2, [pc, #164]	@ (8002ce8 <DMA_SetConfig+0x338>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a27      	ldr	r2, [pc, #156]	@ (8002cec <DMA_SetConfig+0x33c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a26      	ldr	r2, [pc, #152]	@ (8002cf0 <DMA_SetConfig+0x340>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a24      	ldr	r2, [pc, #144]	@ (8002cf4 <DMA_SetConfig+0x344>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <DMA_SetConfig+0x348>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <DMA_SetConfig+0x34c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a20      	ldr	r2, [pc, #128]	@ (8002d00 <DMA_SetConfig+0x350>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <DMA_SetConfig+0x2de>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1e      	ldr	r2, [pc, #120]	@ (8002d04 <DMA_SetConfig+0x354>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <DMA_SetConfig+0x2e2>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <DMA_SetConfig+0x2e4>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b40      	cmp	r3, #64	@ 0x40
 8002cb6:	d108      	bne.n	8002cca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	e007      	b.n	8002cda <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	60da      	str	r2, [r3, #12]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	58025408 	.word	0x58025408
 8002cec:	5802541c 	.word	0x5802541c
 8002cf0:	58025430 	.word	0x58025430
 8002cf4:	58025444 	.word	0x58025444
 8002cf8:	58025458 	.word	0x58025458
 8002cfc:	5802546c 	.word	0x5802546c
 8002d00:	58025480 	.word	0x58025480
 8002d04:	58025494 	.word	0x58025494

08002d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a42      	ldr	r2, [pc, #264]	@ (8002e20 <DMA_CalcBaseAndBitshift+0x118>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04a      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a41      	ldr	r2, [pc, #260]	@ (8002e24 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d045      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3f      	ldr	r2, [pc, #252]	@ (8002e28 <DMA_CalcBaseAndBitshift+0x120>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d040      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a3e      	ldr	r2, [pc, #248]	@ (8002e2c <DMA_CalcBaseAndBitshift+0x124>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d03b      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <DMA_CalcBaseAndBitshift+0x128>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d036      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3b      	ldr	r2, [pc, #236]	@ (8002e34 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d031      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a39      	ldr	r2, [pc, #228]	@ (8002e38 <DMA_CalcBaseAndBitshift+0x130>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02c      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a38      	ldr	r2, [pc, #224]	@ (8002e3c <DMA_CalcBaseAndBitshift+0x134>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d027      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a36      	ldr	r2, [pc, #216]	@ (8002e40 <DMA_CalcBaseAndBitshift+0x138>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a35      	ldr	r2, [pc, #212]	@ (8002e44 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01d      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a33      	ldr	r2, [pc, #204]	@ (8002e48 <DMA_CalcBaseAndBitshift+0x140>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a32      	ldr	r2, [pc, #200]	@ (8002e4c <DMA_CalcBaseAndBitshift+0x144>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a30      	ldr	r2, [pc, #192]	@ (8002e50 <DMA_CalcBaseAndBitshift+0x148>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2f      	ldr	r2, [pc, #188]	@ (8002e54 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e58 <DMA_CalcBaseAndBitshift+0x150>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <DMA_CalcBaseAndBitshift+0xa8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2c      	ldr	r2, [pc, #176]	@ (8002e5c <DMA_CalcBaseAndBitshift+0x154>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <DMA_CalcBaseAndBitshift+0xac>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <DMA_CalcBaseAndBitshift+0xae>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d024      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3b10      	subs	r3, #16
 8002dc2:	4a27      	ldr	r2, [pc, #156]	@ (8002e60 <DMA_CalcBaseAndBitshift+0x158>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <DMA_CalcBaseAndBitshift+0x15c>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d908      	bls.n	8002df4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e68 <DMA_CalcBaseAndBitshift+0x160>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002df2:	e00d      	b.n	8002e10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <DMA_CalcBaseAndBitshift+0x160>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e02:	e005      	b.n	8002e10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40020010 	.word	0x40020010
 8002e24:	40020028 	.word	0x40020028
 8002e28:	40020040 	.word	0x40020040
 8002e2c:	40020058 	.word	0x40020058
 8002e30:	40020070 	.word	0x40020070
 8002e34:	40020088 	.word	0x40020088
 8002e38:	400200a0 	.word	0x400200a0
 8002e3c:	400200b8 	.word	0x400200b8
 8002e40:	40020410 	.word	0x40020410
 8002e44:	40020428 	.word	0x40020428
 8002e48:	40020440 	.word	0x40020440
 8002e4c:	40020458 	.word	0x40020458
 8002e50:	40020470 	.word	0x40020470
 8002e54:	40020488 	.word	0x40020488
 8002e58:	400204a0 	.word	0x400204a0
 8002e5c:	400204b8 	.word	0x400204b8
 8002e60:	aaaaaaab 	.word	0xaaaaaaab
 8002e64:	08005c7c 	.word	0x08005c7c
 8002e68:	fffffc00 	.word	0xfffffc00

08002e6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d120      	bne.n	8002ec2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d858      	bhi.n	8002f3a <DMA_CheckFifoParam+0xce>
 8002e88:	a201      	add	r2, pc, #4	@ (adr r2, 8002e90 <DMA_CheckFifoParam+0x24>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb3 	.word	0x08002eb3
 8002e98:	08002ea1 	.word	0x08002ea1
 8002e9c:	08002f3b 	.word	0x08002f3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d048      	beq.n	8002f3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002eb0:	e045      	b.n	8002f3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eba:	d142      	bne.n	8002f42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ec0:	e03f      	b.n	8002f42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eca:	d123      	bne.n	8002f14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d838      	bhi.n	8002f46 <DMA_CheckFifoParam+0xda>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <DMA_CheckFifoParam+0x70>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002ef3 	.word	0x08002ef3
 8002ee4:	08002eed 	.word	0x08002eed
 8002ee8:	08002f05 	.word	0x08002f05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef0:	e030      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d025      	beq.n	8002f4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f02:	e022      	b.n	8002f4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f0c:	d11f      	bne.n	8002f4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f12:	e01c      	b.n	8002f4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d902      	bls.n	8002f22 <DMA_CheckFifoParam+0xb6>
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d003      	beq.n	8002f28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f20:	e018      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
        break;
 8002f26:	e015      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
    break;
 8002f38:	e00b      	b.n	8002f52 <DMA_CheckFifoParam+0xe6>
        break;
 8002f3a:	bf00      	nop
 8002f3c:	e00a      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e008      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        break;
 8002f42:	bf00      	nop
 8002f44:	e006      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        break;
 8002f46:	bf00      	nop
 8002f48:	e004      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        break;
 8002f4a:	bf00      	nop
 8002f4c:	e002      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e000      	b.n	8002f54 <DMA_CheckFifoParam+0xe8>
    break;
 8002f52:	bf00      	nop
    }
  }

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a38      	ldr	r2, [pc, #224]	@ (8003058 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a36      	ldr	r2, [pc, #216]	@ (800305c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a35      	ldr	r2, [pc, #212]	@ (8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a33      	ldr	r2, [pc, #204]	@ (8003064 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a30      	ldr	r2, [pc, #192]	@ (800306c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003070 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003074 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01a      	beq.n	8003002 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3b08      	subs	r3, #8
 8002fd4:	4a28      	ldr	r2, [pc, #160]	@ (8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4b26      	ldr	r3, [pc, #152]	@ (800307c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a24      	ldr	r2, [pc, #144]	@ (8003080 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002ff0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003000:	e024      	b.n	800304c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3b10      	subs	r3, #16
 800300a:	4a1e      	ldr	r2, [pc, #120]	@ (8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4a1c      	ldr	r2, [pc, #112]	@ (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d806      	bhi.n	800302a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d902      	bls.n	800302a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	3308      	adds	r3, #8
 8003028:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4b18      	ldr	r3, [pc, #96]	@ (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800303c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2201      	movs	r2, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	58025408 	.word	0x58025408
 800305c:	5802541c 	.word	0x5802541c
 8003060:	58025430 	.word	0x58025430
 8003064:	58025444 	.word	0x58025444
 8003068:	58025458 	.word	0x58025458
 800306c:	5802546c 	.word	0x5802546c
 8003070:	58025480 	.word	0x58025480
 8003074:	58025494 	.word	0x58025494
 8003078:	cccccccd 	.word	0xcccccccd
 800307c:	16009600 	.word	0x16009600
 8003080:	58025880 	.word	0x58025880
 8003084:	aaaaaaab 	.word	0xaaaaaaab
 8003088:	400204b8 	.word	0x400204b8
 800308c:	4002040f 	.word	0x4002040f
 8003090:	10008200 	.word	0x10008200
 8003094:	40020880 	.word	0x40020880

08003098 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04a      	beq.n	8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d847      	bhi.n	8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a25      	ldr	r2, [pc, #148]	@ (8003150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d022      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a24      	ldr	r2, [pc, #144]	@ (8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d01d      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d018      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a21      	ldr	r2, [pc, #132]	@ (800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00e      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d009      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d101      	bne.n	8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003108:	2300      	movs	r3, #0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	461a      	mov	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a15      	ldr	r2, [pc, #84]	@ (8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003120:	671a      	str	r2, [r3, #112]	@ 0x70
 8003122:	e009      	b.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4b14      	ldr	r3, [pc, #80]	@ (8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a11      	ldr	r2, [pc, #68]	@ (800317c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003136:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3b01      	subs	r3, #1
 800313c:	2201      	movs	r2, #1
 800313e:	409a      	lsls	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
 8003170:	1600963f 	.word	0x1600963f
 8003174:	58025940 	.word	0x58025940
 8003178:	1000823f 	.word	0x1000823f
 800317c:	40020940 	.word	0x40020940

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	@ 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800318e:	4b89      	ldr	r3, [pc, #548]	@ (80033b4 <HAL_GPIO_Init+0x234>)
 8003190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003192:	e194      	b.n	80034be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8186 	beq.w	80034b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d005      	beq.n	80031c4 <HAL_GPIO_Init+0x44>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d130      	bne.n	8003226 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fa:	2201      	movs	r2, #1
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 0201 	and.w	r2, r3, #1
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b03      	cmp	r3, #3
 8003230:	d017      	beq.n	8003262 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	2203      	movs	r2, #3
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d123      	bne.n	80032b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	08da      	lsrs	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3208      	adds	r2, #8
 8003276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	08da      	lsrs	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3208      	adds	r2, #8
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2203      	movs	r2, #3
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0203 	and.w	r2, r3, #3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 80e0 	beq.w	80034b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f8:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <HAL_GPIO_Init+0x238>)
 80032fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032fe:	4a2e      	ldr	r2, [pc, #184]	@ (80033b8 <HAL_GPIO_Init+0x238>)
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003308:	4b2b      	ldr	r3, [pc, #172]	@ (80033b8 <HAL_GPIO_Init+0x238>)
 800330a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003316:	4a29      	ldr	r2, [pc, #164]	@ (80033bc <HAL_GPIO_Init+0x23c>)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	3302      	adds	r3, #2
 800331e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a20      	ldr	r2, [pc, #128]	@ (80033c0 <HAL_GPIO_Init+0x240>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d052      	beq.n	80033e8 <HAL_GPIO_Init+0x268>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1f      	ldr	r2, [pc, #124]	@ (80033c4 <HAL_GPIO_Init+0x244>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_GPIO_Init+0x22e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <HAL_GPIO_Init+0x248>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02b      	beq.n	80033aa <HAL_GPIO_Init+0x22a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <HAL_GPIO_Init+0x24c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d025      	beq.n	80033a6 <HAL_GPIO_Init+0x226>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a1c      	ldr	r2, [pc, #112]	@ (80033d0 <HAL_GPIO_Init+0x250>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01f      	beq.n	80033a2 <HAL_GPIO_Init+0x222>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_GPIO_Init+0x254>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d019      	beq.n	800339e <HAL_GPIO_Init+0x21e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <HAL_GPIO_Init+0x258>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_GPIO_Init+0x21a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a19      	ldr	r2, [pc, #100]	@ (80033dc <HAL_GPIO_Init+0x25c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00d      	beq.n	8003396 <HAL_GPIO_Init+0x216>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <HAL_GPIO_Init+0x260>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <HAL_GPIO_Init+0x212>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a17      	ldr	r2, [pc, #92]	@ (80033e4 <HAL_GPIO_Init+0x264>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_GPIO_Init+0x20e>
 800338a:	2309      	movs	r3, #9
 800338c:	e02d      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 800338e:	230a      	movs	r3, #10
 8003390:	e02b      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 8003392:	2308      	movs	r3, #8
 8003394:	e029      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 8003396:	2307      	movs	r3, #7
 8003398:	e027      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 800339a:	2306      	movs	r3, #6
 800339c:	e025      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 800339e:	2305      	movs	r3, #5
 80033a0:	e023      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 80033a2:	2304      	movs	r3, #4
 80033a4:	e021      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e01f      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e01d      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e01b      	b.n	80033ea <HAL_GPIO_Init+0x26a>
 80033b2:	bf00      	nop
 80033b4:	58000080 	.word	0x58000080
 80033b8:	58024400 	.word	0x58024400
 80033bc:	58000400 	.word	0x58000400
 80033c0:	58020000 	.word	0x58020000
 80033c4:	58020400 	.word	0x58020400
 80033c8:	58020800 	.word	0x58020800
 80033cc:	58020c00 	.word	0x58020c00
 80033d0:	58021000 	.word	0x58021000
 80033d4:	58021400 	.word	0x58021400
 80033d8:	58021800 	.word	0x58021800
 80033dc:	58021c00 	.word	0x58021c00
 80033e0:	58022000 	.word	0x58022000
 80033e4:	58022400 	.word	0x58022400
 80033e8:	2300      	movs	r3, #0
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f002 0203 	and.w	r2, r2, #3
 80033f0:	0092      	lsls	r2, r2, #2
 80033f2:	4093      	lsls	r3, r2
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033fa:	4938      	ldr	r1, [pc, #224]	@ (80034dc <HAL_GPIO_Init+0x35c>)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	3302      	adds	r3, #2
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800342e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800345c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f47f ae63 	bne.w	8003194 <HAL_GPIO_Init+0x14>
  }
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	3724      	adds	r7, #36	@ 0x24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	58000400 	.word	0x58000400

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	619a      	str	r2, [r3, #24]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800351c:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_PWREx_ConfigSupply+0x70>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b04      	cmp	r3, #4
 8003526:	d00a      	beq.n	800353e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003528:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <HAL_PWREx_ConfigSupply+0x70>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01f      	b.n	800357a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e01d      	b.n	800357a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800353e:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_PWREx_ConfigSupply+0x70>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f023 0207 	bic.w	r2, r3, #7
 8003546:	490f      	ldr	r1, [pc, #60]	@ (8003584 <HAL_PWREx_ConfigSupply+0x70>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4313      	orrs	r3, r2
 800354c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800354e:	f7fd fbf3 	bl	8000d38 <HAL_GetTick>
 8003552:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003554:	e009      	b.n	800356a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003556:	f7fd fbef 	bl	8000d38 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003564:	d901      	bls.n	800356a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_PWREx_ConfigSupply+0x70>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003576:	d1ee      	bne.n	8003556 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	58024800 	.word	0x58024800

08003588 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	@ 0x30
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f000 bc48 	b.w	8003e2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8088 	beq.w	80036ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035aa:	4b99      	ldr	r3, [pc, #612]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035b4:	4b96      	ldr	r3, [pc, #600]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d007      	beq.n	80035d0 <HAL_RCC_OscConfig+0x48>
 80035c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c2:	2b18      	cmp	r3, #24
 80035c4:	d111      	bne.n	80035ea <HAL_RCC_OscConfig+0x62>
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d10c      	bne.n	80035ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d06d      	beq.n	80036b8 <HAL_RCC_OscConfig+0x130>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d169      	bne.n	80036b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f000 bc21 	b.w	8003e2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x7a>
 80035f4:	4b86      	ldr	r3, [pc, #536]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a85      	ldr	r2, [pc, #532]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e02e      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x9c>
 800360a:	4b81      	ldr	r3, [pc, #516]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a80      	ldr	r2, [pc, #512]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b7e      	ldr	r3, [pc, #504]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7d      	ldr	r2, [pc, #500]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800361c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e01d      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0xc0>
 800362e:	4b78      	ldr	r3, [pc, #480]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a77      	ldr	r2, [pc, #476]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b75      	ldr	r3, [pc, #468]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a74      	ldr	r2, [pc, #464]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e00b      	b.n	8003660 <HAL_RCC_OscConfig+0xd8>
 8003648:	4b71      	ldr	r3, [pc, #452]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a70      	ldr	r2, [pc, #448]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b6e      	ldr	r3, [pc, #440]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6d      	ldr	r2, [pc, #436]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fb66 	bl	8000d38 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd fb62 	bl	8000d38 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e3d4      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003682:	4b63      	ldr	r3, [pc, #396]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd fb52 	bl	8000d38 <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd fb4e 	bl	8000d38 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e3c0      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036aa:	4b59      	ldr	r3, [pc, #356]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x110>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80ca 	beq.w	800385c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c8:	4b51      	ldr	r3, [pc, #324]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_RCC_OscConfig+0x166>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2b18      	cmp	r3, #24
 80036e2:	d156      	bne.n	8003792 <HAL_RCC_OscConfig+0x20a>
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d151      	bne.n	8003792 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ee:	4b48      	ldr	r3, [pc, #288]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x17e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e392      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003706:	4b42      	ldr	r3, [pc, #264]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 0219 	bic.w	r2, r3, #25
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	493f      	ldr	r1, [pc, #252]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd fb0e 	bl	8000d38 <HAL_GetTick>
 800371c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fd fb0a 	bl	8000d38 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e37c      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003732:	4b37      	ldr	r3, [pc, #220]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	f7fd fb2b 	bl	8000d98 <HAL_GetREVID>
 8003742:	4603      	mov	r3, r0
 8003744:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003748:	4293      	cmp	r3, r2
 800374a:	d817      	bhi.n	800377c <HAL_RCC_OscConfig+0x1f4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d108      	bne.n	8003766 <HAL_RCC_OscConfig+0x1de>
 8003754:	4b2e      	ldr	r3, [pc, #184]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800375c:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003762:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003764:	e07a      	b.n	800385c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b2a      	ldr	r3, [pc, #168]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	031b      	lsls	r3, r3, #12
 8003774:	4926      	ldr	r1, [pc, #152]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377a:	e06f      	b.n	800385c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	4921      	ldr	r1, [pc, #132]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003790:	e064      	b.n	800385c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d047      	beq.n	800382a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800379a:	4b1d      	ldr	r3, [pc, #116]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0219 	bic.w	r2, r3, #25
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	491a      	ldr	r1, [pc, #104]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd fac4 	bl	8000d38 <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fd fac0 	bl	8000d38 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e332      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c6:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	f7fd fae1 	bl	8000d98 <HAL_GetREVID>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037dc:	4293      	cmp	r3, r2
 80037de:	d819      	bhi.n	8003814 <HAL_RCC_OscConfig+0x28c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d108      	bne.n	80037fa <HAL_RCC_OscConfig+0x272>
 80037e8:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037f0:	4a07      	ldr	r2, [pc, #28]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80037f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f6:	6053      	str	r3, [r2, #4]
 80037f8:	e030      	b.n	800385c <HAL_RCC_OscConfig+0x2d4>
 80037fa:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	4901      	ldr	r1, [pc, #4]	@ (8003810 <HAL_RCC_OscConfig+0x288>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
 800380e:	e025      	b.n	800385c <HAL_RCC_OscConfig+0x2d4>
 8003810:	58024400 	.word	0x58024400
 8003814:	4b9a      	ldr	r3, [pc, #616]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	4997      	ldr	r1, [pc, #604]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]
 8003828:	e018      	b.n	800385c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382a:	4b95      	ldr	r3, [pc, #596]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a94      	ldr	r2, [pc, #592]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003836:	f7fd fa7f 	bl	8000d38 <HAL_GetTick>
 800383a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fd fa7b 	bl	8000d38 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e2ed      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003850:	4b8b      	ldr	r3, [pc, #556]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a9 	beq.w	80039bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386a:	4b85      	ldr	r3, [pc, #532]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003872:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003874:	4b82      	ldr	r3, [pc, #520]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d007      	beq.n	8003890 <HAL_RCC_OscConfig+0x308>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b18      	cmp	r3, #24
 8003884:	d13a      	bne.n	80038fc <HAL_RCC_OscConfig+0x374>
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d135      	bne.n	80038fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003890:	4b7b      	ldr	r3, [pc, #492]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x320>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	2b80      	cmp	r3, #128	@ 0x80
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e2c1      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a8:	f7fd fa76 	bl	8000d98 <HAL_GetREVID>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d817      	bhi.n	80038e6 <HAL_RCC_OscConfig+0x35e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d108      	bne.n	80038d0 <HAL_RCC_OscConfig+0x348>
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80038c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80038cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ce:	e075      	b.n	80039bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	069b      	lsls	r3, r3, #26
 80038de:	4968      	ldr	r1, [pc, #416]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038e4:	e06a      	b.n	80039bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038e6:	4b66      	ldr	r3, [pc, #408]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	4962      	ldr	r1, [pc, #392]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038fa:	e05f      	b.n	80039bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d042      	beq.n	800398a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003904:	4b5e      	ldr	r3, [pc, #376]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5d      	ldr	r2, [pc, #372]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800390a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800390e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fa12 	bl	8000d38 <HAL_GetTick>
 8003914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003918:	f7fd fa0e 	bl	8000d38 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e280      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800392a:	4b55      	ldr	r3, [pc, #340]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003936:	f7fd fa2f 	bl	8000d98 <HAL_GetREVID>
 800393a:	4603      	mov	r3, r0
 800393c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003940:	4293      	cmp	r3, r2
 8003942:	d817      	bhi.n	8003974 <HAL_RCC_OscConfig+0x3ec>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	2b20      	cmp	r3, #32
 800394a:	d108      	bne.n	800395e <HAL_RCC_OscConfig+0x3d6>
 800394c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003954:	4a4a      	ldr	r2, [pc, #296]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800395a:	6053      	str	r3, [r2, #4]
 800395c:	e02e      	b.n	80039bc <HAL_RCC_OscConfig+0x434>
 800395e:	4b48      	ldr	r3, [pc, #288]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	069b      	lsls	r3, r3, #26
 800396c:	4944      	ldr	r1, [pc, #272]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
 8003972:	e023      	b.n	80039bc <HAL_RCC_OscConfig+0x434>
 8003974:	4b42      	ldr	r3, [pc, #264]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	493f      	ldr	r1, [pc, #252]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	60cb      	str	r3, [r1, #12]
 8003988:	e018      	b.n	80039bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800398a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd f9cf 	bl	8000d38 <HAL_GetTick>
 800399a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800399e:	f7fd f9cb 	bl	8000d38 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e23d      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039b0:	4b33      	ldr	r3, [pc, #204]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d036      	beq.n	8003a36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d019      	beq.n	8003a04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80039d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fd f9ac 	bl	8000d38 <HAL_GetTick>
 80039e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fd f9a8 	bl	8000d38 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e21a      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039f6:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x45c>
 8003a02:	e018      	b.n	8003a36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fd f992 	bl	8000d38 <HAL_GetTick>
 8003a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a18:	f7fd f98e 	bl	8000d38 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e200      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d039      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a56:	f7fd f96f 	bl	8000d38 <HAL_GetTick>
 8003a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a5e:	f7fd f96b 	bl	8000d38 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e1dd      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x4d6>
 8003a7c:	e01b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x52e>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a84:	4b9b      	ldr	r3, [pc, #620]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a9a      	ldr	r2, [pc, #616]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a90:	f7fd f952 	bl	8000d38 <HAL_GetTick>
 8003a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a98:	f7fd f94e 	bl	8000d38 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1c0      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003aaa:	4b92      	ldr	r3, [pc, #584]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8081 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf8 <HAL_RCC_OscConfig+0x770>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8b      	ldr	r2, [pc, #556]	@ (8003cf8 <HAL_RCC_OscConfig+0x770>)
 8003aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd f932 	bl	8000d38 <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad8:	f7fd f92e 	bl	8000d38 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	@ 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1a0      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aea:	4b83      	ldr	r3, [pc, #524]	@ (8003cf8 <HAL_RCC_OscConfig+0x770>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x584>
 8003afe:	4b7d      	ldr	r3, [pc, #500]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	e02d      	b.n	8003b68 <HAL_RCC_OscConfig+0x5e0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCC_OscConfig+0x5a6>
 8003b14:	4b77      	ldr	r3, [pc, #476]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4a76      	ldr	r2, [pc, #472]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b20:	4b74      	ldr	r3, [pc, #464]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a73      	ldr	r2, [pc, #460]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2c:	e01c      	b.n	8003b68 <HAL_RCC_OscConfig+0x5e0>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x5c8>
 8003b36:	4b6f      	ldr	r3, [pc, #444]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b42:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x5e0>
 8003b50:	4b68      	ldr	r3, [pc, #416]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a67      	ldr	r2, [pc, #412]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5c:	4b65      	ldr	r3, [pc, #404]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4a64      	ldr	r2, [pc, #400]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd f8e2 	bl	8000d38 <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd f8de 	bl	8000d38 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e14e      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8e:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCC_OscConfig+0x5f0>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fd f8cc 	bl	8000d38 <HAL_GetTick>
 8003ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fd f8c8 	bl	8000d38 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e138      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bba:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 812d 	beq.w	8003e2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003bd0:	4b48      	ldr	r3, [pc, #288]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bd8:	2b18      	cmp	r3, #24
 8003bda:	f000 80bd 	beq.w	8003d58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	f040 809e 	bne.w	8003d24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be8:	4b42      	ldr	r3, [pc, #264]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a41      	ldr	r2, [pc, #260]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f8a0 	bl	8000d38 <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fd f89c 	bl	8000d38 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e10e      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c0e:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c1a:	4b36      	ldr	r3, [pc, #216]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c1e:	4b37      	ldr	r3, [pc, #220]	@ (8003cfc <HAL_RCC_OscConfig+0x774>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	4931      	ldr	r1, [pc, #196]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	628b      	str	r3, [r1, #40]	@ 0x28
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c42:	3b01      	subs	r3, #1
 8003c44:	025b      	lsls	r3, r3, #9
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003c64:	4923      	ldr	r1, [pc, #140]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c6a:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c76:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7a:	4b21      	ldr	r3, [pc, #132]	@ (8003d00 <HAL_RCC_OscConfig+0x778>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c82:	00d2      	lsls	r2, r2, #3
 8003c84:	491b      	ldr	r1, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	f023 020c 	bic.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	4917      	ldr	r1, [pc, #92]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	f023 0202 	bic.w	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca8:	4912      	ldr	r1, [pc, #72]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cae:	4b11      	ldr	r3, [pc, #68]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	4a10      	ldr	r2, [pc, #64]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cba:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	4a07      	ldr	r2, [pc, #28]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cde:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <HAL_RCC_OscConfig+0x76c>)
 8003ce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd f825 	bl	8000d38 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf0:	e011      	b.n	8003d16 <HAL_RCC_OscConfig+0x78e>
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58024800 	.word	0x58024800
 8003cfc:	fffffc0c 	.word	0xfffffc0c
 8003d00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd f818 	bl	8000d38 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e08a      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x77c>
 8003d22:	e082      	b.n	8003e2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d24:	4b43      	ldr	r3, [pc, #268]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a42      	ldr	r2, [pc, #264]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd f802 	bl	8000d38 <HAL_GetTick>
 8003d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fc fffe 	bl	8000d38 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e070      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x7b0>
 8003d56:	e068      	b.n	8003e2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d58:	4b36      	ldr	r3, [pc, #216]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d5e:	4b35      	ldr	r3, [pc, #212]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d031      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f003 0203 	and.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d12a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d122      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	0a5b      	lsrs	r3, r3, #9
 8003d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d108      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e02b      	b.n	8003e2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003dd4:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d01f      	beq.n	8003e2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003dea:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	4a11      	ldr	r2, [pc, #68]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003df6:	f7fc ff9f 	bl	8000d38 <HAL_GetTick>
 8003dfa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003dfc:	bf00      	nop
 8003dfe:	f7fc ff9b 	bl	8000d38 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d0f9      	beq.n	8003dfe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003e0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_RCC_OscConfig+0x8b0>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e16:	00d2      	lsls	r2, r2, #3
 8003e18:	4906      	ldr	r1, [pc, #24]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003e1e:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	4a04      	ldr	r2, [pc, #16]	@ (8003e34 <HAL_RCC_OscConfig+0x8ac>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3730      	adds	r7, #48	@ 0x30
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	58024400 	.word	0x58024400
 8003e38:	ffff0007 	.word	0xffff0007

08003e3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e19c      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e50:	4b8a      	ldr	r3, [pc, #552]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d910      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5e:	4b87      	ldr	r3, [pc, #540]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 020f 	bic.w	r2, r3, #15
 8003e66:	4985      	ldr	r1, [pc, #532]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b83      	ldr	r3, [pc, #524]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e184      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b7b      	ldr	r3, [pc, #492]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d908      	bls.n	8003eae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e9c:	4b78      	ldr	r3, [pc, #480]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	4975      	ldr	r1, [pc, #468]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	4b70      	ldr	r3, [pc, #448]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d908      	bls.n	8003edc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eca:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	496a      	ldr	r1, [pc, #424]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	4b64      	ldr	r3, [pc, #400]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	495e      	ldr	r1, [pc, #376]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d010      	beq.n	8003f38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	4b59      	ldr	r3, [pc, #356]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d908      	bls.n	8003f38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003f26:	4b56      	ldr	r3, [pc, #344]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4953      	ldr	r1, [pc, #332]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b4d      	ldr	r3, [pc, #308]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d908      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b4a      	ldr	r3, [pc, #296]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f023 020f 	bic.w	r2, r3, #15
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4947      	ldr	r1, [pc, #284]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d055      	beq.n	800401e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f72:	4b43      	ldr	r3, [pc, #268]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	4940      	ldr	r1, [pc, #256]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d121      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0f6      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fa4:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d115      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0ea      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fbc:	4b30      	ldr	r3, [pc, #192]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0de      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0d6      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fdc:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f023 0207 	bic.w	r2, r3, #7
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4925      	ldr	r1, [pc, #148]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fee:	f7fc fea3 	bl	8000d38 <HAL_GetTick>
 8003ff2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff4:	e00a      	b.n	800400c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff6:	f7fc fe9f 	bl	8000d38 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0be      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400c:	4b1c      	ldr	r3, [pc, #112]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	429a      	cmp	r2, r3
 800401c:	d1eb      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d010      	beq.n	800404c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	429a      	cmp	r2, r3
 8004038:	d208      	bcs.n	800404c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403a:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f023 020f 	bic.w	r2, r3, #15
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	490e      	ldr	r1, [pc, #56]	@ (8004080 <HAL_RCC_ClockConfig+0x244>)
 8004048:	4313      	orrs	r3, r2
 800404a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d214      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b08      	ldr	r3, [pc, #32]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 020f 	bic.w	r2, r3, #15
 8004062:	4906      	ldr	r1, [pc, #24]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b04      	ldr	r3, [pc, #16]	@ (800407c <HAL_RCC_ClockConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e086      	b.n	800418a <HAL_RCC_ClockConfig+0x34e>
 800407c:	52002000 	.word	0x52002000
 8004080:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	4b3f      	ldr	r3, [pc, #252]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800409c:	429a      	cmp	r2, r3
 800409e:	d208      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4939      	ldr	r1, [pc, #228]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	4b34      	ldr	r3, [pc, #208]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d208      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ce:	4b31      	ldr	r3, [pc, #196]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	492e      	ldr	r1, [pc, #184]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d208      	bcs.n	800410e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040fc:	4b25      	ldr	r3, [pc, #148]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4922      	ldr	r1, [pc, #136]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 800410a:	4313      	orrs	r3, r2
 800410c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d010      	beq.n	800413c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004126:	429a      	cmp	r2, r3
 8004128:	d208      	bcs.n	800413c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800412a:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	4917      	ldr	r1, [pc, #92]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 8004138:	4313      	orrs	r3, r2
 800413a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800413c:	f000 f834 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	4912      	ldr	r1, [pc, #72]	@ (8004198 <HAL_RCC_ClockConfig+0x35c>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800415a:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <HAL_RCC_ClockConfig+0x358>)
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	4a0d      	ldr	r2, [pc, #52]	@ (8004198 <HAL_RCC_ClockConfig+0x35c>)
 8004164:	5cd3      	ldrb	r3, [r2, r3]
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
 8004170:	4a0a      	ldr	r2, [pc, #40]	@ (800419c <HAL_RCC_ClockConfig+0x360>)
 8004172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004174:	4a0a      	ldr	r2, [pc, #40]	@ (80041a0 <HAL_RCC_ClockConfig+0x364>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800417a:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <HAL_RCC_ClockConfig+0x368>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fd90 	bl	8000ca4 <HAL_InitTick>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	58024400 	.word	0x58024400
 8004198:	08005c6c 	.word	0x08005c6c
 800419c:	24000004 	.word	0x24000004
 80041a0:	24000000 	.word	0x24000000
 80041a4:	24000008 	.word	0x24000008

080041a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	@ 0x24
 80041ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ae:	4bb3      	ldr	r3, [pc, #716]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041b6:	2b18      	cmp	r3, #24
 80041b8:	f200 8155 	bhi.w	8004466 <HAL_RCC_GetSysClockFreq+0x2be>
 80041bc:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	08004229 	.word	0x08004229
 80041c8:	08004467 	.word	0x08004467
 80041cc:	08004467 	.word	0x08004467
 80041d0:	08004467 	.word	0x08004467
 80041d4:	08004467 	.word	0x08004467
 80041d8:	08004467 	.word	0x08004467
 80041dc:	08004467 	.word	0x08004467
 80041e0:	08004467 	.word	0x08004467
 80041e4:	0800424f 	.word	0x0800424f
 80041e8:	08004467 	.word	0x08004467
 80041ec:	08004467 	.word	0x08004467
 80041f0:	08004467 	.word	0x08004467
 80041f4:	08004467 	.word	0x08004467
 80041f8:	08004467 	.word	0x08004467
 80041fc:	08004467 	.word	0x08004467
 8004200:	08004467 	.word	0x08004467
 8004204:	08004255 	.word	0x08004255
 8004208:	08004467 	.word	0x08004467
 800420c:	08004467 	.word	0x08004467
 8004210:	08004467 	.word	0x08004467
 8004214:	08004467 	.word	0x08004467
 8004218:	08004467 	.word	0x08004467
 800421c:	08004467 	.word	0x08004467
 8004220:	08004467 	.word	0x08004467
 8004224:	0800425b 	.word	0x0800425b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004228:	4b94      	ldr	r3, [pc, #592]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004234:	4b91      	ldr	r3, [pc, #580]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	08db      	lsrs	r3, r3, #3
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	4a90      	ldr	r2, [pc, #576]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004246:	e111      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004248:	4b8d      	ldr	r3, [pc, #564]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800424a:	61bb      	str	r3, [r7, #24]
      break;
 800424c:	e10e      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800424e:	4b8d      	ldr	r3, [pc, #564]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004250:	61bb      	str	r3, [r7, #24]
      break;
 8004252:	e10b      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004254:	4b8c      	ldr	r3, [pc, #560]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004256:	61bb      	str	r3, [r7, #24]
      break;
 8004258:	e108      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800425a:	4b88      	ldr	r3, [pc, #544]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004264:	4b85      	ldr	r3, [pc, #532]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800426e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004270:	4b82      	ldr	r3, [pc, #520]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800427a:	4b80      	ldr	r3, [pc, #512]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	08db      	lsrs	r3, r3, #3
 8004280:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80e1 	beq.w	8004460 <HAL_RCC_GetSysClockFreq+0x2b8>
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	f000 8083 	beq.w	80043ac <HAL_RCC_GetSysClockFreq+0x204>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	f200 80a1 	bhi.w	80043f0 <HAL_RCC_GetSysClockFreq+0x248>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0x114>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d056      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x1c0>
 80042ba:	e099      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042bc:	4b6f      	ldr	r3, [pc, #444]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042c8:	4b6c      	ldr	r3, [pc, #432]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f2:	4b62      	ldr	r3, [pc, #392]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004302:	ed97 6a02 	vldr	s12, [r7, #8]
 8004306:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800448c <HAL_RCC_GetSysClockFreq+0x2e4>
 800430a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800430e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004312:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004322:	e087      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004490 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	4b51      	ldr	r3, [pc, #324]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004346:	ed97 6a02 	vldr	s12, [r7, #8]
 800434a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800448c <HAL_RCC_GetSysClockFreq+0x2e4>
 800434e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004356:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800435a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004362:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004366:	e065      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004494 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b40      	ldr	r3, [pc, #256]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a02 	vldr	s12, [r7, #8]
 800438e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800448c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043aa:	e043      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004498 <HAL_RCC_GetSysClockFreq+0x2f0>
 80043ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043be:	4b2f      	ldr	r3, [pc, #188]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80043d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800448c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043ee:	e021      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004494 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004402:	4b1e      	ldr	r3, [pc, #120]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a02 	vldr	s12, [r7, #8]
 8004416:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800448c <HAL_RCC_GetSysClockFreq+0x2e4>
 800441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004432:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004434:	4b11      	ldr	r3, [pc, #68]	@ (800447c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	0a5b      	lsrs	r3, r3, #9
 800443a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800443e:	3301      	adds	r3, #1
 8004440:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	ee07 3a90 	vmov	s15, r3
 8004448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800444c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004458:	ee17 3a90 	vmov	r3, s15
 800445c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800445e:	e005      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
      break;
 8004464:	e002      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004466:	4b07      	ldr	r3, [pc, #28]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004468:	61bb      	str	r3, [r7, #24]
      break;
 800446a:	bf00      	nop
  }

  return sysclockfreq;
 800446c:	69bb      	ldr	r3, [r7, #24]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3724      	adds	r7, #36	@ 0x24
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	03d09000 	.word	0x03d09000
 8004484:	003d0900 	.word	0x003d0900
 8004488:	007a1200 	.word	0x007a1200
 800448c:	46000000 	.word	0x46000000
 8004490:	4c742400 	.word	0x4c742400
 8004494:	4a742400 	.word	0x4a742400
 8004498:	4af42400 	.word	0x4af42400

0800449c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e049      	b.n	8004542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc faf6 	bl	8000ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fc60 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	bf0c      	ite	eq
 8004570:	2301      	moveq	r3, #1
 8004572:	2300      	movne	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e03c      	b.n	80045f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b04      	cmp	r3, #4
 800457c:	d109      	bne.n	8004592 <HAL_TIM_PWM_Start_DMA+0x46>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	e02f      	b.n	80045f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d109      	bne.n	80045ac <HAL_TIM_PWM_Start_DMA+0x60>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e022      	b.n	80045f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	d109      	bne.n	80045c6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	bf0c      	ite	eq
 80045be:	2301      	moveq	r3, #1
 80045c0:	2300      	movne	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e015      	b.n	80045f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d109      	bne.n	80045e0 <HAL_TIM_PWM_Start_DMA+0x94>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e008      	b.n	80045f2 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	e1b0      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	e03c      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x142>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d109      	bne.n	800462e <HAL_TIM_PWM_Start_DMA+0xe2>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e02f      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x142>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b08      	cmp	r3, #8
 8004632:	d109      	bne.n	8004648 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e022      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x142>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d109      	bne.n	8004662 <HAL_TIM_PWM_Start_DMA+0x116>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	e015      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x142>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b10      	cmp	r3, #16
 8004666:	d109      	bne.n	800467c <HAL_TIM_PWM_Start_DMA+0x130>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e008      	b.n	800468e <HAL_TIM_PWM_Start_DMA+0x142>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d034      	beq.n	80046fc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_TIM_PWM_Start_DMA+0x152>
 8004698:	887b      	ldrh	r3, [r7, #2]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e15c      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start_DMA+0x166>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b0:	e026      	b.n	8004700 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_PWM_Start_DMA+0x176>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c0:	e01e      	b.n	8004700 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_PWM_Start_DMA+0x186>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d0:	e016      	b.n	8004700 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_PWM_Start_DMA+0x196>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046e0:	e00e      	b.n	8004700 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f0:	e006      	b.n	8004700 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046fa:	e001      	b.n	8004700 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e12d      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	f200 80ae 	bhi.w	8004864 <HAL_TIM_PWM_Start_DMA+0x318>
 8004708:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004745 	.word	0x08004745
 8004714:	08004865 	.word	0x08004865
 8004718:	08004865 	.word	0x08004865
 800471c:	08004865 	.word	0x08004865
 8004720:	0800478d 	.word	0x0800478d
 8004724:	08004865 	.word	0x08004865
 8004728:	08004865 	.word	0x08004865
 800472c:	08004865 	.word	0x08004865
 8004730:	080047d5 	.word	0x080047d5
 8004734:	08004865 	.word	0x08004865
 8004738:	08004865 	.word	0x08004865
 800473c:	08004865 	.word	0x08004865
 8004740:	0800481d 	.word	0x0800481d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	4a86      	ldr	r2, [pc, #536]	@ (8004964 <HAL_TIM_PWM_Start_DMA+0x418>)
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	4a85      	ldr	r2, [pc, #532]	@ (8004968 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	4a84      	ldr	r2, [pc, #528]	@ (800496c <HAL_TIM_PWM_Start_DMA+0x420>)
 800475a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3334      	adds	r3, #52	@ 0x34
 8004768:	461a      	mov	r2, r3
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	f7fc ff8c 	bl	8001688 <HAL_DMA_Start_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0f0      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004788:	60da      	str	r2, [r3, #12]
      break;
 800478a:	e06e      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	4a74      	ldr	r2, [pc, #464]	@ (8004964 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004792:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	4a73      	ldr	r2, [pc, #460]	@ (8004968 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800479a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	4a72      	ldr	r2, [pc, #456]	@ (800496c <HAL_TIM_PWM_Start_DMA+0x420>)
 80047a2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3338      	adds	r3, #56	@ 0x38
 80047b0:	461a      	mov	r2, r3
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	f7fc ff68 	bl	8001688 <HAL_DMA_Start_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0cc      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d0:	60da      	str	r2, [r3, #12]
      break;
 80047d2:	e04a      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	4a62      	ldr	r2, [pc, #392]	@ (8004964 <HAL_TIM_PWM_Start_DMA+0x418>)
 80047da:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a61      	ldr	r2, [pc, #388]	@ (8004968 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80047e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	4a60      	ldr	r2, [pc, #384]	@ (800496c <HAL_TIM_PWM_Start_DMA+0x420>)
 80047ea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	333c      	adds	r3, #60	@ 0x3c
 80047f8:	461a      	mov	r2, r3
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	f7fc ff44 	bl	8001688 <HAL_DMA_Start_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0a8      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004818:	60da      	str	r2, [r3, #12]
      break;
 800481a:	e026      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	4a50      	ldr	r2, [pc, #320]	@ (8004964 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004822:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	4a4f      	ldr	r2, [pc, #316]	@ (8004968 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	4a4e      	ldr	r2, [pc, #312]	@ (800496c <HAL_TIM_PWM_Start_DMA+0x420>)
 8004832:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3340      	adds	r3, #64	@ 0x40
 8004840:	461a      	mov	r2, r3
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	f7fc ff20 	bl	8001688 <HAL_DMA_Start_IT>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e084      	b.n	800495c <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004860:	60da      	str	r2, [r3, #12]
      break;
 8004862:	e002      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
      break;
 8004868:	bf00      	nop
  }

  if (status == HAL_OK)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d174      	bne.n	800495a <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fe07 	bl	800548c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3b      	ldr	r2, [pc, #236]	@ (8004970 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_TIM_PWM_Start_DMA+0x364>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a39      	ldr	r2, [pc, #228]	@ (8004974 <HAL_TIM_PWM_Start_DMA+0x428>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIM_PWM_Start_DMA+0x364>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a38      	ldr	r2, [pc, #224]	@ (8004978 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIM_PWM_Start_DMA+0x364>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a36      	ldr	r2, [pc, #216]	@ (800497c <HAL_TIM_PWM_Start_DMA+0x430>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_PWM_Start_DMA+0x364>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a35      	ldr	r2, [pc, #212]	@ (8004980 <HAL_TIM_PWM_Start_DMA+0x434>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_PWM_Start_DMA+0x368>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <HAL_TIM_PWM_Start_DMA+0x424>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048dc:	d01d      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a28      	ldr	r2, [pc, #160]	@ (8004984 <HAL_TIM_PWM_Start_DMA+0x438>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a25      	ldr	r2, [pc, #148]	@ (800498c <HAL_TIM_PWM_Start_DMA+0x440>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a21      	ldr	r2, [pc, #132]	@ (8004990 <HAL_TIM_PWM_Start_DMA+0x444>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d115      	bne.n	8004946 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b06      	cmp	r3, #6
 800492a:	d015      	beq.n	8004958 <HAL_TIM_PWM_Start_DMA+0x40c>
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004932:	d011      	beq.n	8004958 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	e008      	b.n	8004958 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e000      	b.n	800495a <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800495a:	7dfb      	ldrb	r3, [r7, #23]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	08004c8f 	.word	0x08004c8f
 8004968:	08004d37 	.word	0x08004d37
 800496c:	08004bfd 	.word	0x08004bfd
 8004970:	40010000 	.word	0x40010000
 8004974:	40010400 	.word	0x40010400
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40001800 	.word	0x40001800
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0ff      	b.n	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b14      	cmp	r3, #20
 80049c2:	f200 80f0 	bhi.w	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049c6:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004ba7 	.word	0x08004ba7
 80049d4:	08004ba7 	.word	0x08004ba7
 80049d8:	08004ba7 	.word	0x08004ba7
 80049dc:	08004a61 	.word	0x08004a61
 80049e0:	08004ba7 	.word	0x08004ba7
 80049e4:	08004ba7 	.word	0x08004ba7
 80049e8:	08004ba7 	.word	0x08004ba7
 80049ec:	08004aa3 	.word	0x08004aa3
 80049f0:	08004ba7 	.word	0x08004ba7
 80049f4:	08004ba7 	.word	0x08004ba7
 80049f8:	08004ba7 	.word	0x08004ba7
 80049fc:	08004ae3 	.word	0x08004ae3
 8004a00:	08004ba7 	.word	0x08004ba7
 8004a04:	08004ba7 	.word	0x08004ba7
 8004a08:	08004ba7 	.word	0x08004ba7
 8004a0c:	08004b25 	.word	0x08004b25
 8004a10:	08004ba7 	.word	0x08004ba7
 8004a14:	08004ba7 	.word	0x08004ba7
 8004a18:	08004ba7 	.word	0x08004ba7
 8004a1c:	08004b65 	.word	0x08004b65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fa5a 	bl	8004ee0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0208 	orr.w	r2, r2, #8
 8004a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	619a      	str	r2, [r3, #24]
      break;
 8004a5e:	e0a5      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 faca 	bl	8005000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	021a      	lsls	r2, r3, #8
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	619a      	str	r2, [r3, #24]
      break;
 8004aa0:	e084      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fb33 	bl	8005114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0208 	orr.w	r2, r2, #8
 8004abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0204 	bic.w	r2, r2, #4
 8004acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69d9      	ldr	r1, [r3, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]
      break;
 8004ae0:	e064      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fb9b 	bl	8005224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
      break;
 8004b22:	e043      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fbe4 	bl	80052f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b62:	e023      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fc28 	bl	80053c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8004baa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop

08004bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d107      	bne.n	8004c24 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c22:	e02a      	b.n	8004c7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d107      	bne.n	8004c3e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2202      	movs	r2, #2
 8004c32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c3c:	e01d      	b.n	8004c7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d107      	bne.n	8004c58 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c56:	e010      	b.n	8004c7a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d107      	bne.n	8004c72 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2208      	movs	r2, #8
 8004c66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c70:	e003      	b.n	8004c7a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff ffb4 	bl	8004be8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	771a      	strb	r2, [r3, #28]
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d10b      	bne.n	8004cbe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d136      	bne.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cbc:	e031      	b.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d10b      	bne.n	8004ce0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d125      	bne.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cde:	e020      	b.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d10b      	bne.n	8004d02 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2204      	movs	r2, #4
 8004cee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d114      	bne.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d00:	e00f      	b.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d10a      	bne.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2208      	movs	r2, #8
 8004d10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d103      	bne.n	8004d22 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff4c 	bl	8004bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	771a      	strb	r2, [r3, #28]
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d103      	bne.n	8004d56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]
 8004d54:	e019      	b.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d103      	bne.n	8004d68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2202      	movs	r2, #2
 8004d64:	771a      	strb	r2, [r3, #28]
 8004d66:	e010      	b.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d103      	bne.n	8004d7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2204      	movs	r2, #4
 8004d76:	771a      	strb	r2, [r3, #28]
 8004d78:	e007      	b.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d102      	bne.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2208      	movs	r2, #8
 8004d88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff ff22 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	771a      	strb	r2, [r3, #28]
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a43      	ldr	r2, [pc, #268]	@ (8004ec0 <TIM_Base_SetConfig+0x120>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dbe:	d00f      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	@ (8004ec4 <TIM_Base_SetConfig+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec8 <TIM_Base_SetConfig+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ecc <TIM_Base_SetConfig+0x12c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed0 <TIM_Base_SetConfig+0x130>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d108      	bne.n	8004df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a32      	ldr	r2, [pc, #200]	@ (8004ec0 <TIM_Base_SetConfig+0x120>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01f      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e00:	d01b      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec4 <TIM_Base_SetConfig+0x124>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d017      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec8 <TIM_Base_SetConfig+0x128>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2d      	ldr	r2, [pc, #180]	@ (8004ecc <TIM_Base_SetConfig+0x12c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed0 <TIM_Base_SetConfig+0x130>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed4 <TIM_Base_SetConfig+0x134>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed8 <TIM_Base_SetConfig+0x138>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0x9a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a29      	ldr	r2, [pc, #164]	@ (8004edc <TIM_Base_SetConfig+0x13c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ec0 <TIM_Base_SetConfig+0x120>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00f      	beq.n	8004e92 <TIM_Base_SetConfig+0xf2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <TIM_Base_SetConfig+0x130>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_Base_SetConfig+0xf2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <TIM_Base_SetConfig+0x134>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0xf2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <TIM_Base_SetConfig+0x138>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0xf2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <TIM_Base_SetConfig+0x13c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d103      	bne.n	8004e9a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f043 0204 	orr.w	r2, r3, #4
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f023 0201 	bic.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4b37      	ldr	r3, [pc, #220]	@ (8004fe8 <TIM_OC1_SetConfig+0x108>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0302 	bic.w	r3, r3, #2
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a2d      	ldr	r2, [pc, #180]	@ (8004fec <TIM_OC1_SetConfig+0x10c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00f      	beq.n	8004f5c <TIM_OC1_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff0 <TIM_OC1_SetConfig+0x110>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <TIM_OC1_SetConfig+0x7c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff4 <TIM_OC1_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_OC1_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff8 <TIM_OC1_SetConfig+0x118>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC1_SetConfig+0x7c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a29      	ldr	r2, [pc, #164]	@ (8004ffc <TIM_OC1_SetConfig+0x11c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10c      	bne.n	8004f76 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0308 	bic.w	r3, r3, #8
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <TIM_OC1_SetConfig+0x10c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00f      	beq.n	8004f9e <TIM_OC1_SetConfig+0xbe>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <TIM_OC1_SetConfig+0x110>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_OC1_SetConfig+0xbe>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff4 <TIM_OC1_SetConfig+0x114>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <TIM_OC1_SetConfig+0xbe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <TIM_OC1_SetConfig+0x118>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_OC1_SetConfig+0xbe>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <TIM_OC1_SetConfig+0x11c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d111      	bne.n	8004fc2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	fffeff8f 	.word	0xfffeff8f
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40010400 	.word	0x40010400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800

08005000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0210 	bic.w	r2, r3, #16
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <TIM_OC2_SetConfig+0xfc>)
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0320 	bic.w	r3, r3, #32
 800504a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a29      	ldr	r2, [pc, #164]	@ (8005100 <TIM_OC2_SetConfig+0x100>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_OC2_SetConfig+0x68>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a28      	ldr	r2, [pc, #160]	@ (8005104 <TIM_OC2_SetConfig+0x104>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d10d      	bne.n	8005084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800506e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <TIM_OC2_SetConfig+0x100>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00f      	beq.n	80050ac <TIM_OC2_SetConfig+0xac>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <TIM_OC2_SetConfig+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_OC2_SetConfig+0xac>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1c      	ldr	r2, [pc, #112]	@ (8005108 <TIM_OC2_SetConfig+0x108>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC2_SetConfig+0xac>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <TIM_OC2_SetConfig+0x10c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC2_SetConfig+0xac>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <TIM_OC2_SetConfig+0x110>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d113      	bne.n	80050d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	feff8fff 	.word	0xfeff8fff
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800

08005114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4b33      	ldr	r3, [pc, #204]	@ (800520c <TIM_OC3_SetConfig+0xf8>)
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800515c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a28      	ldr	r2, [pc, #160]	@ (8005210 <TIM_OC3_SetConfig+0xfc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_OC3_SetConfig+0x66>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a27      	ldr	r2, [pc, #156]	@ (8005214 <TIM_OC3_SetConfig+0x100>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10d      	bne.n	8005196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1d      	ldr	r2, [pc, #116]	@ (8005210 <TIM_OC3_SetConfig+0xfc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_OC3_SetConfig+0xaa>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <TIM_OC3_SetConfig+0x100>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_OC3_SetConfig+0xaa>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <TIM_OC3_SetConfig+0x104>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_OC3_SetConfig+0xaa>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <TIM_OC3_SetConfig+0x108>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_OC3_SetConfig+0xaa>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <TIM_OC3_SetConfig+0x10c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d113      	bne.n	80051e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	621a      	str	r2, [r3, #32]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	fffeff8f 	.word	0xfffeff8f
 8005210:	40010000 	.word	0x40010000
 8005214:	40010400 	.word	0x40010400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4b24      	ldr	r3, [pc, #144]	@ (80052e0 <TIM_OC4_SetConfig+0xbc>)
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800526e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	031b      	lsls	r3, r3, #12
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a19      	ldr	r2, [pc, #100]	@ (80052e4 <TIM_OC4_SetConfig+0xc0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_OC4_SetConfig+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a18      	ldr	r2, [pc, #96]	@ (80052e8 <TIM_OC4_SetConfig+0xc4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_OC4_SetConfig+0x80>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a17      	ldr	r2, [pc, #92]	@ (80052ec <TIM_OC4_SetConfig+0xc8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC4_SetConfig+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <TIM_OC4_SetConfig+0xcc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC4_SetConfig+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <TIM_OC4_SetConfig+0xd0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d109      	bne.n	80052b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	feff8fff 	.word	0xfeff8fff
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <TIM_OC5_SetConfig+0xb0>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <TIM_OC5_SetConfig+0xb4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_OC5_SetConfig+0x76>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <TIM_OC5_SetConfig+0xb8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_OC5_SetConfig+0x76>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a16      	ldr	r2, [pc, #88]	@ (80053b4 <TIM_OC5_SetConfig+0xbc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_OC5_SetConfig+0x76>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <TIM_OC5_SetConfig+0xc0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_OC5_SetConfig+0x76>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a14      	ldr	r2, [pc, #80]	@ (80053bc <TIM_OC5_SetConfig+0xc4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d109      	bne.n	8005382 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	fffeff8f 	.word	0xfffeff8f
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800

080053c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <TIM_OC6_SetConfig+0xb4>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <TIM_OC6_SetConfig+0xb8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_OC6_SetConfig+0x78>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <TIM_OC6_SetConfig+0xbc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_OC6_SetConfig+0x78>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a17      	ldr	r2, [pc, #92]	@ (8005480 <TIM_OC6_SetConfig+0xc0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_OC6_SetConfig+0x78>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a16      	ldr	r2, [pc, #88]	@ (8005484 <TIM_OC6_SetConfig+0xc4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC6_SetConfig+0x78>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a15      	ldr	r2, [pc, #84]	@ (8005488 <TIM_OC6_SetConfig+0xc8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d109      	bne.n	800544c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	029b      	lsls	r3, r3, #10
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	feff8fff 	.word	0xfeff8fff
 8005478:	40010000 	.word	0x40010000
 800547c:	40010400 	.word	0x40010400
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800

0800548c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	2201      	movs	r2, #1
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	401a      	ands	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e06d      	b.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a30      	ldr	r2, [pc, #192]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2f      	ldr	r2, [pc, #188]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800552a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a20      	ldr	r2, [pc, #128]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1c      	ldr	r2, [pc, #112]	@ (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1a      	ldr	r2, [pc, #104]	@ (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a15      	ldr	r2, [pc, #84]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a16      	ldr	r2, [pc, #88]	@ (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a15      	ldr	r2, [pc, #84]	@ (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d10c      	bne.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40001800 	.word	0x40001800
 80055f0:	40014000 	.word	0x40014000

080055f4 <memset>:
 80055f4:	4402      	add	r2, r0
 80055f6:	4603      	mov	r3, r0
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d100      	bne.n	80055fe <memset+0xa>
 80055fc:	4770      	bx	lr
 80055fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005602:	e7f9      	b.n	80055f8 <memset+0x4>

08005604 <__errno>:
 8005604:	4b01      	ldr	r3, [pc, #4]	@ (800560c <__errno+0x8>)
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	24000010 	.word	0x24000010

08005610 <__libc_init_array>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	4d0d      	ldr	r5, [pc, #52]	@ (8005648 <__libc_init_array+0x38>)
 8005614:	4c0d      	ldr	r4, [pc, #52]	@ (800564c <__libc_init_array+0x3c>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	2600      	movs	r6, #0
 800561c:	42a6      	cmp	r6, r4
 800561e:	d109      	bne.n	8005634 <__libc_init_array+0x24>
 8005620:	4d0b      	ldr	r5, [pc, #44]	@ (8005650 <__libc_init_array+0x40>)
 8005622:	4c0c      	ldr	r4, [pc, #48]	@ (8005654 <__libc_init_array+0x44>)
 8005624:	f000 fb10 	bl	8005c48 <_init>
 8005628:	1b64      	subs	r4, r4, r5
 800562a:	10a4      	asrs	r4, r4, #2
 800562c:	2600      	movs	r6, #0
 800562e:	42a6      	cmp	r6, r4
 8005630:	d105      	bne.n	800563e <__libc_init_array+0x2e>
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	f855 3b04 	ldr.w	r3, [r5], #4
 8005638:	4798      	blx	r3
 800563a:	3601      	adds	r6, #1
 800563c:	e7ee      	b.n	800561c <__libc_init_array+0xc>
 800563e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005642:	4798      	blx	r3
 8005644:	3601      	adds	r6, #1
 8005646:	e7f2      	b.n	800562e <__libc_init_array+0x1e>
 8005648:	08007540 	.word	0x08007540
 800564c:	08007540 	.word	0x08007540
 8005650:	08007540 	.word	0x08007540
 8005654:	08007544 	.word	0x08007544

08005658 <checkint>:
 8005658:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800565c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8005660:	429a      	cmp	r2, r3
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	dd2a      	ble.n	80056bc <checkint+0x64>
 8005666:	f240 4333 	movw	r3, #1075	@ 0x433
 800566a:	429a      	cmp	r2, r3
 800566c:	dc24      	bgt.n	80056b8 <checkint+0x60>
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	f1a3 0620 	sub.w	r6, r3, #32
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	fa02 f403 	lsl.w	r4, r2, r3
 800567c:	fa02 f606 	lsl.w	r6, r2, r6
 8005680:	f1c3 0520 	rsb	r5, r3, #32
 8005684:	fa22 f505 	lsr.w	r5, r2, r5
 8005688:	4334      	orrs	r4, r6
 800568a:	432c      	orrs	r4, r5
 800568c:	409a      	lsls	r2, r3
 800568e:	ea20 0202 	bic.w	r2, r0, r2
 8005692:	ea21 0404 	bic.w	r4, r1, r4
 8005696:	4322      	orrs	r2, r4
 8005698:	f1a3 0420 	sub.w	r4, r3, #32
 800569c:	f1c3 0220 	rsb	r2, r3, #32
 80056a0:	d10c      	bne.n	80056bc <checkint+0x64>
 80056a2:	40d8      	lsrs	r0, r3
 80056a4:	fa01 f302 	lsl.w	r3, r1, r2
 80056a8:	4318      	orrs	r0, r3
 80056aa:	40e1      	lsrs	r1, r4
 80056ac:	4308      	orrs	r0, r1
 80056ae:	f000 0001 	and.w	r0, r0, #1
 80056b2:	f1d0 0002 	rsbs	r0, r0, #2
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	2002      	movs	r0, #2
 80056ba:	e7fc      	b.n	80056b6 <checkint+0x5e>
 80056bc:	2000      	movs	r0, #0
 80056be:	e7fa      	b.n	80056b6 <checkint+0x5e>

080056c0 <pow>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	ee10 4a90 	vmov	r4, s1
 80056c8:	ed2d 8b0a 	vpush	{d8-d12}
 80056cc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80056d0:	ee11 aa90 	vmov	sl, s3
 80056d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80056d8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80056dc:	429a      	cmp	r2, r3
 80056de:	ee10 5a10 	vmov	r5, s0
 80056e2:	ee11 0a10 	vmov	r0, s2
 80056e6:	b087      	sub	sp, #28
 80056e8:	46c4      	mov	ip, r8
 80056ea:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80056ee:	d806      	bhi.n	80056fe <pow+0x3e>
 80056f0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80056f4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 80056f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056fa:	f240 8157 	bls.w	80059ac <pow+0x2ec>
 80056fe:	1802      	adds	r2, r0, r0
 8005700:	eb4a 010a 	adc.w	r1, sl, sl
 8005704:	f06f 0b01 	mvn.w	fp, #1
 8005708:	1e57      	subs	r7, r2, #1
 800570a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800570e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8005712:	45bb      	cmp	fp, r7
 8005714:	eb7e 0303 	sbcs.w	r3, lr, r3
 8005718:	d242      	bcs.n	80057a0 <pow+0xe0>
 800571a:	ea52 0301 	orrs.w	r3, r2, r1
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	d10c      	bne.n	800573e <pow+0x7e>
 8005724:	196d      	adds	r5, r5, r5
 8005726:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800572a:	4164      	adcs	r4, r4
 800572c:	42ab      	cmp	r3, r5
 800572e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005732:	41a3      	sbcs	r3, r4
 8005734:	f0c0 808f 	bcc.w	8005856 <pow+0x196>
 8005738:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800573c:	e02b      	b.n	8005796 <pow+0xd6>
 800573e:	4ed4      	ldr	r6, [pc, #848]	@ (8005a90 <pow+0x3d0>)
 8005740:	42b4      	cmp	r4, r6
 8005742:	bf08      	it	eq
 8005744:	429d      	cmpeq	r5, r3
 8005746:	d109      	bne.n	800575c <pow+0x9c>
 8005748:	1800      	adds	r0, r0, r0
 800574a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800574e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8005752:	4283      	cmp	r3, r0
 8005754:	4bcf      	ldr	r3, [pc, #828]	@ (8005a94 <pow+0x3d4>)
 8005756:	eb73 030a 	sbcs.w	r3, r3, sl
 800575a:	e7eb      	b.n	8005734 <pow+0x74>
 800575c:	196d      	adds	r5, r5, r5
 800575e:	48ce      	ldr	r0, [pc, #824]	@ (8005a98 <pow+0x3d8>)
 8005760:	4164      	adcs	r4, r4
 8005762:	42ab      	cmp	r3, r5
 8005764:	eb70 0604 	sbcs.w	r6, r0, r4
 8005768:	d375      	bcc.n	8005856 <pow+0x196>
 800576a:	4281      	cmp	r1, r0
 800576c:	bf08      	it	eq
 800576e:	429a      	cmpeq	r2, r3
 8005770:	d171      	bne.n	8005856 <pow+0x196>
 8005772:	4aca      	ldr	r2, [pc, #808]	@ (8005a9c <pow+0x3dc>)
 8005774:	4294      	cmp	r4, r2
 8005776:	bf08      	it	eq
 8005778:	429d      	cmpeq	r5, r3
 800577a:	d0dd      	beq.n	8005738 <pow+0x78>
 800577c:	4294      	cmp	r4, r2
 800577e:	ea6f 0a0a 	mvn.w	sl, sl
 8005782:	bf34      	ite	cc
 8005784:	2400      	movcc	r4, #0
 8005786:	2401      	movcs	r4, #1
 8005788:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800578c:	4554      	cmp	r4, sl
 800578e:	f040 81dc 	bne.w	8005b4a <pow+0x48a>
 8005792:	ee21 0b01 	vmul.f64	d0, d1, d1
 8005796:	b007      	add	sp, #28
 8005798:	ecbd 8b0a 	vpop	{d8-d12}
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a0:	196f      	adds	r7, r5, r5
 80057a2:	eb44 0904 	adc.w	r9, r4, r4
 80057a6:	1e7a      	subs	r2, r7, #1
 80057a8:	f169 0300 	sbc.w	r3, r9, #0
 80057ac:	4593      	cmp	fp, r2
 80057ae:	eb7e 0303 	sbcs.w	r3, lr, r3
 80057b2:	d225      	bcs.n	8005800 <pow+0x140>
 80057b4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80057b8:	2c00      	cmp	r4, #0
 80057ba:	da13      	bge.n	80057e4 <pow+0x124>
 80057bc:	4651      	mov	r1, sl
 80057be:	f7ff ff4b 	bl	8005658 <checkint>
 80057c2:	2801      	cmp	r0, #1
 80057c4:	d10e      	bne.n	80057e4 <pow+0x124>
 80057c6:	eeb1 0b40 	vneg.f64	d0, d0
 80057ca:	ea57 0909 	orrs.w	r9, r7, r9
 80057ce:	d10b      	bne.n	80057e8 <pow+0x128>
 80057d0:	f1ba 0f00 	cmp.w	sl, #0
 80057d4:	dadf      	bge.n	8005796 <pow+0xd6>
 80057d6:	b007      	add	sp, #28
 80057d8:	ecbd 8b0a 	vpop	{d8-d12}
 80057dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	f000 b9ee 	b.w	8005bc0 <__math_divzero>
 80057e4:	2000      	movs	r0, #0
 80057e6:	e7f0      	b.n	80057ca <pow+0x10a>
 80057e8:	f1ba 0f00 	cmp.w	sl, #0
 80057ec:	dad3      	bge.n	8005796 <pow+0xd6>
 80057ee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80057f2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80057f6:	ed8d 7b00 	vstr	d7, [sp]
 80057fa:	ed9d 0b00 	vldr	d0, [sp]
 80057fe:	e7ca      	b.n	8005796 <pow+0xd6>
 8005800:	2c00      	cmp	r4, #0
 8005802:	da2b      	bge.n	800585c <pow+0x19c>
 8005804:	4651      	mov	r1, sl
 8005806:	f7ff ff27 	bl	8005658 <checkint>
 800580a:	b930      	cbnz	r0, 800581a <pow+0x15a>
 800580c:	b007      	add	sp, #28
 800580e:	ecbd 8b0a 	vpop	{d8-d12}
 8005812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005816:	f000 b9eb 	b.w	8005bf0 <__math_invalid>
 800581a:	1e41      	subs	r1, r0, #1
 800581c:	4248      	negs	r0, r1
 800581e:	4148      	adcs	r0, r1
 8005820:	0480      	lsls	r0, r0, #18
 8005822:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005826:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800582a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800582e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8005832:	2b7f      	cmp	r3, #127	@ 0x7f
 8005834:	d92d      	bls.n	8005892 <pow+0x1d2>
 8005836:	4b96      	ldr	r3, [pc, #600]	@ (8005a90 <pow+0x3d0>)
 8005838:	2000      	movs	r0, #0
 800583a:	429c      	cmp	r4, r3
 800583c:	bf08      	it	eq
 800583e:	4285      	cmpeq	r5, r0
 8005840:	f43f af7a 	beq.w	8005738 <pow+0x78>
 8005844:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8005848:	428a      	cmp	r2, r1
 800584a:	d80c      	bhi.n	8005866 <pow+0x1a6>
 800584c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005850:	42a8      	cmp	r0, r5
 8005852:	41a3      	sbcs	r3, r4
 8005854:	d204      	bcs.n	8005860 <pow+0x1a0>
 8005856:	ee31 0b00 	vadd.f64	d0, d1, d0
 800585a:	e79c      	b.n	8005796 <pow+0xd6>
 800585c:	2000      	movs	r0, #0
 800585e:	e7e4      	b.n	800582a <pow+0x16a>
 8005860:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005864:	e797      	b.n	8005796 <pow+0xd6>
 8005866:	2d01      	cmp	r5, #1
 8005868:	eb74 0303 	sbcs.w	r3, r4, r3
 800586c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005870:	bf34      	ite	cc
 8005872:	2301      	movcc	r3, #1
 8005874:	2300      	movcs	r3, #0
 8005876:	4296      	cmp	r6, r2
 8005878:	bf8c      	ite	hi
 800587a:	2600      	movhi	r6, #0
 800587c:	2601      	movls	r6, #1
 800587e:	42b3      	cmp	r3, r6
 8005880:	f000 809c 	beq.w	80059bc <pow+0x2fc>
 8005884:	b007      	add	sp, #28
 8005886:	ecbd 8b0a 	vpop	{d8-d12}
 800588a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588e:	f000 b98f 	b.w	8005bb0 <__math_oflow>
 8005892:	f1bc 0f00 	cmp.w	ip, #0
 8005896:	d10a      	bne.n	80058ae <pow+0x1ee>
 8005898:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8005a80 <pow+0x3c0>
 800589c:	ee20 7b07 	vmul.f64	d7, d0, d7
 80058a0:	ec53 2b17 	vmov	r2, r3, d7
 80058a4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80058a8:	4615      	mov	r5, r2
 80058aa:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80058ae:	4a7c      	ldr	r2, [pc, #496]	@ (8005aa0 <pow+0x3e0>)
 80058b0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80058b4:	4422      	add	r2, r4
 80058b6:	1513      	asrs	r3, r2, #20
 80058b8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80058bc:	ee03 3a10 	vmov	s6, r3
 80058c0:	0d12      	lsrs	r2, r2, #20
 80058c2:	4b78      	ldr	r3, [pc, #480]	@ (8005aa4 <pow+0x3e4>)
 80058c4:	0512      	lsls	r2, r2, #20
 80058c6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80058ca:	1aa7      	subs	r7, r4, r2
 80058cc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80058d0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80058d4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80058d8:	1e2e      	subs	r6, r5, #0
 80058da:	ec47 6b14 	vmov	d4, r6, r7
 80058de:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 80058e2:	eea4 6b05 	vfma.f64	d6, d4, d5
 80058e6:	ed93 5b00 	vldr	d5, [r3]
 80058ea:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80058ee:	eea3 2b05 	vfma.f64	d2, d3, d5
 80058f2:	ed93 5b02 	vldr	d5, [r3, #8]
 80058f6:	ee36 4b02 	vadd.f64	d4, d6, d2
 80058fa:	ee32 2b44 	vsub.f64	d2, d2, d4
 80058fe:	eea3 7b05 	vfma.f64	d7, d3, d5
 8005902:	ed93 5b04 	vldr	d5, [r3, #16]
 8005906:	ee32 2b06 	vadd.f64	d2, d2, d6
 800590a:	ee37 7b02 	vadd.f64	d7, d7, d2
 800590e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8005912:	ee26 0b05 	vmul.f64	d0, d6, d5
 8005916:	ee34 8b00 	vadd.f64	d8, d4, d0
 800591a:	eeb0 9b40 	vmov.f64	d9, d0
 800591e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8005922:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8005926:	ee34 ab00 	vadd.f64	d10, d4, d0
 800592a:	ed93 5b06 	vldr	d5, [r3, #24]
 800592e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8005932:	ee37 7b09 	vadd.f64	d7, d7, d9
 8005936:	ed93 4b08 	vldr	d4, [r3, #32]
 800593a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800593e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8005942:	eea6 5b04 	vfma.f64	d5, d6, d4
 8005946:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800594a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800594e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8005952:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8005956:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800595a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800595e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005962:	eeab 7b05 	vfma.f64	d7, d11, d5
 8005966:	ee38 4b07 	vadd.f64	d4, d8, d7
 800596a:	ee21 6b04 	vmul.f64	d6, d1, d4
 800596e:	ee16 3a90 	vmov	r3, s13
 8005972:	eeb0 5b46 	vmov.f64	d5, d6
 8005976:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800597a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800597e:	18b2      	adds	r2, r6, r2
 8005980:	2a3e      	cmp	r2, #62	@ 0x3e
 8005982:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8005986:	ee38 8b44 	vsub.f64	d8, d8, d4
 800598a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800598e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8005992:	d91b      	bls.n	80059cc <pow+0x30c>
 8005994:	2a00      	cmp	r2, #0
 8005996:	da0b      	bge.n	80059b0 <pow+0x2f0>
 8005998:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800599c:	ee36 0b00 	vadd.f64	d0, d6, d0
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f43f aef8 	beq.w	8005796 <pow+0xd6>
 80059a6:	eeb1 0b40 	vneg.f64	d0, d0
 80059aa:	e6f4      	b.n	8005796 <pow+0xd6>
 80059ac:	2000      	movs	r0, #0
 80059ae:	e77e      	b.n	80058ae <pow+0x1ee>
 80059b0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80059b4:	d909      	bls.n	80059ca <pow+0x30a>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f6bf af64 	bge.w	8005884 <pow+0x1c4>
 80059bc:	b007      	add	sp, #28
 80059be:	ecbd 8b0a 	vpop	{d8-d12}
 80059c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	f000 b8eb 	b.w	8005ba0 <__math_uflow>
 80059ca:	2600      	movs	r6, #0
 80059cc:	4936      	ldr	r1, [pc, #216]	@ (8005aa8 <pow+0x3e8>)
 80059ce:	ed91 4b02 	vldr	d4, [r1, #8]
 80059d2:	ed91 3b00 	vldr	d3, [r1]
 80059d6:	eeb0 7b44 	vmov.f64	d7, d4
 80059da:	eea6 7b03 	vfma.f64	d7, d6, d3
 80059de:	ee17 5a10 	vmov	r5, s14
 80059e2:	ee37 7b44 	vsub.f64	d7, d7, d4
 80059e6:	ed91 4b04 	vldr	d4, [r1, #16]
 80059ea:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 80059ee:	eea7 6b04 	vfma.f64	d6, d7, d4
 80059f2:	ed91 4b06 	vldr	d4, [r1, #24]
 80059f6:	18dc      	adds	r4, r3, r3
 80059f8:	f104 030f 	add.w	r3, r4, #15
 80059fc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005a00:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005a04:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8005a08:	ee35 5b06 	vadd.f64	d5, d5, d6
 8005a0c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8005a10:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8005a14:	ed91 4b08 	vldr	d4, [r1, #32]
 8005a18:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005a1c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8005a20:	eea5 4b03 	vfma.f64	d4, d5, d3
 8005a24:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8005a28:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005a2c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8005a30:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8005a34:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005a38:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005a3c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8005a40:	1940      	adds	r0, r0, r5
 8005a42:	2700      	movs	r7, #0
 8005a44:	eb17 020c 	adds.w	r2, r7, ip
 8005a48:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005a4c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	d175      	bne.n	8005b40 <pow+0x480>
 8005a54:	42bd      	cmp	r5, r7
 8005a56:	db29      	blt.n	8005aac <pow+0x3ec>
 8005a58:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8005a5c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8005a60:	4610      	mov	r0, r2
 8005a62:	ec41 0b10 	vmov	d0, r0, r1
 8005a66:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005a6a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8005a88 <pow+0x3c8>
 8005a6e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005a72:	b007      	add	sp, #28
 8005a74:	ecbd 8b0a 	vpop	{d8-d12}
 8005a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	f000 b8d0 	b.w	8005c20 <__math_check_oflow>
 8005a80:	00000000 	.word	0x00000000
 8005a84:	43300000 	.word	0x43300000
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	7f000000 	.word	0x7f000000
 8005a90:	3ff00000 	.word	0x3ff00000
 8005a94:	fff00000 	.word	0xfff00000
 8005a98:	ffe00000 	.word	0xffe00000
 8005a9c:	7fe00000 	.word	0x7fe00000
 8005aa0:	c0196aab 	.word	0xc0196aab
 8005aa4:	08005c88 	.word	0x08005c88
 8005aa8:	08006cd0 	.word	0x08006cd0
 8005aac:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8005ab0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	ec41 0b15 	vmov	d5, r0, r1
 8005aba:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8005abe:	ee27 6b05 	vmul.f64	d6, d7, d5
 8005ac2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8005ac6:	eeb0 4bc7 	vabs.f64	d4, d7
 8005aca:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8005ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8005b50 <pow+0x490>
 8005ad6:	d52a      	bpl.n	8005b2e <pow+0x46e>
 8005ad8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005adc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	ee35 5b06 	vadd.f64	d5, d5, d6
 8005ae8:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8005aec:	bf58      	it	pl
 8005aee:	eeb0 4b43 	vmovpl.f64	d4, d3
 8005af2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005af6:	ee34 6b43 	vsub.f64	d6, d4, d3
 8005afa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005afe:	ee36 6b05 	vadd.f64	d6, d6, d5
 8005b02:	ee36 6b03 	vadd.f64	d6, d6, d3
 8005b06:	ee36 7b44 	vsub.f64	d7, d6, d4
 8005b0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b12:	d104      	bne.n	8005b1e <pow+0x45e>
 8005b14:	4632      	mov	r2, r6
 8005b16:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005b1a:	ec43 2b17 	vmov	d7, r2, r3
 8005b1e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b22:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b26:	ee26 6b00 	vmul.f64	d6, d6, d0
 8005b2a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8005b2e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005b32:	b007      	add	sp, #28
 8005b34:	ecbd 8b0a 	vpop	{d8-d12}
 8005b38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	f000 b867 	b.w	8005c0e <__math_check_uflow>
 8005b40:	ec43 2b10 	vmov	d0, r2, r3
 8005b44:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005b48:	e625      	b.n	8005796 <pow+0xd6>
 8005b4a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8005b58 <pow+0x498>
 8005b4e:	e622      	b.n	8005796 <pow+0xd6>
 8005b50:	00000000 	.word	0x00000000
 8005b54:	00100000 	.word	0x00100000
	...

08005b60 <with_errno>:
 8005b60:	b510      	push	{r4, lr}
 8005b62:	ed2d 8b02 	vpush	{d8}
 8005b66:	eeb0 8b40 	vmov.f64	d8, d0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	f7ff fd4a 	bl	8005604 <__errno>
 8005b70:	eeb0 0b48 	vmov.f64	d0, d8
 8005b74:	ecbd 8b02 	vpop	{d8}
 8005b78:	6004      	str	r4, [r0, #0]
 8005b7a:	bd10      	pop	{r4, pc}

08005b7c <xflow>:
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	b158      	cbz	r0, 8005b98 <xflow+0x1c>
 8005b80:	eeb1 7b40 	vneg.f64	d7, d0
 8005b84:	ed8d 7b00 	vstr	d7, [sp]
 8005b88:	ed9d 7b00 	vldr	d7, [sp]
 8005b8c:	2022      	movs	r0, #34	@ 0x22
 8005b8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005b92:	b002      	add	sp, #8
 8005b94:	f7ff bfe4 	b.w	8005b60 <with_errno>
 8005b98:	eeb0 7b40 	vmov.f64	d7, d0
 8005b9c:	e7f2      	b.n	8005b84 <xflow+0x8>
	...

08005ba0 <__math_uflow>:
 8005ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005ba8 <__math_uflow+0x8>
 8005ba4:	f7ff bfea 	b.w	8005b7c <xflow>
 8005ba8:	00000000 	.word	0x00000000
 8005bac:	10000000 	.word	0x10000000

08005bb0 <__math_oflow>:
 8005bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005bb8 <__math_oflow+0x8>
 8005bb4:	f7ff bfe2 	b.w	8005b7c <xflow>
 8005bb8:	00000000 	.word	0x00000000
 8005bbc:	70000000 	.word	0x70000000

08005bc0 <__math_divzero>:
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8005bc8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8005bcc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8005bd0:	ed8d 7b00 	vstr	d7, [sp]
 8005bd4:	ed9d 0b00 	vldr	d0, [sp]
 8005bd8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8005be8 <__math_divzero+0x28>
 8005bdc:	2022      	movs	r0, #34	@ 0x22
 8005bde:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8005be2:	b002      	add	sp, #8
 8005be4:	f7ff bfbc 	b.w	8005b60 <with_errno>
	...

08005bf0 <__math_invalid>:
 8005bf0:	eeb0 7b40 	vmov.f64	d7, d0
 8005bf4:	eeb4 7b47 	vcmp.f64	d7, d7
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	ee30 6b40 	vsub.f64	d6, d0, d0
 8005c00:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8005c04:	d602      	bvs.n	8005c0c <__math_invalid+0x1c>
 8005c06:	2021      	movs	r0, #33	@ 0x21
 8005c08:	f7ff bfaa 	b.w	8005b60 <with_errno>
 8005c0c:	4770      	bx	lr

08005c0e <__math_check_uflow>:
 8005c0e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c16:	d102      	bne.n	8005c1e <__math_check_uflow+0x10>
 8005c18:	2022      	movs	r0, #34	@ 0x22
 8005c1a:	f7ff bfa1 	b.w	8005b60 <with_errno>
 8005c1e:	4770      	bx	lr

08005c20 <__math_check_oflow>:
 8005c20:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8005c40 <__math_check_oflow+0x20>
 8005c24:	eeb0 7bc0 	vabs.f64	d7, d0
 8005c28:	eeb4 7b46 	vcmp.f64	d7, d6
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	dd02      	ble.n	8005c38 <__math_check_oflow+0x18>
 8005c32:	2022      	movs	r0, #34	@ 0x22
 8005c34:	f7ff bf94 	b.w	8005b60 <with_errno>
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w
 8005c40:	ffffffff 	.word	0xffffffff
 8005c44:	7fefffff 	.word	0x7fefffff

08005c48 <_init>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr

08005c54 <_fini>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr
