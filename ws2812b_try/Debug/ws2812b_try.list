
ws2812b_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  080060e0  080060e0  000070e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080079c0  080079c0  000089c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  24000000  080079c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005b8  24000060  08007a28  00009060  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000618  08007a28  00009618  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001088d  00000000  00000000  0000908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002521  00000000  00000000  0001991b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc8  00000000  00000000  0001be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a90  00000000  00000000  0001cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037ffc  00000000  00000000  0001d698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000136fd  00000000  00000000  00055694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001652e7  00000000  00000000  00068d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ce078  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003c2c  00000000  00000000  001ce0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001d1ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080060c8 	.word	0x080060c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	080060c8 	.word	0x080060c8

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fe48 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fe5f 	bl	8000fca <HAL_NVIC_EnableIRQ>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	58024400 	.word	0x58024400

08000318 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	@ 0x28
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b34      	ldr	r3, [pc, #208]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000334:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033e:	4b30      	ldr	r3, [pc, #192]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034c:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000352:	4a2b      	ldr	r2, [pc, #172]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800035c:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800036c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000370:	4a23      	ldr	r2, [pc, #140]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000380:	f003 0302 	and.w	r3, r3, #2
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000388:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800038a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800038e:	4a1c      	ldr	r2, [pc, #112]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80003ac:	4815      	ldr	r0, [pc, #84]	@ (8000404 <MX_GPIO_Init+0xec>)
 80003ae:	f003 f8df 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	4814      	ldr	r0, [pc, #80]	@ (8000408 <MX_GPIO_Init+0xf0>)
 80003b8:	f003 f8da 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80003bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <MX_GPIO_Init+0xec>)
 80003d6:	f002 ff1b 	bl	8003210 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003da:	2302      	movs	r3, #2
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_GPIO_Init+0xf0>)
 80003f2:	f002 ff0d 	bl	8003210 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	@ 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	58024400 	.word	0x58024400
 8000404:	58020400 	.word	0x58020400
 8000408:	58021000 	.word	0x58021000
 800040c:	00000000 	.word	0x00000000

08000410 <gammaCorrect>:
#include "tim.h"
#include "gpio.h"
#include <math.h>  // For pow() function

/* Gamma correction function */
uint8_t gammaCorrect(uint8_t value) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
    float gamma = 2.2;  // Standard gamma value
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <gammaCorrect+0x60>)
 800041c:	60fb      	str	r3, [r7, #12]
    return (uint8_t)(pow((float)value / 255.0, gamma) * 255.0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	ee07 3a90 	vmov	s15, r3
 8000424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800042c:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8000468 <gammaCorrect+0x58>
 8000430:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000434:	edd7 7a03 	vldr	s15, [r7, #12]
 8000438:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800043c:	eeb0 1b47 	vmov.f64	d1, d7
 8000440:	eeb0 0b46 	vmov.f64	d0, d6
 8000444:	f005 fb7c 	bl	8005b40 <pow>
 8000448:	eeb0 7b40 	vmov.f64	d7, d0
 800044c:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8000468 <gammaCorrect+0x58>
 8000450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000454:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000458:	edc7 7a00 	vstr	s15, [r7]
 800045c:	783b      	ldrb	r3, [r7, #0]
 800045e:	b2db      	uxtb	r3, r3
}
 8000460:	4618      	mov	r0, r3
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	00000000 	.word	0x00000000
 800046c:	406fe000 	.word	0x406fe000
 8000470:	400ccccd 	.word	0x400ccccd

08000474 <WS2812_SetColor>:
  * @param  led: LED index (0-15)
  * @param  green: Green intensity (0-255)
  * @param  red: Red intensity (0-255)
  * @param  blue: Blue intensity (0-255)
  */
void WS2812_SetColor(uint8_t led, uint8_t green, uint8_t red, uint8_t blue) {
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	4604      	mov	r4, r0
 800047c:	4608      	mov	r0, r1
 800047e:	4611      	mov	r1, r2
 8000480:	461a      	mov	r2, r3
 8000482:	4623      	mov	r3, r4
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	4603      	mov	r3, r0
 8000488:	71bb      	strb	r3, [r7, #6]
 800048a:	460b      	mov	r3, r1
 800048c:	717b      	strb	r3, [r7, #5]
 800048e:	4613      	mov	r3, r2
 8000490:	713b      	strb	r3, [r7, #4]
    if (led >= NUM_LEDS) return;  // Check if the LED index is valid
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d824      	bhi.n	80004e2 <WS2812_SetColor+0x6e>

    uint32_t ledOffset = led * 3;
 8000498:	79fa      	ldrb	r2, [r7, #7]
 800049a:	4613      	mov	r3, r2
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4413      	add	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]

    // Apply gamma correction to each color component
    LED_Data[ledOffset] = gammaCorrect(green);  // Corrected Green
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffb3 	bl	8000410 <gammaCorrect>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4619      	mov	r1, r3
 80004ae:	4a0f      	ldr	r2, [pc, #60]	@ (80004ec <WS2812_SetColor+0x78>)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	460a      	mov	r2, r1
 80004b6:	701a      	strb	r2, [r3, #0]
    LED_Data[ledOffset + 1] = gammaCorrect(red);  // Corrected Red
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	1c5c      	adds	r4, r3, #1
 80004bc:	797b      	ldrb	r3, [r7, #5]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ffa6 	bl	8000410 <gammaCorrect>
 80004c4:	4603      	mov	r3, r0
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <WS2812_SetColor+0x78>)
 80004ca:	551a      	strb	r2, [r3, r4]
    LED_Data[ledOffset + 2] = gammaCorrect(blue);  // Corrected Blue
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	1c9c      	adds	r4, r3, #2
 80004d0:	793b      	ldrb	r3, [r7, #4]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff9c 	bl	8000410 <gammaCorrect>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b03      	ldr	r3, [pc, #12]	@ (80004ec <WS2812_SetColor+0x78>)
 80004de:	551a      	strb	r2, [r3, r4]
 80004e0:	e000      	b.n	80004e4 <WS2812_SetColor+0x70>
    if (led >= NUM_LEDS) return;  // Check if the LED index is valid
 80004e2:	bf00      	nop
}
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	bf00      	nop
 80004ec:	240003e0 	.word	0x240003e0

080004f0 <WS2812_Refresh>:

/**
  * @brief  Prepare and send LED data via DMA
  */
void WS2812_Refresh(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
    uint16_t pos = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	82fb      	strh	r3, [r7, #22]

    // Convert LED_Data to PWM signal
    for (int led = 0; led < NUM_LEDS; led++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	e02f      	b.n	8000560 <WS2812_Refresh+0x70>
        for (int color = 0; color < 3; color++) {
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	e026      	b.n	8000554 <WS2812_Refresh+0x64>
            uint8_t byte = LED_Data[led * 3 + color];
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	4613      	mov	r3, r2
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	441a      	add	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4413      	add	r3, r2
 8000512:	4a23      	ldr	r2, [pc, #140]	@ (80005a0 <WS2812_Refresh+0xb0>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	70fb      	strb	r3, [r7, #3]

            // Send each bit (MSB first)
            for (int bit = 7; bit >= 0; bit--) {
 8000518:	2307      	movs	r3, #7
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	e014      	b.n	8000548 <WS2812_Refresh+0x58>
                LEDBuffer[pos++] = (byte & (1 << bit)) ? 56 : 28;
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	fa42 f303 	asr.w	r3, r2, r3
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <WS2812_Refresh+0x42>
 800052e:	2138      	movs	r1, #56	@ 0x38
 8000530:	e000      	b.n	8000534 <WS2812_Refresh+0x44>
 8000532:	211c      	movs	r1, #28
 8000534:	8afb      	ldrh	r3, [r7, #22]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	82fa      	strh	r2, [r7, #22]
 800053a:	461a      	mov	r2, r3
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <WS2812_Refresh+0xb4>)
 800053e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (int bit = 7; bit >= 0; bit--) {
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	3b01      	subs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dae7      	bge.n	800051e <WS2812_Refresh+0x2e>
        for (int color = 0; color < 3; color++) {
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3301      	adds	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b02      	cmp	r3, #2
 8000558:	ddd5      	ble.n	8000506 <WS2812_Refresh+0x16>
    for (int led = 0; led < NUM_LEDS; led++) {
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	2b0f      	cmp	r3, #15
 8000564:	ddcc      	ble.n	8000500 <WS2812_Refresh+0x10>
            }
        }
    }

    // Add reset pulse (all zeros)
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 8000566:	8afb      	ldrh	r3, [r7, #22]
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e00a      	b.n	8000582 <WS2812_Refresh+0x92>
        LEDBuffer[pos++] = 0;
 800056c:	8afb      	ldrh	r3, [r7, #22]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	82fa      	strh	r2, [r7, #22]
 8000572:	461a      	mov	r2, r3
 8000574:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <WS2812_Refresh+0xb4>)
 8000576:	2100      	movs	r1, #0
 8000578:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f5b3 7fd9 	cmp.w	r3, #434	@ 0x1b2
 8000588:	dbf0      	blt.n	800056c <WS2812_Refresh+0x7c>
    }

    // Start DMA transfer
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)LEDBuffer, LED_BUFFER_SIZE);
 800058a:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <WS2812_Refresh+0xb4>)
 8000590:	2104      	movs	r1, #4
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <WS2812_Refresh+0xb8>)
 8000594:	f004 f882 	bl	800469c <HAL_TIM_PWM_Start_DMA>
}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	240003e0 	.word	0x240003e0
 80005a4:	2400007c 	.word	0x2400007c
 80005a8:	24000410 	.word	0x24000410

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 80005b2:	f000 fb53 	bl	8000c5c <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80005b6:	f000 f8a5 	bl	8000704 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005ba:	f7ff fead 	bl	8000318 <MX_GPIO_Init>
    MX_DMA_Init();
 80005be:	f7ff fe8b 	bl	80002d8 <MX_DMA_Init>
    MX_TIM3_Init();
 80005c2:	f000 fa09 	bl	80009d8 <MX_TIM3_Init>

    /* Define LED colors */
    uint8_t redShade[3] = {0x40, 0x00, 0x00};   // Shade of red (GRB format)
 80005c6:	4a4a      	ldr	r2, [pc, #296]	@ (80006f0 <main+0x144>)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	4611      	mov	r1, r2
 80005d0:	8019      	strh	r1, [r3, #0]
 80005d2:	3302      	adds	r3, #2
 80005d4:	0c12      	lsrs	r2, r2, #16
 80005d6:	701a      	strb	r2, [r3, #0]
    uint8_t currentColor[3] = {0x6B, 0x00, 0x3C}; // Current color (GRB format)
 80005d8:	4a46      	ldr	r2, [pc, #280]	@ (80006f4 <main+0x148>)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	4611      	mov	r1, r2
 80005e0:	8019      	strh	r1, [r3, #0]
 80005e2:	3302      	adds	r3, #2
 80005e4:	0c12      	lsrs	r2, r2, #16
 80005e6:	701a      	strb	r2, [r3, #0]
    uint8_t greenShade[3] = {0x00, 0x40, 0x00}; // Shade of green (GRB format)
 80005e8:	4a43      	ldr	r2, [pc, #268]	@ (80006f8 <main+0x14c>)
 80005ea:	463b      	mov	r3, r7
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	4611      	mov	r1, r2
 80005f0:	8019      	strh	r1, [r3, #0]
 80005f2:	3302      	adds	r3, #2
 80005f4:	0c12      	lsrs	r2, r2, #16
 80005f6:	701a      	strb	r2, [r3, #0]

    /* Infinite loop */
    while (1)
    {
        // Loop through cycles with different delays
        for (float delay = 1.0; delay >= 0.25; delay /= 2)
 80005f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e06d      	b.n	80006dc <main+0x130>
        {
            // Loop through all LEDs
            for (int i = 0; i < NUM_LEDS; i++)
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	e040      	b.n	8000688 <main+0xdc>
            {
                // Set LED color based on position
                if (i % 3 == 0)
 8000606:	6939      	ldr	r1, [r7, #16]
 8000608:	4b3c      	ldr	r3, [pc, #240]	@ (80006fc <main+0x150>)
 800060a:	fb83 3201 	smull	r3, r2, r3, r1
 800060e:	17cb      	asrs	r3, r1, #31
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	4613      	mov	r3, r2
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	4413      	add	r3, r2
 8000618:	1aca      	subs	r2, r1, r3
 800061a:	2a00      	cmp	r2, #0
 800061c:	d107      	bne.n	800062e <main+0x82>
                    WS2812_SetColor(i, redShade[0], redShade[1], redShade[2]);
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	b2d8      	uxtb	r0, r3
 8000622:	7a39      	ldrb	r1, [r7, #8]
 8000624:	7a7a      	ldrb	r2, [r7, #9]
 8000626:	7abb      	ldrb	r3, [r7, #10]
 8000628:	f7ff ff24 	bl	8000474 <WS2812_SetColor>
 800062c:	e01a      	b.n	8000664 <main+0xb8>
                else if (i % 3 == 1)
 800062e:	6939      	ldr	r1, [r7, #16]
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <main+0x150>)
 8000632:	fb83 3201 	smull	r3, r2, r3, r1
 8000636:	17cb      	asrs	r3, r1, #31
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	1aca      	subs	r2, r1, r3
 8000642:	2a01      	cmp	r2, #1
 8000644:	d107      	bne.n	8000656 <main+0xaa>
                    WS2812_SetColor(i, currentColor[0], currentColor[1], currentColor[2]);
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	b2d8      	uxtb	r0, r3
 800064a:	7939      	ldrb	r1, [r7, #4]
 800064c:	797a      	ldrb	r2, [r7, #5]
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	f7ff ff10 	bl	8000474 <WS2812_SetColor>
 8000654:	e006      	b.n	8000664 <main+0xb8>
                else
                    WS2812_SetColor(i, greenShade[0], greenShade[1], greenShade[2]);
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	7839      	ldrb	r1, [r7, #0]
 800065c:	787a      	ldrb	r2, [r7, #1]
 800065e:	78bb      	ldrb	r3, [r7, #2]
 8000660:	f7ff ff08 	bl	8000474 <WS2812_SetColor>

                // Refresh LED strip
                WS2812_Refresh();
 8000664:	f7ff ff44 	bl	80004f0 <WS2812_Refresh>
                HAL_Delay((int)(delay * 1000)); // Delay in milliseconds
 8000668:	edd7 7a05 	vldr	s15, [r7, #20]
 800066c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000700 <main+0x154>
 8000670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000678:	ee17 3a90 	vmov	r3, s15
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fb7f 	bl	8000d80 <HAL_Delay>
            for (int i = 0; i < NUM_LEDS; i++)
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	3301      	adds	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	ddbb      	ble.n	8000606 <main+0x5a>
            }

            // Clear all LEDs after a full cycle
            for (int i = 0; i < NUM_LEDS; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e009      	b.n	80006a8 <main+0xfc>
            {
                WS2812_SetColor(i, 0, 0, 0); // Turn off LED
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	b2d8      	uxtb	r0, r3
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	f7ff fee9 	bl	8000474 <WS2812_SetColor>
            for (int i = 0; i < NUM_LEDS; i++)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b0f      	cmp	r3, #15
 80006ac:	ddf2      	ble.n	8000694 <main+0xe8>
            }
            WS2812_Refresh();
 80006ae:	f7ff ff1f 	bl	80004f0 <WS2812_Refresh>
            HAL_Delay((int)(delay * 1000)); // Add a gap before the next cycle
 80006b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80006b6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000700 <main+0x154>
 80006ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006c2:	ee17 3a90 	vmov	r3, s15
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fb5a 	bl	8000d80 <HAL_Delay>
        for (float delay = 1.0; delay >= 0.25; delay /= 2)
 80006cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80006d0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80006d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d8:	edc7 7a05 	vstr	s15, [r7, #20]
 80006dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e0:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80006e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ec:	da88      	bge.n	8000600 <main+0x54>
 80006ee:	e783      	b.n	80005f8 <main+0x4c>
 80006f0:	080060e0 	.word	0x080060e0
 80006f4:	080060e4 	.word	0x080060e4
 80006f8:	080060e8 	.word	0x080060e8
 80006fc:	55555556 	.word	0x55555556
 8000700:	447a0000 	.word	0x447a0000

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	@ 0x70
 8000708:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	224c      	movs	r2, #76	@ 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f005 f9ac 	bl	8005a70 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 f9a6 	bl	8005a70 <memset>

    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f002 ff3d 	bl	80035a4 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <SystemClock_Config+0xcc>)
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <SystemClock_Config+0xcc>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <SystemClock_Config+0xcc>)
 800073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xd0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000774:	2301      	movs	r3, #1
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2340      	movs	r3, #64	@ 0x40
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	4618      	mov	r0, r3
 8000786:	f002 ff47 	bl	8003618 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x90>
    {
        Error_Handler();
 8000790:	f000 f822 	bl	80007d8 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                                |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2101      	movs	r1, #1
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fb87 	bl	8003ecc <HAL_RCC_ClockConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 80007c4:	f000 f808 	bl	80007d8 <Error_Handler>
    }
}
 80007c8:	bf00      	nop
 80007ca:	3770      	adds	r7, #112	@ 0x70
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800

080007d8 <Error_Handler>:

/**
  * @brief Error handler
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
    // Infinite loop
    while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x4>

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_MspInit+0x30>)
 80007e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007ec:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <HAL_MspInit+0x30>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_MspInit+0x30>)
 80007f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	58024400 	.word	0x58024400

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 fa69 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000878:	4802      	ldr	r0, [pc, #8]	@ (8000884 <DMA1_Stream0_IRQHandler+0x10>)
 800087a:	f001 f987 	bl	8001b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2400045c 	.word	0x2400045c

08000888 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 f9d3 	bl	8000c38 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800089c:	4b37      	ldr	r3, [pc, #220]	@ (800097c <SystemInit+0xe4>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a2:	4a36      	ldr	r2, [pc, #216]	@ (800097c <SystemInit+0xe4>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ac:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <SystemInit+0xe8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	2b06      	cmp	r3, #6
 80008b6:	d807      	bhi.n	80008c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008b8:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <SystemInit+0xe8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f023 030f 	bic.w	r3, r3, #15
 80008c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000980 <SystemInit+0xe8>)
 80008c2:	f043 0307 	orr.w	r3, r3, #7
 80008c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <SystemInit+0xec>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <SystemInit+0xec>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <SystemInit+0xec>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <SystemInit+0xec>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4929      	ldr	r1, [pc, #164]	@ (8000984 <SystemInit+0xec>)
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SystemInit+0xf0>)
 80008e2:	4013      	ands	r3, r2
 80008e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <SystemInit+0xe8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <SystemInit+0xe8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f023 030f 	bic.w	r3, r3, #15
 80008fa:	4a21      	ldr	r2, [pc, #132]	@ (8000980 <SystemInit+0xe8>)
 80008fc:	f043 0307 	orr.w	r3, r3, #7
 8000900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000902:	4b20      	ldr	r3, [pc, #128]	@ (8000984 <SystemInit+0xec>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000908:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <SystemInit+0xec>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <SystemInit+0xec>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <SystemInit+0xec>)
 8000916:	4a1d      	ldr	r2, [pc, #116]	@ (800098c <SystemInit+0xf4>)
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <SystemInit+0xec>)
 800091c:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <SystemInit+0xf8>)
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <SystemInit+0xec>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <SystemInit+0xfc>)
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <SystemInit+0xec>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <SystemInit+0xec>)
 800092e:	4a19      	ldr	r2, [pc, #100]	@ (8000994 <SystemInit+0xfc>)
 8000930:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <SystemInit+0xec>)
 8000934:	2200      	movs	r2, #0
 8000936:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <SystemInit+0xec>)
 800093a:	4a16      	ldr	r2, [pc, #88]	@ (8000994 <SystemInit+0xfc>)
 800093c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <SystemInit+0xec>)
 8000940:	2200      	movs	r2, #0
 8000942:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <SystemInit+0xec>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0e      	ldr	r2, [pc, #56]	@ (8000984 <SystemInit+0xec>)
 800094a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800094e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <SystemInit+0xec>)
 8000952:	2200      	movs	r2, #0
 8000954:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <SystemInit+0x100>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <SystemInit+0x104>)
 800095c:	4013      	ands	r3, r2
 800095e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000962:	d202      	bcs.n	800096a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <SystemInit+0x108>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <SystemInit+0x10c>)
 800096c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000970:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00
 8000980:	52002000 	.word	0x52002000
 8000984:	58024400 	.word	0x58024400
 8000988:	eaf6ed7f 	.word	0xeaf6ed7f
 800098c:	02020200 	.word	0x02020200
 8000990:	01ff0000 	.word	0x01ff0000
 8000994:	01010280 	.word	0x01010280
 8000998:	5c001000 	.word	0x5c001000
 800099c:	ffff0000 	.word	0xffff0000
 80009a0:	51008108 	.word	0x51008108
 80009a4:	52004000 	.word	0x52004000

080009a8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <ExitRun0Mode+0x2c>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	4a08      	ldr	r2, [pc, #32]	@ (80009d4 <ExitRun0Mode+0x2c>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80009b8:	bf00      	nop
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <ExitRun0Mode+0x2c>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f9      	beq.n	80009ba <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	58024800 	.word	0x58024800

080009d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	@ 0x38
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac0 <MX_TIM3_Init+0xe8>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a1e:	224f      	movs	r2, #79	@ 0x4f
 8000a20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a2e:	4823      	ldr	r0, [pc, #140]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a30:	f003 fd7c 	bl	800452c <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a3a:	f7ff fecd 	bl	80007d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	481c      	ldr	r0, [pc, #112]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a4c:	f004 f960 	bl	8004d10 <HAL_TIM_ConfigClockSource>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a56:	f7ff febf 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a5a:	4818      	ldr	r0, [pc, #96]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a5c:	f003 fdbd 	bl	80045da <HAL_TIM_PWM_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a66:	f7ff feb7 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4810      	ldr	r0, [pc, #64]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000a7a:	f004 ff6b 	bl	8005954 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a84:	f7ff fea8 	bl	80007d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a88:	2360      	movs	r3, #96	@ 0x60
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4807      	ldr	r0, [pc, #28]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000aa0:	f004 f822 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000aaa:	f7ff fe95 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aae:	4803      	ldr	r0, [pc, #12]	@ (8000abc <MX_TIM3_Init+0xe4>)
 8000ab0:	f000 f85c 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 8000ab4:	bf00      	nop
 8000ab6:	3738      	adds	r7, #56	@ 0x38
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000410 	.word	0x24000410
 8000ac0:	40000400 	.word	0x40000400

08000ac4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a22      	ldr	r2, [pc, #136]	@ (8000b5c <HAL_TIM_Base_MspInit+0x98>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d13d      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad6:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <HAL_TIM_Base_MspInit+0x9c>)
 8000ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000adc:	4a20      	ldr	r2, [pc, #128]	@ (8000b60 <HAL_TIM_Base_MspInit+0x9c>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <HAL_TIM_Base_MspInit+0x9c>)
 8000ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream0;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000af6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b68 <HAL_TIM_Base_MspInit+0xa4>)
 8000af8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000afc:	2218      	movs	r2, #24
 8000afe:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b00:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b02:	2240      	movs	r2, #64	@ 0x40
 8000b04:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b12:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b1a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b22:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000b36:	480b      	ldr	r0, [pc, #44]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b38:	f000 fa62 	bl	8001000 <HAL_DMA_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000b42:	f7ff fe49 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b4c:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <HAL_TIM_Base_MspInit+0xa0>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40000400 	.word	0x40000400
 8000b60:	58024400 	.word	0x58024400
 8000b64:	2400045c 	.word	0x2400045c
 8000b68:	40020010 	.word	0x40020010

08000b6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d11e      	bne.n	8000bcc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bac:	2320      	movs	r3, #32
 8000bae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_TIM_MspPostInit+0x70>)
 8000bc8:	f002 fb22 	bl	8003210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40000400 	.word	0x40000400
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	58020400 	.word	0x58020400

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000c1c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000be4:	f7ff fee0 	bl	80009a8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f7ff fe56 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c12:	f004 ff3b 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fcc9 	bl	80005ac <main>
  bx  lr
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c24:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000c28:	080079c8 	.word	0x080079c8
  ldr r2, =_sbss
 8000c2c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000c30:	24000618 	.word	0x24000618

08000c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC3_IRQHandler>
	...

08000c38 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <BSP_PB_IRQHandler+0x20>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fab0 	bl	80031b0 <HAL_EXTI_IRQHandler>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	240004d4 	.word	0x240004d4

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 f98c 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c68:	f003 fae6 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_Init+0x68>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	0a1b      	lsrs	r3, r3, #8
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	4913      	ldr	r1, [pc, #76]	@ (8000cc8 <HAL_Init+0x6c>)
 8000c7a:	5ccb      	ldrb	r3, [r1, r3]
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	fa22 f303 	lsr.w	r3, r2, r3
 8000c84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_Init+0x68>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc8 <HAL_Init+0x6c>)
 8000c90:	5cd3      	ldrb	r3, [r2, r3]
 8000c92:	f003 031f 	and.w	r3, r3, #31
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <HAL_Init+0x70>)
 8000c9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd0 <HAL_Init+0x74>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f814 	bl	8000cd4 <HAL_InitTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e002      	b.n	8000cbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb6:	f7ff fd93 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	080060ec 	.word	0x080060ec
 8000ccc:	24000004 	.word	0x24000004
 8000cd0:	24000000 	.word	0x24000000

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_InitTick+0x60>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e021      	b.n	8000d2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <HAL_InitTick+0x64>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_InitTick+0x60>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f971 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 f93b 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <HAL_InitTick+0x68>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2400000c 	.word	0x2400000c
 8000d38:	24000000 	.word	0x24000000
 8000d3c:	24000008 	.word	0x24000008

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2400000c 	.word	0x2400000c
 8000d64:	240004dc 	.word	0x240004dc

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	240004dc 	.word	0x240004dc

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffde 	bl	8000d68 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2400000c 	.word	0x2400000c

08000dc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetREVID+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	0c1b      	lsrs	r3, r3, #16
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	5c001000 	.word	0x5c001000

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x40>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00
 8000e24:	05fa0000 	.word	0x05fa0000

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff40 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5f 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff33 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa4 	bl	8000f3c <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff feae 	bl	8000d68 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e316      	b.n	8001646 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a66      	ldr	r2, [pc, #408]	@ (80011b8 <HAL_DMA_Init+0x1b8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d04a      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a65      	ldr	r2, [pc, #404]	@ (80011bc <HAL_DMA_Init+0x1bc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d045      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a63      	ldr	r2, [pc, #396]	@ (80011c0 <HAL_DMA_Init+0x1c0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d040      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a62      	ldr	r2, [pc, #392]	@ (80011c4 <HAL_DMA_Init+0x1c4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d03b      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a60      	ldr	r2, [pc, #384]	@ (80011c8 <HAL_DMA_Init+0x1c8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d036      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a5f      	ldr	r2, [pc, #380]	@ (80011cc <HAL_DMA_Init+0x1cc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d031      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a5d      	ldr	r2, [pc, #372]	@ (80011d0 <HAL_DMA_Init+0x1d0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d02c      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a5c      	ldr	r2, [pc, #368]	@ (80011d4 <HAL_DMA_Init+0x1d4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d027      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a5a      	ldr	r2, [pc, #360]	@ (80011d8 <HAL_DMA_Init+0x1d8>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d022      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a59      	ldr	r2, [pc, #356]	@ (80011dc <HAL_DMA_Init+0x1dc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d01d      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a57      	ldr	r2, [pc, #348]	@ (80011e0 <HAL_DMA_Init+0x1e0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d018      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a56      	ldr	r2, [pc, #344]	@ (80011e4 <HAL_DMA_Init+0x1e4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a54      	ldr	r2, [pc, #336]	@ (80011e8 <HAL_DMA_Init+0x1e8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00e      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a53      	ldr	r2, [pc, #332]	@ (80011ec <HAL_DMA_Init+0x1ec>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d009      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a51      	ldr	r2, [pc, #324]	@ (80011f0 <HAL_DMA_Init+0x1f0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d004      	beq.n	80010b8 <HAL_DMA_Init+0xb8>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a50      	ldr	r2, [pc, #320]	@ (80011f4 <HAL_DMA_Init+0x1f4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d101      	bne.n	80010bc <HAL_DMA_Init+0xbc>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_DMA_Init+0xbe>
 80010bc:	2300      	movs	r3, #0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 813b 	beq.w	800133a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a37      	ldr	r2, [pc, #220]	@ (80011b8 <HAL_DMA_Init+0x1b8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d04a      	beq.n	8001174 <HAL_DMA_Init+0x174>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a36      	ldr	r2, [pc, #216]	@ (80011bc <HAL_DMA_Init+0x1bc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d045      	beq.n	8001174 <HAL_DMA_Init+0x174>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a34      	ldr	r2, [pc, #208]	@ (80011c0 <HAL_DMA_Init+0x1c0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d040      	beq.n	8001174 <HAL_DMA_Init+0x174>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a33      	ldr	r2, [pc, #204]	@ (80011c4 <HAL_DMA_Init+0x1c4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d03b      	beq.n	8001174 <HAL_DMA_Init+0x174>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a31      	ldr	r2, [pc, #196]	@ (80011c8 <HAL_DMA_Init+0x1c8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d036      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a30      	ldr	r2, [pc, #192]	@ (80011cc <HAL_DMA_Init+0x1cc>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d031      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a2e      	ldr	r2, [pc, #184]	@ (80011d0 <HAL_DMA_Init+0x1d0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d02c      	beq.n	8001174 <HAL_DMA_Init+0x174>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a2d      	ldr	r2, [pc, #180]	@ (80011d4 <HAL_DMA_Init+0x1d4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d027      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a2b      	ldr	r2, [pc, #172]	@ (80011d8 <HAL_DMA_Init+0x1d8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d022      	beq.n	8001174 <HAL_DMA_Init+0x174>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a2a      	ldr	r2, [pc, #168]	@ (80011dc <HAL_DMA_Init+0x1dc>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d01d      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a28      	ldr	r2, [pc, #160]	@ (80011e0 <HAL_DMA_Init+0x1e0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d018      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a27      	ldr	r2, [pc, #156]	@ (80011e4 <HAL_DMA_Init+0x1e4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d013      	beq.n	8001174 <HAL_DMA_Init+0x174>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a25      	ldr	r2, [pc, #148]	@ (80011e8 <HAL_DMA_Init+0x1e8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00e      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <HAL_DMA_Init+0x1ec>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d009      	beq.n	8001174 <HAL_DMA_Init+0x174>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a22      	ldr	r2, [pc, #136]	@ (80011f0 <HAL_DMA_Init+0x1f0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d004      	beq.n	8001174 <HAL_DMA_Init+0x174>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <HAL_DMA_Init+0x1f4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d108      	bne.n	8001186 <HAL_DMA_Init+0x186>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e007      	b.n	8001196 <HAL_DMA_Init+0x196>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001196:	e02f      	b.n	80011f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001198:	f7ff fde6 	bl	8000d68 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d928      	bls.n	80011f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e246      	b.n	8001646 <HAL_DMA_Init+0x646>
 80011b8:	40020010 	.word	0x40020010
 80011bc:	40020028 	.word	0x40020028
 80011c0:	40020040 	.word	0x40020040
 80011c4:	40020058 	.word	0x40020058
 80011c8:	40020070 	.word	0x40020070
 80011cc:	40020088 	.word	0x40020088
 80011d0:	400200a0 	.word	0x400200a0
 80011d4:	400200b8 	.word	0x400200b8
 80011d8:	40020410 	.word	0x40020410
 80011dc:	40020428 	.word	0x40020428
 80011e0:	40020440 	.word	0x40020440
 80011e4:	40020458 	.word	0x40020458
 80011e8:	40020470 	.word	0x40020470
 80011ec:	40020488 	.word	0x40020488
 80011f0:	400204a0 	.word	0x400204a0
 80011f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1c8      	bne.n	8001198 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4b83      	ldr	r3, [pc, #524]	@ (8001420 <HAL_DMA_Init+0x420>)
 8001212:	4013      	ands	r3, r2
 8001214:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800121e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001236:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	2b04      	cmp	r3, #4
 800124a:	d107      	bne.n	800125c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	4313      	orrs	r3, r2
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800125c:	4b71      	ldr	r3, [pc, #452]	@ (8001424 <HAL_DMA_Init+0x424>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b71      	ldr	r3, [pc, #452]	@ (8001428 <HAL_DMA_Init+0x428>)
 8001262:	4013      	ands	r3, r2
 8001264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001268:	d328      	bcc.n	80012bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b28      	cmp	r3, #40	@ 0x28
 8001270:	d903      	bls.n	800127a <HAL_DMA_Init+0x27a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b2e      	cmp	r3, #46	@ 0x2e
 8001278:	d917      	bls.n	80012aa <HAL_DMA_Init+0x2aa>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001280:	d903      	bls.n	800128a <HAL_DMA_Init+0x28a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b42      	cmp	r3, #66	@ 0x42
 8001288:	d90f      	bls.n	80012aa <HAL_DMA_Init+0x2aa>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b46      	cmp	r3, #70	@ 0x46
 8001290:	d903      	bls.n	800129a <HAL_DMA_Init+0x29a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b48      	cmp	r3, #72	@ 0x48
 8001298:	d907      	bls.n	80012aa <HAL_DMA_Init+0x2aa>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b4e      	cmp	r3, #78	@ 0x4e
 80012a0:	d905      	bls.n	80012ae <HAL_DMA_Init+0x2ae>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b52      	cmp	r3, #82	@ 0x52
 80012a8:	d801      	bhi.n	80012ae <HAL_DMA_Init+0x2ae>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_DMA_Init+0x2b0>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f023 0307 	bic.w	r3, r3, #7
 80012d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	4313      	orrs	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d117      	bne.n	8001316 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00e      	beq.n	8001316 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f001 fdcf 	bl	8002e9c <DMA_CheckFifoParam>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2240      	movs	r2, #64	@ 0x40
 8001308:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e197      	b.n	8001646 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f001 fd0a 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 8001324:	4603      	mov	r3, r0
 8001326:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	223f      	movs	r2, #63	@ 0x3f
 8001332:	409a      	lsls	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	e0cd      	b.n	80014d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3b      	ldr	r2, [pc, #236]	@ (800142c <HAL_DMA_Init+0x42c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d022      	beq.n	800138a <HAL_DMA_Init+0x38a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a39      	ldr	r2, [pc, #228]	@ (8001430 <HAL_DMA_Init+0x430>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01d      	beq.n	800138a <HAL_DMA_Init+0x38a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a38      	ldr	r2, [pc, #224]	@ (8001434 <HAL_DMA_Init+0x434>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d018      	beq.n	800138a <HAL_DMA_Init+0x38a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a36      	ldr	r2, [pc, #216]	@ (8001438 <HAL_DMA_Init+0x438>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_DMA_Init+0x38a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a35      	ldr	r2, [pc, #212]	@ (800143c <HAL_DMA_Init+0x43c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d00e      	beq.n	800138a <HAL_DMA_Init+0x38a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <HAL_DMA_Init+0x440>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d009      	beq.n	800138a <HAL_DMA_Init+0x38a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a32      	ldr	r2, [pc, #200]	@ (8001444 <HAL_DMA_Init+0x444>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d004      	beq.n	800138a <HAL_DMA_Init+0x38a>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a30      	ldr	r2, [pc, #192]	@ (8001448 <HAL_DMA_Init+0x448>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_DMA_Init+0x38e>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_DMA_Init+0x390>
 800138e:	2300      	movs	r3, #0
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8097 	beq.w	80014c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a24      	ldr	r2, [pc, #144]	@ (800142c <HAL_DMA_Init+0x42c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d021      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <HAL_DMA_Init+0x430>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01c      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <HAL_DMA_Init+0x434>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d017      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <HAL_DMA_Init+0x438>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d012      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_DMA_Init+0x43c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001440 <HAL_DMA_Init+0x440>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_DMA_Init+0x444>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d003      	beq.n	80013e4 <HAL_DMA_Init+0x3e4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <HAL_DMA_Init+0x448>)
 80013e2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2202      	movs	r2, #2
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_DMA_Init+0x44c>)
 8001400:	4013      	ands	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b40      	cmp	r3, #64	@ 0x40
 800140a:	d021      	beq.n	8001450 <HAL_DMA_Init+0x450>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b80      	cmp	r3, #128	@ 0x80
 8001412:	d102      	bne.n	800141a <HAL_DMA_Init+0x41a>
 8001414:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001418:	e01b      	b.n	8001452 <HAL_DMA_Init+0x452>
 800141a:	2300      	movs	r3, #0
 800141c:	e019      	b.n	8001452 <HAL_DMA_Init+0x452>
 800141e:	bf00      	nop
 8001420:	fe10803f 	.word	0xfe10803f
 8001424:	5c001000 	.word	0x5c001000
 8001428:	ffff0000 	.word	0xffff0000
 800142c:	58025408 	.word	0x58025408
 8001430:	5802541c 	.word	0x5802541c
 8001434:	58025430 	.word	0x58025430
 8001438:	58025444 	.word	0x58025444
 800143c:	58025458 	.word	0x58025458
 8001440:	5802546c 	.word	0x5802546c
 8001444:	58025480 	.word	0x58025480
 8001448:	58025494 	.word	0x58025494
 800144c:	fffe000f 	.word	0xfffe000f
 8001450:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68d2      	ldr	r2, [r2, #12]
 8001456:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001478:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001480:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b6e      	ldr	r3, [pc, #440]	@ (8001650 <HAL_DMA_Init+0x650>)
 8001498:	4413      	add	r3, r2
 800149a:	4a6e      	ldr	r2, [pc, #440]	@ (8001654 <HAL_DMA_Init+0x654>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	009a      	lsls	r2, r3, #2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f001 fc45 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 80014ae:	4603      	mov	r3, r0
 80014b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2201      	movs	r2, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	e008      	b.n	80014d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2240      	movs	r2, #64	@ 0x40
 80014c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0b7      	b.n	8001646 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a5f      	ldr	r2, [pc, #380]	@ (8001658 <HAL_DMA_Init+0x658>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d072      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a5d      	ldr	r2, [pc, #372]	@ (800165c <HAL_DMA_Init+0x65c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d06d      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001660 <HAL_DMA_Init+0x660>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d068      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <HAL_DMA_Init+0x664>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d063      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a59      	ldr	r2, [pc, #356]	@ (8001668 <HAL_DMA_Init+0x668>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d05e      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a57      	ldr	r2, [pc, #348]	@ (800166c <HAL_DMA_Init+0x66c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d059      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a56      	ldr	r2, [pc, #344]	@ (8001670 <HAL_DMA_Init+0x670>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d054      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a54      	ldr	r2, [pc, #336]	@ (8001674 <HAL_DMA_Init+0x674>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d04f      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a53      	ldr	r2, [pc, #332]	@ (8001678 <HAL_DMA_Init+0x678>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04a      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a51      	ldr	r2, [pc, #324]	@ (800167c <HAL_DMA_Init+0x67c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d045      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a50      	ldr	r2, [pc, #320]	@ (8001680 <HAL_DMA_Init+0x680>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d040      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a4e      	ldr	r2, [pc, #312]	@ (8001684 <HAL_DMA_Init+0x684>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d03b      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_DMA_Init+0x688>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d036      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a4b      	ldr	r2, [pc, #300]	@ (800168c <HAL_DMA_Init+0x68c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d031      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a4a      	ldr	r2, [pc, #296]	@ (8001690 <HAL_DMA_Init+0x690>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d02c      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a48      	ldr	r2, [pc, #288]	@ (8001694 <HAL_DMA_Init+0x694>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d027      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a47      	ldr	r2, [pc, #284]	@ (8001698 <HAL_DMA_Init+0x698>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d022      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a45      	ldr	r2, [pc, #276]	@ (800169c <HAL_DMA_Init+0x69c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01d      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a44      	ldr	r2, [pc, #272]	@ (80016a0 <HAL_DMA_Init+0x6a0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d018      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a42      	ldr	r2, [pc, #264]	@ (80016a4 <HAL_DMA_Init+0x6a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a41      	ldr	r2, [pc, #260]	@ (80016a8 <HAL_DMA_Init+0x6a8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00e      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a3f      	ldr	r2, [pc, #252]	@ (80016ac <HAL_DMA_Init+0x6ac>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d009      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a3e      	ldr	r2, [pc, #248]	@ (80016b0 <HAL_DMA_Init+0x6b0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d004      	beq.n	80015c6 <HAL_DMA_Init+0x5c6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <HAL_DMA_Init+0x6b4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_DMA_Init+0x5ca>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_DMA_Init+0x5cc>
 80015ca:	2300      	movs	r3, #0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d032      	beq.n	8001636 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f001 fcdf 	bl	8002f94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b80      	cmp	r3, #128	@ 0x80
 80015dc:	d102      	bne.n	80015e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80015f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d010      	beq.n	8001624 <HAL_DMA_Init+0x624>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b08      	cmp	r3, #8
 8001608:	d80c      	bhi.n	8001624 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f001 fd5c 	bl	80030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	e008      	b.n	8001636 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	a7fdabf8 	.word	0xa7fdabf8
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	40020010 	.word	0x40020010
 800165c:	40020028 	.word	0x40020028
 8001660:	40020040 	.word	0x40020040
 8001664:	40020058 	.word	0x40020058
 8001668:	40020070 	.word	0x40020070
 800166c:	40020088 	.word	0x40020088
 8001670:	400200a0 	.word	0x400200a0
 8001674:	400200b8 	.word	0x400200b8
 8001678:	40020410 	.word	0x40020410
 800167c:	40020428 	.word	0x40020428
 8001680:	40020440 	.word	0x40020440
 8001684:	40020458 	.word	0x40020458
 8001688:	40020470 	.word	0x40020470
 800168c:	40020488 	.word	0x40020488
 8001690:	400204a0 	.word	0x400204a0
 8001694:	400204b8 	.word	0x400204b8
 8001698:	58025408 	.word	0x58025408
 800169c:	5802541c 	.word	0x5802541c
 80016a0:	58025430 	.word	0x58025430
 80016a4:	58025444 	.word	0x58025444
 80016a8:	58025458 	.word	0x58025458
 80016ac:	5802546c 	.word	0x5802546c
 80016b0:	58025480 	.word	0x58025480
 80016b4:	58025494 	.word	0x58025494

080016b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e226      	b.n	8001b22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_Start_IT+0x2a>
 80016de:	2302      	movs	r3, #2
 80016e0:	e21f      	b.n	8001b22 <HAL_DMA_Start_IT+0x46a>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	f040 820a 	bne.w	8001b0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a68      	ldr	r2, [pc, #416]	@ (80018ac <HAL_DMA_Start_IT+0x1f4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d04a      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a66      	ldr	r2, [pc, #408]	@ (80018b0 <HAL_DMA_Start_IT+0x1f8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d045      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a65      	ldr	r2, [pc, #404]	@ (80018b4 <HAL_DMA_Start_IT+0x1fc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d040      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a63      	ldr	r2, [pc, #396]	@ (80018b8 <HAL_DMA_Start_IT+0x200>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d03b      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a62      	ldr	r2, [pc, #392]	@ (80018bc <HAL_DMA_Start_IT+0x204>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d036      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a60      	ldr	r2, [pc, #384]	@ (80018c0 <HAL_DMA_Start_IT+0x208>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d031      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5f      	ldr	r2, [pc, #380]	@ (80018c4 <HAL_DMA_Start_IT+0x20c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d02c      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a5d      	ldr	r2, [pc, #372]	@ (80018c8 <HAL_DMA_Start_IT+0x210>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d027      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5c      	ldr	r2, [pc, #368]	@ (80018cc <HAL_DMA_Start_IT+0x214>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d022      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a5a      	ldr	r2, [pc, #360]	@ (80018d0 <HAL_DMA_Start_IT+0x218>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01d      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a59      	ldr	r2, [pc, #356]	@ (80018d4 <HAL_DMA_Start_IT+0x21c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d018      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a57      	ldr	r2, [pc, #348]	@ (80018d8 <HAL_DMA_Start_IT+0x220>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a56      	ldr	r2, [pc, #344]	@ (80018dc <HAL_DMA_Start_IT+0x224>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00e      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <HAL_DMA_Start_IT+0x228>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d009      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a53      	ldr	r2, [pc, #332]	@ (80018e4 <HAL_DMA_Start_IT+0x22c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d004      	beq.n	80017a6 <HAL_DMA_Start_IT+0xee>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a51      	ldr	r2, [pc, #324]	@ (80018e8 <HAL_DMA_Start_IT+0x230>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d108      	bne.n	80017b8 <HAL_DMA_Start_IT+0x100>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_DMA_Start_IT+0x110>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f001 f906 	bl	80029e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a34      	ldr	r2, [pc, #208]	@ (80018ac <HAL_DMA_Start_IT+0x1f4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d04a      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a33      	ldr	r2, [pc, #204]	@ (80018b0 <HAL_DMA_Start_IT+0x1f8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d045      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a31      	ldr	r2, [pc, #196]	@ (80018b4 <HAL_DMA_Start_IT+0x1fc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d040      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a30      	ldr	r2, [pc, #192]	@ (80018b8 <HAL_DMA_Start_IT+0x200>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d03b      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2e      	ldr	r2, [pc, #184]	@ (80018bc <HAL_DMA_Start_IT+0x204>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d036      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2d      	ldr	r2, [pc, #180]	@ (80018c0 <HAL_DMA_Start_IT+0x208>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d031      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2b      	ldr	r2, [pc, #172]	@ (80018c4 <HAL_DMA_Start_IT+0x20c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d02c      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2a      	ldr	r2, [pc, #168]	@ (80018c8 <HAL_DMA_Start_IT+0x210>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d027      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a28      	ldr	r2, [pc, #160]	@ (80018cc <HAL_DMA_Start_IT+0x214>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d022      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a27      	ldr	r2, [pc, #156]	@ (80018d0 <HAL_DMA_Start_IT+0x218>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d01d      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <HAL_DMA_Start_IT+0x21c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d018      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <HAL_DMA_Start_IT+0x220>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d013      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <HAL_DMA_Start_IT+0x224>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00e      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <HAL_DMA_Start_IT+0x228>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d009      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <HAL_DMA_Start_IT+0x22c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d004      	beq.n	8001874 <HAL_DMA_Start_IT+0x1bc>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <HAL_DMA_Start_IT+0x230>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_DMA_Start_IT+0x1c0>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_DMA_Start_IT+0x1c2>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d036      	beq.n	80018ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 021e 	bic.w	r2, r3, #30
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0216 	orr.w	r2, r2, #22
 8001890:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03e      	beq.n	8001918 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0208 	orr.w	r2, r2, #8
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e035      	b.n	8001918 <HAL_DMA_Start_IT+0x260>
 80018ac:	40020010 	.word	0x40020010
 80018b0:	40020028 	.word	0x40020028
 80018b4:	40020040 	.word	0x40020040
 80018b8:	40020058 	.word	0x40020058
 80018bc:	40020070 	.word	0x40020070
 80018c0:	40020088 	.word	0x40020088
 80018c4:	400200a0 	.word	0x400200a0
 80018c8:	400200b8 	.word	0x400200b8
 80018cc:	40020410 	.word	0x40020410
 80018d0:	40020428 	.word	0x40020428
 80018d4:	40020440 	.word	0x40020440
 80018d8:	40020458 	.word	0x40020458
 80018dc:	40020470 	.word	0x40020470
 80018e0:	40020488 	.word	0x40020488
 80018e4:	400204a0 	.word	0x400204a0
 80018e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 020e 	bic.w	r2, r3, #14
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 020a 	orr.w	r2, r2, #10
 80018fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0204 	orr.w	r2, r2, #4
 8001916:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a83      	ldr	r2, [pc, #524]	@ (8001b2c <HAL_DMA_Start_IT+0x474>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d072      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a82      	ldr	r2, [pc, #520]	@ (8001b30 <HAL_DMA_Start_IT+0x478>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d06d      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a80      	ldr	r2, [pc, #512]	@ (8001b34 <HAL_DMA_Start_IT+0x47c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d068      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b38 <HAL_DMA_Start_IT+0x480>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d063      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a7d      	ldr	r2, [pc, #500]	@ (8001b3c <HAL_DMA_Start_IT+0x484>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d05e      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b40 <HAL_DMA_Start_IT+0x488>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d059      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7a      	ldr	r2, [pc, #488]	@ (8001b44 <HAL_DMA_Start_IT+0x48c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d054      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a79      	ldr	r2, [pc, #484]	@ (8001b48 <HAL_DMA_Start_IT+0x490>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d04f      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a77      	ldr	r2, [pc, #476]	@ (8001b4c <HAL_DMA_Start_IT+0x494>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d04a      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a76      	ldr	r2, [pc, #472]	@ (8001b50 <HAL_DMA_Start_IT+0x498>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d045      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a74      	ldr	r2, [pc, #464]	@ (8001b54 <HAL_DMA_Start_IT+0x49c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d040      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a73      	ldr	r2, [pc, #460]	@ (8001b58 <HAL_DMA_Start_IT+0x4a0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d03b      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a71      	ldr	r2, [pc, #452]	@ (8001b5c <HAL_DMA_Start_IT+0x4a4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d036      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a70      	ldr	r2, [pc, #448]	@ (8001b60 <HAL_DMA_Start_IT+0x4a8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d031      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001b64 <HAL_DMA_Start_IT+0x4ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02c      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6d      	ldr	r2, [pc, #436]	@ (8001b68 <HAL_DMA_Start_IT+0x4b0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d027      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a6b      	ldr	r2, [pc, #428]	@ (8001b6c <HAL_DMA_Start_IT+0x4b4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d022      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001b70 <HAL_DMA_Start_IT+0x4b8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d01d      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a68      	ldr	r2, [pc, #416]	@ (8001b74 <HAL_DMA_Start_IT+0x4bc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d018      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a67      	ldr	r2, [pc, #412]	@ (8001b78 <HAL_DMA_Start_IT+0x4c0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a65      	ldr	r2, [pc, #404]	@ (8001b7c <HAL_DMA_Start_IT+0x4c4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00e      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a64      	ldr	r2, [pc, #400]	@ (8001b80 <HAL_DMA_Start_IT+0x4c8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a62      	ldr	r2, [pc, #392]	@ (8001b84 <HAL_DMA_Start_IT+0x4cc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_DMA_Start_IT+0x350>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a61      	ldr	r2, [pc, #388]	@ (8001b88 <HAL_DMA_Start_IT+0x4d0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_DMA_Start_IT+0x354>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_Start_IT+0x356>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d01a      	beq.n	8001a48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a37      	ldr	r2, [pc, #220]	@ (8001b2c <HAL_DMA_Start_IT+0x474>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d04a      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a36      	ldr	r2, [pc, #216]	@ (8001b30 <HAL_DMA_Start_IT+0x478>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d045      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a34      	ldr	r2, [pc, #208]	@ (8001b34 <HAL_DMA_Start_IT+0x47c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d040      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a33      	ldr	r2, [pc, #204]	@ (8001b38 <HAL_DMA_Start_IT+0x480>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d03b      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a31      	ldr	r2, [pc, #196]	@ (8001b3c <HAL_DMA_Start_IT+0x484>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d036      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a30      	ldr	r2, [pc, #192]	@ (8001b40 <HAL_DMA_Start_IT+0x488>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d031      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2e      	ldr	r2, [pc, #184]	@ (8001b44 <HAL_DMA_Start_IT+0x48c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02c      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a2d      	ldr	r2, [pc, #180]	@ (8001b48 <HAL_DMA_Start_IT+0x490>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d027      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001b4c <HAL_DMA_Start_IT+0x494>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d022      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b50 <HAL_DMA_Start_IT+0x498>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d01d      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a28      	ldr	r2, [pc, #160]	@ (8001b54 <HAL_DMA_Start_IT+0x49c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d018      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a27      	ldr	r2, [pc, #156]	@ (8001b58 <HAL_DMA_Start_IT+0x4a0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a25      	ldr	r2, [pc, #148]	@ (8001b5c <HAL_DMA_Start_IT+0x4a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00e      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <HAL_DMA_Start_IT+0x4a8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a22      	ldr	r2, [pc, #136]	@ (8001b64 <HAL_DMA_Start_IT+0x4ac>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d004      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x430>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <HAL_DMA_Start_IT+0x4b0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d108      	bne.n	8001afa <HAL_DMA_Start_IT+0x442>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e012      	b.n	8001b20 <HAL_DMA_Start_IT+0x468>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e009      	b.n	8001b20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020010 	.word	0x40020010
 8001b30:	40020028 	.word	0x40020028
 8001b34:	40020040 	.word	0x40020040
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	40020070 	.word	0x40020070
 8001b40:	40020088 	.word	0x40020088
 8001b44:	400200a0 	.word	0x400200a0
 8001b48:	400200b8 	.word	0x400200b8
 8001b4c:	40020410 	.word	0x40020410
 8001b50:	40020428 	.word	0x40020428
 8001b54:	40020440 	.word	0x40020440
 8001b58:	40020458 	.word	0x40020458
 8001b5c:	40020470 	.word	0x40020470
 8001b60:	40020488 	.word	0x40020488
 8001b64:	400204a0 	.word	0x400204a0
 8001b68:	400204b8 	.word	0x400204b8
 8001b6c:	58025408 	.word	0x58025408
 8001b70:	5802541c 	.word	0x5802541c
 8001b74:	58025430 	.word	0x58025430
 8001b78:	58025444 	.word	0x58025444
 8001b7c:	58025458 	.word	0x58025458
 8001b80:	5802546c 	.word	0x5802546c
 8001b84:	58025480 	.word	0x58025480
 8001b88:	58025494 	.word	0x58025494

08001b8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b98:	4b67      	ldr	r3, [pc, #412]	@ (8001d38 <HAL_DMA_IRQHandler+0x1ac>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a67      	ldr	r2, [pc, #412]	@ (8001d3c <HAL_DMA_IRQHandler+0x1b0>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0a9b      	lsrs	r3, r3, #10
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d40 <HAL_DMA_IRQHandler+0x1b4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d04a      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d44 <HAL_DMA_IRQHandler+0x1b8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d045      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d48 <HAL_DMA_IRQHandler+0x1bc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d040      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d4c <HAL_DMA_IRQHandler+0x1c0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d03b      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a59      	ldr	r2, [pc, #356]	@ (8001d50 <HAL_DMA_IRQHandler+0x1c4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d036      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a57      	ldr	r2, [pc, #348]	@ (8001d54 <HAL_DMA_IRQHandler+0x1c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a56      	ldr	r2, [pc, #344]	@ (8001d58 <HAL_DMA_IRQHandler+0x1cc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d02c      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a54      	ldr	r2, [pc, #336]	@ (8001d5c <HAL_DMA_IRQHandler+0x1d0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d027      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a53      	ldr	r2, [pc, #332]	@ (8001d60 <HAL_DMA_IRQHandler+0x1d4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	@ (8001d64 <HAL_DMA_IRQHandler+0x1d8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01d      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a50      	ldr	r2, [pc, #320]	@ (8001d68 <HAL_DMA_IRQHandler+0x1dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d018      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4e      	ldr	r2, [pc, #312]	@ (8001d6c <HAL_DMA_IRQHandler+0x1e0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d70 <HAL_DMA_IRQHandler+0x1e4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00e      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a4b      	ldr	r2, [pc, #300]	@ (8001d74 <HAL_DMA_IRQHandler+0x1e8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d009      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d78 <HAL_DMA_IRQHandler+0x1ec>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_IRQHandler+0xd2>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a48      	ldr	r2, [pc, #288]	@ (8001d7c <HAL_DMA_IRQHandler+0x1f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_DMA_IRQHandler+0xd6>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_IRQHandler+0xd8>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 842b 	beq.w	80024c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2208      	movs	r2, #8
 8001c74:	409a      	lsls	r2, r3
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80a2 	beq.w	8001dc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2e      	ldr	r2, [pc, #184]	@ (8001d40 <HAL_DMA_IRQHandler+0x1b4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d04a      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_DMA_IRQHandler+0x1b8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d045      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <HAL_DMA_IRQHandler+0x1bc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d040      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <HAL_DMA_IRQHandler+0x1c0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d03b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a28      	ldr	r2, [pc, #160]	@ (8001d50 <HAL_DMA_IRQHandler+0x1c4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d036      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a27      	ldr	r2, [pc, #156]	@ (8001d54 <HAL_DMA_IRQHandler+0x1c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d031      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a25      	ldr	r2, [pc, #148]	@ (8001d58 <HAL_DMA_IRQHandler+0x1cc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02c      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a24      	ldr	r2, [pc, #144]	@ (8001d5c <HAL_DMA_IRQHandler+0x1d0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d027      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_DMA_IRQHandler+0x1d4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_DMA_IRQHandler+0x1d8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_DMA_IRQHandler+0x1dc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_DMA_IRQHandler+0x1e0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_DMA_IRQHandler+0x1e4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_DMA_IRQHandler+0x1e8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_DMA_IRQHandler+0x1ec>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x194>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a18      	ldr	r2, [pc, #96]	@ (8001d7c <HAL_DMA_IRQHandler+0x1f0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d12f      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x1f4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	e02e      	b.n	8001d94 <HAL_DMA_IRQHandler+0x208>
 8001d36:	bf00      	nop
 8001d38:	24000000 	.word	0x24000000
 8001d3c:	1b4e81b5 	.word	0x1b4e81b5
 8001d40:	40020010 	.word	0x40020010
 8001d44:	40020028 	.word	0x40020028
 8001d48:	40020040 	.word	0x40020040
 8001d4c:	40020058 	.word	0x40020058
 8001d50:	40020070 	.word	0x40020070
 8001d54:	40020088 	.word	0x40020088
 8001d58:	400200a0 	.word	0x400200a0
 8001d5c:	400200b8 	.word	0x400200b8
 8001d60:	40020410 	.word	0x40020410
 8001d64:	40020428 	.word	0x40020428
 8001d68:	40020440 	.word	0x40020440
 8001d6c:	40020458 	.word	0x40020458
 8001d70:	40020470 	.word	0x40020470
 8001d74:	40020488 	.word	0x40020488
 8001d78:	400204a0 	.word	0x400204a0
 8001d7c:	400204b8 	.word	0x400204b8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d015      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	2208      	movs	r2, #8
 8001db2:	409a      	lsls	r2, r3
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06e      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a69      	ldr	r2, [pc, #420]	@ (8001f84 <HAL_DMA_IRQHandler+0x3f8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d04a      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a67      	ldr	r2, [pc, #412]	@ (8001f88 <HAL_DMA_IRQHandler+0x3fc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d045      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a66      	ldr	r2, [pc, #408]	@ (8001f8c <HAL_DMA_IRQHandler+0x400>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d040      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a64      	ldr	r2, [pc, #400]	@ (8001f90 <HAL_DMA_IRQHandler+0x404>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d03b      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a63      	ldr	r2, [pc, #396]	@ (8001f94 <HAL_DMA_IRQHandler+0x408>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d036      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a61      	ldr	r2, [pc, #388]	@ (8001f98 <HAL_DMA_IRQHandler+0x40c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d031      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a60      	ldr	r2, [pc, #384]	@ (8001f9c <HAL_DMA_IRQHandler+0x410>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d02c      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa0 <HAL_DMA_IRQHandler+0x414>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d027      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fa4 <HAL_DMA_IRQHandler+0x418>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d022      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa8 <HAL_DMA_IRQHandler+0x41c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01d      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5a      	ldr	r2, [pc, #360]	@ (8001fac <HAL_DMA_IRQHandler+0x420>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d018      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	@ (8001fb0 <HAL_DMA_IRQHandler+0x424>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_DMA_IRQHandler+0x428>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00e      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a55      	ldr	r2, [pc, #340]	@ (8001fb8 <HAL_DMA_IRQHandler+0x42c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d009      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a54      	ldr	r2, [pc, #336]	@ (8001fbc <HAL_DMA_IRQHandler+0x430>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x2ee>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a52      	ldr	r2, [pc, #328]	@ (8001fc0 <HAL_DMA_IRQHandler+0x434>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10a      	bne.n	8001e90 <HAL_DMA_IRQHandler+0x304>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e003      	b.n	8001e98 <HAL_DMA_IRQHandler+0x30c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 808f 	beq.w	8001fec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f84 <HAL_DMA_IRQHandler+0x3f8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d04a      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f88 <HAL_DMA_IRQHandler+0x3fc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d045      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a29      	ldr	r2, [pc, #164]	@ (8001f8c <HAL_DMA_IRQHandler+0x400>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d040      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a27      	ldr	r2, [pc, #156]	@ (8001f90 <HAL_DMA_IRQHandler+0x404>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d03b      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a26      	ldr	r2, [pc, #152]	@ (8001f94 <HAL_DMA_IRQHandler+0x408>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d036      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a24      	ldr	r2, [pc, #144]	@ (8001f98 <HAL_DMA_IRQHandler+0x40c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d031      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <HAL_DMA_IRQHandler+0x410>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d02c      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <HAL_DMA_IRQHandler+0x414>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d027      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <HAL_DMA_IRQHandler+0x418>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa8 <HAL_DMA_IRQHandler+0x41c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01d      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1d      	ldr	r2, [pc, #116]	@ (8001fac <HAL_DMA_IRQHandler+0x420>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d018      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <HAL_DMA_IRQHandler+0x424>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <HAL_DMA_IRQHandler+0x428>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00e      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	@ (8001fb8 <HAL_DMA_IRQHandler+0x42c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_DMA_IRQHandler+0x430>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d004      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x3e2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a15      	ldr	r2, [pc, #84]	@ (8001fc0 <HAL_DMA_IRQHandler+0x434>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12a      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x438>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	e023      	b.n	8001fcc <HAL_DMA_IRQHandler+0x440>
 8001f84:	40020010 	.word	0x40020010
 8001f88:	40020028 	.word	0x40020028
 8001f8c:	40020040 	.word	0x40020040
 8001f90:	40020058 	.word	0x40020058
 8001f94:	40020070 	.word	0x40020070
 8001f98:	40020088 	.word	0x40020088
 8001f9c:	400200a0 	.word	0x400200a0
 8001fa0:	400200b8 	.word	0x400200b8
 8001fa4:	40020410 	.word	0x40020410
 8001fa8:	40020428 	.word	0x40020428
 8001fac:	40020440 	.word	0x40020440
 8001fb0:	40020458 	.word	0x40020458
 8001fb4:	40020470 	.word	0x40020470
 8001fb8:	40020488 	.word	0x40020488
 8001fbc:	400204a0 	.word	0x400204a0
 8001fc0:	400204b8 	.word	0x400204b8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00d      	beq.n	8001fec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a6 	beq.w	800214e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a85      	ldr	r2, [pc, #532]	@ (800221c <HAL_DMA_IRQHandler+0x690>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04a      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a83      	ldr	r2, [pc, #524]	@ (8002220 <HAL_DMA_IRQHandler+0x694>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d045      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a82      	ldr	r2, [pc, #520]	@ (8002224 <HAL_DMA_IRQHandler+0x698>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d040      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a80      	ldr	r2, [pc, #512]	@ (8002228 <HAL_DMA_IRQHandler+0x69c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d03b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7f      	ldr	r2, [pc, #508]	@ (800222c <HAL_DMA_IRQHandler+0x6a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d036      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7d      	ldr	r2, [pc, #500]	@ (8002230 <HAL_DMA_IRQHandler+0x6a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d031      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7c      	ldr	r2, [pc, #496]	@ (8002234 <HAL_DMA_IRQHandler+0x6a8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d02c      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7a      	ldr	r2, [pc, #488]	@ (8002238 <HAL_DMA_IRQHandler+0x6ac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d027      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a79      	ldr	r2, [pc, #484]	@ (800223c <HAL_DMA_IRQHandler+0x6b0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a77      	ldr	r2, [pc, #476]	@ (8002240 <HAL_DMA_IRQHandler+0x6b4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a76      	ldr	r2, [pc, #472]	@ (8002244 <HAL_DMA_IRQHandler+0x6b8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a74      	ldr	r2, [pc, #464]	@ (8002248 <HAL_DMA_IRQHandler+0x6bc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a73      	ldr	r2, [pc, #460]	@ (800224c <HAL_DMA_IRQHandler+0x6c0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a71      	ldr	r2, [pc, #452]	@ (8002250 <HAL_DMA_IRQHandler+0x6c4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a70      	ldr	r2, [pc, #448]	@ (8002254 <HAL_DMA_IRQHandler+0x6c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x516>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6e      	ldr	r2, [pc, #440]	@ (8002258 <HAL_DMA_IRQHandler+0x6cc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10a      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x52c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e009      	b.n	80020cc <HAL_DMA_IRQHandler+0x540>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d03e      	beq.n	800214e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2210      	movs	r2, #16
 80020da:	409a      	lsls	r2, r3
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d024      	beq.n	800214e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e01f      	b.n	800214e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01b      	beq.n	800214e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e016      	b.n	800214e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2220      	movs	r2, #32
 8002158:	409a      	lsls	r2, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8110 	beq.w	8002384 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2c      	ldr	r2, [pc, #176]	@ (800221c <HAL_DMA_IRQHandler+0x690>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d04a      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <HAL_DMA_IRQHandler+0x694>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d045      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a29      	ldr	r2, [pc, #164]	@ (8002224 <HAL_DMA_IRQHandler+0x698>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d040      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	@ (8002228 <HAL_DMA_IRQHandler+0x69c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d03b      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a26      	ldr	r2, [pc, #152]	@ (800222c <HAL_DMA_IRQHandler+0x6a0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d036      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a25      	ldr	r2, [pc, #148]	@ (8002230 <HAL_DMA_IRQHandler+0x6a4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d031      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <HAL_DMA_IRQHandler+0x6a8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02c      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_DMA_IRQHandler+0x6ac>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d027      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_DMA_IRQHandler+0x6b0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002240 <HAL_DMA_IRQHandler+0x6b4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d01d      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_DMA_IRQHandler+0x6b8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d018      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_DMA_IRQHandler+0x6bc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_DMA_IRQHandler+0x6c0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_DMA_IRQHandler+0x6c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <HAL_DMA_IRQHandler+0x6c8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_IRQHandler+0x678>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <HAL_DMA_IRQHandler+0x6cc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d12b      	bne.n	800225c <HAL_DMA_IRQHandler+0x6d0>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	e02a      	b.n	8002270 <HAL_DMA_IRQHandler+0x6e4>
 800221a:	bf00      	nop
 800221c:	40020010 	.word	0x40020010
 8002220:	40020028 	.word	0x40020028
 8002224:	40020040 	.word	0x40020040
 8002228:	40020058 	.word	0x40020058
 800222c:	40020070 	.word	0x40020070
 8002230:	40020088 	.word	0x40020088
 8002234:	400200a0 	.word	0x400200a0
 8002238:	400200b8 	.word	0x400200b8
 800223c:	40020410 	.word	0x40020410
 8002240:	40020428 	.word	0x40020428
 8002244:	40020440 	.word	0x40020440
 8002248:	40020458 	.word	0x40020458
 800224c:	40020470 	.word	0x40020470
 8002250:	40020488 	.word	0x40020488
 8002254:	400204a0 	.word	0x400204a0
 8002258:	400204b8 	.word	0x400204b8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8087 	beq.w	8002384 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2220      	movs	r2, #32
 8002280:	409a      	lsls	r2, r3
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b04      	cmp	r3, #4
 8002290:	d139      	bne.n	8002306 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0216 	bic.w	r2, r2, #22
 80022a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <HAL_DMA_IRQHandler+0x736>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0208 	bic.w	r2, r2, #8
 80022d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	223f      	movs	r2, #63	@ 0x3f
 80022dc:	409a      	lsls	r2, r3
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 834a 	beq.w	8002990 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
          }
          return;
 8002304:	e344      	b.n	8002990 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d018      	beq.n	8002346 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02c      	beq.n	8002384 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	4798      	blx	r3
 8002332:	e027      	b.n	8002384 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
 8002344:	e01e      	b.n	8002384 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10f      	bne.n	8002374 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0210 	bic.w	r2, r2, #16
 8002362:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8306 	beq.w	800299a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8088 	beq.w	80024ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7a      	ldr	r2, [pc, #488]	@ (8002594 <HAL_DMA_IRQHandler+0xa08>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d04a      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a79      	ldr	r2, [pc, #484]	@ (8002598 <HAL_DMA_IRQHandler+0xa0c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d045      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a77      	ldr	r2, [pc, #476]	@ (800259c <HAL_DMA_IRQHandler+0xa10>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d040      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a76      	ldr	r2, [pc, #472]	@ (80025a0 <HAL_DMA_IRQHandler+0xa14>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d03b      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a74      	ldr	r2, [pc, #464]	@ (80025a4 <HAL_DMA_IRQHandler+0xa18>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d036      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a73      	ldr	r2, [pc, #460]	@ (80025a8 <HAL_DMA_IRQHandler+0xa1c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d031      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a71      	ldr	r2, [pc, #452]	@ (80025ac <HAL_DMA_IRQHandler+0xa20>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02c      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a70      	ldr	r2, [pc, #448]	@ (80025b0 <HAL_DMA_IRQHandler+0xa24>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d027      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	@ (80025b4 <HAL_DMA_IRQHandler+0xa28>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d022      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6d      	ldr	r2, [pc, #436]	@ (80025b8 <HAL_DMA_IRQHandler+0xa2c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d01d      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6b      	ldr	r2, [pc, #428]	@ (80025bc <HAL_DMA_IRQHandler+0xa30>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d018      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6a      	ldr	r2, [pc, #424]	@ (80025c0 <HAL_DMA_IRQHandler+0xa34>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d013      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a68      	ldr	r2, [pc, #416]	@ (80025c4 <HAL_DMA_IRQHandler+0xa38>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00e      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a67      	ldr	r2, [pc, #412]	@ (80025c8 <HAL_DMA_IRQHandler+0xa3c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d009      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a65      	ldr	r2, [pc, #404]	@ (80025cc <HAL_DMA_IRQHandler+0xa40>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d004      	beq.n	8002444 <HAL_DMA_IRQHandler+0x8b8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a64      	ldr	r2, [pc, #400]	@ (80025d0 <HAL_DMA_IRQHandler+0xa44>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d108      	bne.n	8002456 <HAL_DMA_IRQHandler+0x8ca>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e007      	b.n	8002466 <HAL_DMA_IRQHandler+0x8da>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246e:	429a      	cmp	r2, r3
 8002470:	d307      	bcc.n	8002482 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f2      	bne.n	8002466 <HAL_DMA_IRQHandler+0x8da>
 8002480:	e000      	b.n	8002484 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002482:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800249a:	e003      	b.n	80024a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8272 	beq.w	800299a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
 80024be:	e26c      	b.n	800299a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a43      	ldr	r2, [pc, #268]	@ (80025d4 <HAL_DMA_IRQHandler+0xa48>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d022      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a42      	ldr	r2, [pc, #264]	@ (80025d8 <HAL_DMA_IRQHandler+0xa4c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d01d      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a40      	ldr	r2, [pc, #256]	@ (80025dc <HAL_DMA_IRQHandler+0xa50>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d018      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3f      	ldr	r2, [pc, #252]	@ (80025e0 <HAL_DMA_IRQHandler+0xa54>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d013      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3d      	ldr	r2, [pc, #244]	@ (80025e4 <HAL_DMA_IRQHandler+0xa58>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00e      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3c      	ldr	r2, [pc, #240]	@ (80025e8 <HAL_DMA_IRQHandler+0xa5c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d009      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3a      	ldr	r2, [pc, #232]	@ (80025ec <HAL_DMA_IRQHandler+0xa60>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_IRQHandler+0x984>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a39      	ldr	r2, [pc, #228]	@ (80025f0 <HAL_DMA_IRQHandler+0xa64>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_DMA_IRQHandler+0x988>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_DMA_IRQHandler+0x98a>
 8002514:	2300      	movs	r3, #0
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 823f 	beq.w	800299a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2204      	movs	r2, #4
 800252e:	409a      	lsls	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80cd 	beq.w	80026d4 <HAL_DMA_IRQHandler+0xb48>
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80c7 	beq.w	80026d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2204      	movs	r2, #4
 8002550:	409a      	lsls	r2, r3
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d049      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8210 	beq.w	8002994 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800257c:	e20a      	b.n	8002994 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8206 	beq.w	8002994 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002590:	e200      	b.n	8002994 <HAL_DMA_IRQHandler+0xe08>
 8002592:	bf00      	nop
 8002594:	40020010 	.word	0x40020010
 8002598:	40020028 	.word	0x40020028
 800259c:	40020040 	.word	0x40020040
 80025a0:	40020058 	.word	0x40020058
 80025a4:	40020070 	.word	0x40020070
 80025a8:	40020088 	.word	0x40020088
 80025ac:	400200a0 	.word	0x400200a0
 80025b0:	400200b8 	.word	0x400200b8
 80025b4:	40020410 	.word	0x40020410
 80025b8:	40020428 	.word	0x40020428
 80025bc:	40020440 	.word	0x40020440
 80025c0:	40020458 	.word	0x40020458
 80025c4:	40020470 	.word	0x40020470
 80025c8:	40020488 	.word	0x40020488
 80025cc:	400204a0 	.word	0x400204a0
 80025d0:	400204b8 	.word	0x400204b8
 80025d4:	58025408 	.word	0x58025408
 80025d8:	5802541c 	.word	0x5802541c
 80025dc:	58025430 	.word	0x58025430
 80025e0:	58025444 	.word	0x58025444
 80025e4:	58025458 	.word	0x58025458
 80025e8:	5802546c 	.word	0x5802546c
 80025ec:	58025480 	.word	0x58025480
 80025f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d160      	bne.n	80026c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7f      	ldr	r2, [pc, #508]	@ (8002800 <HAL_DMA_IRQHandler+0xc74>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d04a      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7d      	ldr	r2, [pc, #500]	@ (8002804 <HAL_DMA_IRQHandler+0xc78>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d045      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a7c      	ldr	r2, [pc, #496]	@ (8002808 <HAL_DMA_IRQHandler+0xc7c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d040      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7a      	ldr	r2, [pc, #488]	@ (800280c <HAL_DMA_IRQHandler+0xc80>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d03b      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a79      	ldr	r2, [pc, #484]	@ (8002810 <HAL_DMA_IRQHandler+0xc84>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d036      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a77      	ldr	r2, [pc, #476]	@ (8002814 <HAL_DMA_IRQHandler+0xc88>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d031      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a76      	ldr	r2, [pc, #472]	@ (8002818 <HAL_DMA_IRQHandler+0xc8c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02c      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a74      	ldr	r2, [pc, #464]	@ (800281c <HAL_DMA_IRQHandler+0xc90>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d027      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a73      	ldr	r2, [pc, #460]	@ (8002820 <HAL_DMA_IRQHandler+0xc94>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d022      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a71      	ldr	r2, [pc, #452]	@ (8002824 <HAL_DMA_IRQHandler+0xc98>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01d      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a70      	ldr	r2, [pc, #448]	@ (8002828 <HAL_DMA_IRQHandler+0xc9c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d018      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6e      	ldr	r2, [pc, #440]	@ (800282c <HAL_DMA_IRQHandler+0xca0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6d      	ldr	r2, [pc, #436]	@ (8002830 <HAL_DMA_IRQHandler+0xca4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00e      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6b      	ldr	r2, [pc, #428]	@ (8002834 <HAL_DMA_IRQHandler+0xca8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <HAL_DMA_IRQHandler+0xcac>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d004      	beq.n	800269e <HAL_DMA_IRQHandler+0xb12>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a68      	ldr	r2, [pc, #416]	@ (800283c <HAL_DMA_IRQHandler+0xcb0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d108      	bne.n	80026b0 <HAL_DMA_IRQHandler+0xb24>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0208 	bic.w	r2, r2, #8
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e007      	b.n	80026c0 <HAL_DMA_IRQHandler+0xb34>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8165 	beq.w	8002994 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026d2:	e15f      	b.n	8002994 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2202      	movs	r2, #2
 80026de:	409a      	lsls	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80c5 	beq.w	8002874 <HAL_DMA_IRQHandler+0xce8>
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80bf 	beq.w	8002874 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2202      	movs	r2, #2
 8002700:	409a      	lsls	r2, r3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d018      	beq.n	8002742 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 813a 	beq.w	8002998 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800272c:	e134      	b.n	8002998 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8130 	beq.w	8002998 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002740:	e12a      	b.n	8002998 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 8089 	bne.w	8002860 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <HAL_DMA_IRQHandler+0xc74>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d04a      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_DMA_IRQHandler+0xc78>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d045      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a28      	ldr	r2, [pc, #160]	@ (8002808 <HAL_DMA_IRQHandler+0xc7c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d040      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <HAL_DMA_IRQHandler+0xc80>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d03b      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a25      	ldr	r2, [pc, #148]	@ (8002810 <HAL_DMA_IRQHandler+0xc84>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d036      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <HAL_DMA_IRQHandler+0xc88>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d031      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <HAL_DMA_IRQHandler+0xc8c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d02c      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a20      	ldr	r2, [pc, #128]	@ (800281c <HAL_DMA_IRQHandler+0xc90>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d027      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002820 <HAL_DMA_IRQHandler+0xc94>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d022      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002824 <HAL_DMA_IRQHandler+0xc98>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01d      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <HAL_DMA_IRQHandler+0xc9c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d018      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1a      	ldr	r2, [pc, #104]	@ (800282c <HAL_DMA_IRQHandler+0xca0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <HAL_DMA_IRQHandler+0xca4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00e      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a17      	ldr	r2, [pc, #92]	@ (8002834 <HAL_DMA_IRQHandler+0xca8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d009      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a16      	ldr	r2, [pc, #88]	@ (8002838 <HAL_DMA_IRQHandler+0xcac>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <HAL_DMA_IRQHandler+0xc62>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <HAL_DMA_IRQHandler+0xcb0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d128      	bne.n	8002840 <HAL_DMA_IRQHandler+0xcb4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0214 	bic.w	r2, r2, #20
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e027      	b.n	8002850 <HAL_DMA_IRQHandler+0xcc4>
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 020a 	bic.w	r2, r2, #10
 800284e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8097 	beq.w	8002998 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002872:	e091      	b.n	8002998 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2208      	movs	r2, #8
 800287e:	409a      	lsls	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8088 	beq.w	800299a <HAL_DMA_IRQHandler+0xe0e>
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8082 	beq.w	800299a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a41      	ldr	r2, [pc, #260]	@ (80029a0 <HAL_DMA_IRQHandler+0xe14>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04a      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3f      	ldr	r2, [pc, #252]	@ (80029a4 <HAL_DMA_IRQHandler+0xe18>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d045      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3e      	ldr	r2, [pc, #248]	@ (80029a8 <HAL_DMA_IRQHandler+0xe1c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d040      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3c      	ldr	r2, [pc, #240]	@ (80029ac <HAL_DMA_IRQHandler+0xe20>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d03b      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	@ (80029b0 <HAL_DMA_IRQHandler+0xe24>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d036      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a39      	ldr	r2, [pc, #228]	@ (80029b4 <HAL_DMA_IRQHandler+0xe28>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d031      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a38      	ldr	r2, [pc, #224]	@ (80029b8 <HAL_DMA_IRQHandler+0xe2c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d02c      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a36      	ldr	r2, [pc, #216]	@ (80029bc <HAL_DMA_IRQHandler+0xe30>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d027      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a35      	ldr	r2, [pc, #212]	@ (80029c0 <HAL_DMA_IRQHandler+0xe34>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d022      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a33      	ldr	r2, [pc, #204]	@ (80029c4 <HAL_DMA_IRQHandler+0xe38>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <HAL_DMA_IRQHandler+0xe3c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d018      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a30      	ldr	r2, [pc, #192]	@ (80029cc <HAL_DMA_IRQHandler+0xe40>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2f      	ldr	r2, [pc, #188]	@ (80029d0 <HAL_DMA_IRQHandler+0xe44>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2d      	ldr	r2, [pc, #180]	@ (80029d4 <HAL_DMA_IRQHandler+0xe48>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <HAL_DMA_IRQHandler+0xe4c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_DMA_IRQHandler+0xdaa>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2a      	ldr	r2, [pc, #168]	@ (80029dc <HAL_DMA_IRQHandler+0xe50>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <HAL_DMA_IRQHandler+0xdbc>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 021c 	bic.w	r2, r2, #28
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e007      	b.n	8002958 <HAL_DMA_IRQHandler+0xdcc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2201      	movs	r2, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
 800298e:	e004      	b.n	800299a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002990:	bf00      	nop
 8002992:	e002      	b.n	800299a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002998:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40020010 	.word	0x40020010
 80029a4:	40020028 	.word	0x40020028
 80029a8:	40020040 	.word	0x40020040
 80029ac:	40020058 	.word	0x40020058
 80029b0:	40020070 	.word	0x40020070
 80029b4:	40020088 	.word	0x40020088
 80029b8:	400200a0 	.word	0x400200a0
 80029bc:	400200b8 	.word	0x400200b8
 80029c0:	40020410 	.word	0x40020410
 80029c4:	40020428 	.word	0x40020428
 80029c8:	40020440 	.word	0x40020440
 80029cc:	40020458 	.word	0x40020458
 80029d0:	40020470 	.word	0x40020470
 80029d4:	40020488 	.word	0x40020488
 80029d8:	400204a0 	.word	0x400204a0
 80029dc:	400204b8 	.word	0x400204b8

080029e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7f      	ldr	r2, [pc, #508]	@ (8002bfc <DMA_SetConfig+0x21c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d072      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a7d      	ldr	r2, [pc, #500]	@ (8002c00 <DMA_SetConfig+0x220>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d06d      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7c      	ldr	r2, [pc, #496]	@ (8002c04 <DMA_SetConfig+0x224>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d068      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c08 <DMA_SetConfig+0x228>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d063      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a79      	ldr	r2, [pc, #484]	@ (8002c0c <DMA_SetConfig+0x22c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d05e      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a77      	ldr	r2, [pc, #476]	@ (8002c10 <DMA_SetConfig+0x230>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d059      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	@ (8002c14 <DMA_SetConfig+0x234>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d054      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	@ (8002c18 <DMA_SetConfig+0x238>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04f      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	@ (8002c1c <DMA_SetConfig+0x23c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a71      	ldr	r2, [pc, #452]	@ (8002c20 <DMA_SetConfig+0x240>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a70      	ldr	r2, [pc, #448]	@ (8002c24 <DMA_SetConfig+0x244>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c28 <DMA_SetConfig+0x248>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6d      	ldr	r2, [pc, #436]	@ (8002c2c <DMA_SetConfig+0x24c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	@ (8002c30 <DMA_SetConfig+0x250>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6a      	ldr	r2, [pc, #424]	@ (8002c34 <DMA_SetConfig+0x254>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	@ (8002c38 <DMA_SetConfig+0x258>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a67      	ldr	r2, [pc, #412]	@ (8002c3c <DMA_SetConfig+0x25c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a65      	ldr	r2, [pc, #404]	@ (8002c40 <DMA_SetConfig+0x260>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a64      	ldr	r2, [pc, #400]	@ (8002c44 <DMA_SetConfig+0x264>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a62      	ldr	r2, [pc, #392]	@ (8002c48 <DMA_SetConfig+0x268>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a61      	ldr	r2, [pc, #388]	@ (8002c4c <DMA_SetConfig+0x26c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c50 <DMA_SetConfig+0x270>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a5e      	ldr	r2, [pc, #376]	@ (8002c54 <DMA_SetConfig+0x274>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <DMA_SetConfig+0x10a>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8002c58 <DMA_SetConfig+0x278>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <DMA_SetConfig+0x10e>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <DMA_SetConfig+0x110>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002afc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a39      	ldr	r2, [pc, #228]	@ (8002bfc <DMA_SetConfig+0x21c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a38      	ldr	r2, [pc, #224]	@ (8002c00 <DMA_SetConfig+0x220>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d045      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a36      	ldr	r2, [pc, #216]	@ (8002c04 <DMA_SetConfig+0x224>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d040      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a35      	ldr	r2, [pc, #212]	@ (8002c08 <DMA_SetConfig+0x228>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a33      	ldr	r2, [pc, #204]	@ (8002c0c <DMA_SetConfig+0x22c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d036      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a32      	ldr	r2, [pc, #200]	@ (8002c10 <DMA_SetConfig+0x230>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d031      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a30      	ldr	r2, [pc, #192]	@ (8002c14 <DMA_SetConfig+0x234>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02c      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c18 <DMA_SetConfig+0x238>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2d      	ldr	r2, [pc, #180]	@ (8002c1c <DMA_SetConfig+0x23c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c20 <DMA_SetConfig+0x240>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2a      	ldr	r2, [pc, #168]	@ (8002c24 <DMA_SetConfig+0x244>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a29      	ldr	r2, [pc, #164]	@ (8002c28 <DMA_SetConfig+0x248>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a27      	ldr	r2, [pc, #156]	@ (8002c2c <DMA_SetConfig+0x24c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a26      	ldr	r2, [pc, #152]	@ (8002c30 <DMA_SetConfig+0x250>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a24      	ldr	r2, [pc, #144]	@ (8002c34 <DMA_SetConfig+0x254>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <DMA_SetConfig+0x1d0>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a23      	ldr	r2, [pc, #140]	@ (8002c38 <DMA_SetConfig+0x258>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <DMA_SetConfig+0x1d4>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <DMA_SetConfig+0x1d6>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d059      	beq.n	8002c6e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	223f      	movs	r2, #63	@ 0x3f
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b40      	cmp	r3, #64	@ 0x40
 8002be8:	d138      	bne.n	8002c5c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002bfa:	e086      	b.n	8002d0a <DMA_SetConfig+0x32a>
 8002bfc:	40020010 	.word	0x40020010
 8002c00:	40020028 	.word	0x40020028
 8002c04:	40020040 	.word	0x40020040
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	40020070 	.word	0x40020070
 8002c10:	40020088 	.word	0x40020088
 8002c14:	400200a0 	.word	0x400200a0
 8002c18:	400200b8 	.word	0x400200b8
 8002c1c:	40020410 	.word	0x40020410
 8002c20:	40020428 	.word	0x40020428
 8002c24:	40020440 	.word	0x40020440
 8002c28:	40020458 	.word	0x40020458
 8002c2c:	40020470 	.word	0x40020470
 8002c30:	40020488 	.word	0x40020488
 8002c34:	400204a0 	.word	0x400204a0
 8002c38:	400204b8 	.word	0x400204b8
 8002c3c:	58025408 	.word	0x58025408
 8002c40:	5802541c 	.word	0x5802541c
 8002c44:	58025430 	.word	0x58025430
 8002c48:	58025444 	.word	0x58025444
 8002c4c:	58025458 	.word	0x58025458
 8002c50:	5802546c 	.word	0x5802546c
 8002c54:	58025480 	.word	0x58025480
 8002c58:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
}
 8002c6c:	e04d      	b.n	8002d0a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a29      	ldr	r2, [pc, #164]	@ (8002d18 <DMA_SetConfig+0x338>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a27      	ldr	r2, [pc, #156]	@ (8002d1c <DMA_SetConfig+0x33c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <DMA_SetConfig+0x340>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a24      	ldr	r2, [pc, #144]	@ (8002d24 <DMA_SetConfig+0x344>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a23      	ldr	r2, [pc, #140]	@ (8002d28 <DMA_SetConfig+0x348>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <DMA_SetConfig+0x34c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a20      	ldr	r2, [pc, #128]	@ (8002d30 <DMA_SetConfig+0x350>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <DMA_SetConfig+0x2de>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d34 <DMA_SetConfig+0x354>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <DMA_SetConfig+0x2e2>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <DMA_SetConfig+0x2e4>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d108      	bne.n	8002cfa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	e007      	b.n	8002d0a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	60da      	str	r2, [r3, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	58025408 	.word	0x58025408
 8002d1c:	5802541c 	.word	0x5802541c
 8002d20:	58025430 	.word	0x58025430
 8002d24:	58025444 	.word	0x58025444
 8002d28:	58025458 	.word	0x58025458
 8002d2c:	5802546c 	.word	0x5802546c
 8002d30:	58025480 	.word	0x58025480
 8002d34:	58025494 	.word	0x58025494

08002d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a42      	ldr	r2, [pc, #264]	@ (8002e50 <DMA_CalcBaseAndBitshift+0x118>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04a      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a41      	ldr	r2, [pc, #260]	@ (8002e54 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d045      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3f      	ldr	r2, [pc, #252]	@ (8002e58 <DMA_CalcBaseAndBitshift+0x120>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d040      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3e      	ldr	r2, [pc, #248]	@ (8002e5c <DMA_CalcBaseAndBitshift+0x124>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03b      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e60 <DMA_CalcBaseAndBitshift+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d036      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	@ (8002e64 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d031      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a39      	ldr	r2, [pc, #228]	@ (8002e68 <DMA_CalcBaseAndBitshift+0x130>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02c      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a38      	ldr	r2, [pc, #224]	@ (8002e6c <DMA_CalcBaseAndBitshift+0x134>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a36      	ldr	r2, [pc, #216]	@ (8002e70 <DMA_CalcBaseAndBitshift+0x138>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a35      	ldr	r2, [pc, #212]	@ (8002e74 <DMA_CalcBaseAndBitshift+0x13c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01d      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a33      	ldr	r2, [pc, #204]	@ (8002e78 <DMA_CalcBaseAndBitshift+0x140>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a32      	ldr	r2, [pc, #200]	@ (8002e7c <DMA_CalcBaseAndBitshift+0x144>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a30      	ldr	r2, [pc, #192]	@ (8002e80 <DMA_CalcBaseAndBitshift+0x148>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8002e84 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <DMA_CalcBaseAndBitshift+0x150>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <DMA_CalcBaseAndBitshift+0xa8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2c      	ldr	r2, [pc, #176]	@ (8002e8c <DMA_CalcBaseAndBitshift+0x154>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <DMA_CalcBaseAndBitshift+0xac>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <DMA_CalcBaseAndBitshift+0xae>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d024      	beq.n	8002e34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b10      	subs	r3, #16
 8002df2:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <DMA_CalcBaseAndBitshift+0x158>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	4a24      	ldr	r2, [pc, #144]	@ (8002e94 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e04:	5cd3      	ldrb	r3, [r2, r3]
 8002e06:	461a      	mov	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d908      	bls.n	8002e24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <DMA_CalcBaseAndBitshift+0x160>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	1d1a      	adds	r2, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e22:	e00d      	b.n	8002e40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e98 <DMA_CalcBaseAndBitshift+0x160>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e32:	e005      	b.n	8002e40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40020010 	.word	0x40020010
 8002e54:	40020028 	.word	0x40020028
 8002e58:	40020040 	.word	0x40020040
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	40020070 	.word	0x40020070
 8002e64:	40020088 	.word	0x40020088
 8002e68:	400200a0 	.word	0x400200a0
 8002e6c:	400200b8 	.word	0x400200b8
 8002e70:	40020410 	.word	0x40020410
 8002e74:	40020428 	.word	0x40020428
 8002e78:	40020440 	.word	0x40020440
 8002e7c:	40020458 	.word	0x40020458
 8002e80:	40020470 	.word	0x40020470
 8002e84:	40020488 	.word	0x40020488
 8002e88:	400204a0 	.word	0x400204a0
 8002e8c:	400204b8 	.word	0x400204b8
 8002e90:	aaaaaaab 	.word	0xaaaaaaab
 8002e94:	080060fc 	.word	0x080060fc
 8002e98:	fffffc00 	.word	0xfffffc00

08002e9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d120      	bne.n	8002ef2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d858      	bhi.n	8002f6a <DMA_CheckFifoParam+0xce>
 8002eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <DMA_CheckFifoParam+0x24>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ee3 	.word	0x08002ee3
 8002ec8:	08002ed1 	.word	0x08002ed1
 8002ecc:	08002f6b 	.word	0x08002f6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d048      	beq.n	8002f6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ee0:	e045      	b.n	8002f6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eea:	d142      	bne.n	8002f72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ef0:	e03f      	b.n	8002f72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efa:	d123      	bne.n	8002f44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d838      	bhi.n	8002f76 <DMA_CheckFifoParam+0xda>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <DMA_CheckFifoParam+0x70>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f23 	.word	0x08002f23
 8002f14:	08002f1d 	.word	0x08002f1d
 8002f18:	08002f35 	.word	0x08002f35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f20:	e030      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d025      	beq.n	8002f7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f32:	e022      	b.n	8002f7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f3c:	d11f      	bne.n	8002f7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f42:	e01c      	b.n	8002f7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <DMA_CheckFifoParam+0xb6>
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f50:	e018      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
        break;
 8002f56:	e015      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
    break;
 8002f68:	e00b      	b.n	8002f82 <DMA_CheckFifoParam+0xe6>
        break;
 8002f6a:	bf00      	nop
 8002f6c:	e00a      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e008      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f72:	bf00      	nop
 8002f74:	e006      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f76:	bf00      	nop
 8002f78:	e004      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <DMA_CheckFifoParam+0xe8>
    break;
 8002f82:	bf00      	nop
    }
  }

  return status;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	@ (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a36      	ldr	r2, [pc, #216]	@ (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01d      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a35      	ldr	r2, [pc, #212]	@ (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d018      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a33      	ldr	r2, [pc, #204]	@ (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a32      	ldr	r2, [pc, #200]	@ (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a30      	ldr	r2, [pc, #192]	@ (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2d      	ldr	r2, [pc, #180]	@ (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01a      	beq.n	8003032 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3b08      	subs	r3, #8
 8003004:	4a28      	ldr	r2, [pc, #160]	@ (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003020:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003030:	e024      	b.n	800307c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3b10      	subs	r3, #16
 800303a:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d806      	bhi.n	800305a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d902      	bls.n	800305a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	3308      	adds	r3, #8
 8003058:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a16      	ldr	r2, [pc, #88]	@ (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800306c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	58025408 	.word	0x58025408
 800308c:	5802541c 	.word	0x5802541c
 8003090:	58025430 	.word	0x58025430
 8003094:	58025444 	.word	0x58025444
 8003098:	58025458 	.word	0x58025458
 800309c:	5802546c 	.word	0x5802546c
 80030a0:	58025480 	.word	0x58025480
 80030a4:	58025494 	.word	0x58025494
 80030a8:	cccccccd 	.word	0xcccccccd
 80030ac:	16009600 	.word	0x16009600
 80030b0:	58025880 	.word	0x58025880
 80030b4:	aaaaaaab 	.word	0xaaaaaaab
 80030b8:	400204b8 	.word	0x400204b8
 80030bc:	4002040f 	.word	0x4002040f
 80030c0:	10008200 	.word	0x10008200
 80030c4:	40020880 	.word	0x40020880

080030c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d04a      	beq.n	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d847      	bhi.n	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a25      	ldr	r2, [pc, #148]	@ (8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a24      	ldr	r2, [pc, #144]	@ (8003184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a22      	ldr	r2, [pc, #136]	@ (8003188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	@ (800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	@ (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	@ (800319c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4b17      	ldr	r3, [pc, #92]	@ (80031a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	461a      	mov	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a15      	ldr	r2, [pc, #84]	@ (80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003150:	671a      	str	r2, [r3, #112]	@ 0x70
 8003152:	e009      	b.n	8003168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a11      	ldr	r2, [pc, #68]	@ (80031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003166:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	58025408 	.word	0x58025408
 8003184:	5802541c 	.word	0x5802541c
 8003188:	58025430 	.word	0x58025430
 800318c:	58025444 	.word	0x58025444
 8003190:	58025458 	.word	0x58025458
 8003194:	5802546c 	.word	0x5802546c
 8003198:	58025480 	.word	0x58025480
 800319c:	58025494 	.word	0x58025494
 80031a0:	1600963f 	.word	0x1600963f
 80031a4:	58025940 	.word	0x58025940
 80031a8:	1000823f 	.word	0x1000823f
 80031ac:	40020940 	.word	0x40020940

080031b0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2201      	movs	r2, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	011a      	lsls	r2, r3, #4
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_EXTI_IRQHandler+0x5c>)
 80031da:	4413      	add	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4798      	blx	r3
    }
  }
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	58000088 	.word	0x58000088

08003210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	@ 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800321e:	4b89      	ldr	r3, [pc, #548]	@ (8003444 <HAL_GPIO_Init+0x234>)
 8003220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003222:	e194      	b.n	800354e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8186 	beq.w	8003548 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d005      	beq.n	8003254 <HAL_GPIO_Init+0x44>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d130      	bne.n	80032b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800328a:	2201      	movs	r2, #1
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 0201 	and.w	r2, r3, #1
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d017      	beq.n	80032f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d123      	bne.n	8003346 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	08da      	lsrs	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3208      	adds	r2, #8
 8003306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	220f      	movs	r2, #15
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	08da      	lsrs	r2, r3, #3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3208      	adds	r2, #8
 8003340:	69b9      	ldr	r1, [r7, #24]
 8003342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	2203      	movs	r2, #3
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0203 	and.w	r2, r3, #3
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80e0 	beq.w	8003548 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003388:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <HAL_GPIO_Init+0x238>)
 800338a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800338e:	4a2e      	ldr	r2, [pc, #184]	@ (8003448 <HAL_GPIO_Init+0x238>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003398:	4b2b      	ldr	r3, [pc, #172]	@ (8003448 <HAL_GPIO_Init+0x238>)
 800339a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a6:	4a29      	ldr	r2, [pc, #164]	@ (800344c <HAL_GPIO_Init+0x23c>)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a20      	ldr	r2, [pc, #128]	@ (8003450 <HAL_GPIO_Init+0x240>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d052      	beq.n	8003478 <HAL_GPIO_Init+0x268>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <HAL_GPIO_Init+0x244>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d031      	beq.n	800343e <HAL_GPIO_Init+0x22e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_GPIO_Init+0x248>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <HAL_GPIO_Init+0x22a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <HAL_GPIO_Init+0x24c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d025      	beq.n	8003436 <HAL_GPIO_Init+0x226>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <HAL_GPIO_Init+0x250>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <HAL_GPIO_Init+0x222>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <HAL_GPIO_Init+0x254>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d019      	beq.n	800342e <HAL_GPIO_Init+0x21e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003468 <HAL_GPIO_Init+0x258>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_GPIO_Init+0x21a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	@ (800346c <HAL_GPIO_Init+0x25c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00d      	beq.n	8003426 <HAL_GPIO_Init+0x216>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <HAL_GPIO_Init+0x260>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x212>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <HAL_GPIO_Init+0x264>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_GPIO_Init+0x20e>
 800341a:	2309      	movs	r3, #9
 800341c:	e02d      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800341e:	230a      	movs	r3, #10
 8003420:	e02b      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003422:	2308      	movs	r3, #8
 8003424:	e029      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003426:	2307      	movs	r3, #7
 8003428:	e027      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800342a:	2306      	movs	r3, #6
 800342c:	e025      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800342e:	2305      	movs	r3, #5
 8003430:	e023      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003432:	2304      	movs	r3, #4
 8003434:	e021      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003436:	2303      	movs	r3, #3
 8003438:	e01f      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800343a:	2302      	movs	r3, #2
 800343c:	e01d      	b.n	800347a <HAL_GPIO_Init+0x26a>
 800343e:	2301      	movs	r3, #1
 8003440:	e01b      	b.n	800347a <HAL_GPIO_Init+0x26a>
 8003442:	bf00      	nop
 8003444:	58000080 	.word	0x58000080
 8003448:	58024400 	.word	0x58024400
 800344c:	58000400 	.word	0x58000400
 8003450:	58020000 	.word	0x58020000
 8003454:	58020400 	.word	0x58020400
 8003458:	58020800 	.word	0x58020800
 800345c:	58020c00 	.word	0x58020c00
 8003460:	58021000 	.word	0x58021000
 8003464:	58021400 	.word	0x58021400
 8003468:	58021800 	.word	0x58021800
 800346c:	58021c00 	.word	0x58021c00
 8003470:	58022000 	.word	0x58022000
 8003474:	58022400 	.word	0x58022400
 8003478:	2300      	movs	r3, #0
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f002 0203 	and.w	r2, r2, #3
 8003480:	0092      	lsls	r2, r2, #2
 8003482:	4093      	lsls	r3, r2
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348a:	4938      	ldr	r1, [pc, #224]	@ (800356c <HAL_GPIO_Init+0x35c>)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	3302      	adds	r3, #2
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f ae63 	bne.w	8003224 <HAL_GPIO_Init+0x14>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	3724      	adds	r7, #36	@ 0x24
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	58000400 	.word	0x58000400

08003570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003580:	787b      	ldrb	r3, [r7, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800358c:	e003      	b.n	8003596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	619a      	str	r2, [r3, #24]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_PWREx_ConfigSupply+0x70>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d00a      	beq.n	80035ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <HAL_PWREx_ConfigSupply+0x70>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d001      	beq.n	80035ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01f      	b.n	800360a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e01d      	b.n	800360a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035ce:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_PWREx_ConfigSupply+0x70>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	490f      	ldr	r1, [pc, #60]	@ (8003614 <HAL_PWREx_ConfigSupply+0x70>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035de:	f7fd fbc3 	bl	8000d68 <HAL_GetTick>
 80035e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035e4:	e009      	b.n	80035fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035e6:	f7fd fbbf 	bl	8000d68 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035f4:	d901      	bls.n	80035fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e007      	b.n	800360a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035fa:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_PWREx_ConfigSupply+0x70>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003606:	d1ee      	bne.n	80035e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	58024800 	.word	0x58024800

08003618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f000 bc48 	b.w	8003ebc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8088 	beq.w	800374a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363a:	4b99      	ldr	r3, [pc, #612]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003644:	4b96      	ldr	r3, [pc, #600]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2b10      	cmp	r3, #16
 800364e:	d007      	beq.n	8003660 <HAL_RCC_OscConfig+0x48>
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	2b18      	cmp	r3, #24
 8003654:	d111      	bne.n	800367a <HAL_RCC_OscConfig+0x62>
 8003656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d10c      	bne.n	800367a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b8f      	ldr	r3, [pc, #572]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d06d      	beq.n	8003748 <HAL_RCC_OscConfig+0x130>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d169      	bne.n	8003748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f000 bc21 	b.w	8003ebc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x7a>
 8003684:	4b86      	ldr	r3, [pc, #536]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a85      	ldr	r2, [pc, #532]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800368a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	e02e      	b.n	80036f0 <HAL_RCC_OscConfig+0xd8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x9c>
 800369a:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a80      	ldr	r2, [pc, #512]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b7e      	ldr	r3, [pc, #504]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7d      	ldr	r2, [pc, #500]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e01d      	b.n	80036f0 <HAL_RCC_OscConfig+0xd8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0xc0>
 80036be:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a77      	ldr	r2, [pc, #476]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b75      	ldr	r3, [pc, #468]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a74      	ldr	r2, [pc, #464]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0xd8>
 80036d8:	4b71      	ldr	r3, [pc, #452]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a70      	ldr	r2, [pc, #448]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b6e      	ldr	r3, [pc, #440]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a6d      	ldr	r2, [pc, #436]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd fb36 	bl	8000d68 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7fd fb32 	bl	8000d68 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	@ 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e3d4      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003712:	4b63      	ldr	r3, [pc, #396]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0xe8>
 800371e:	e014      	b.n	800374a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fb22 	bl	8000d68 <HAL_GetTick>
 8003724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fd fb1e 	bl	8000d68 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e3c0      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800373a:	4b59      	ldr	r3, [pc, #356]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x110>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80ca 	beq.w	80038ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003758:	4b51      	ldr	r3, [pc, #324]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003760:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003762:	4b4f      	ldr	r3, [pc, #316]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <HAL_RCC_OscConfig+0x166>
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2b18      	cmp	r3, #24
 8003772:	d156      	bne.n	8003822 <HAL_RCC_OscConfig+0x20a>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d151      	bne.n	8003822 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377e:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x17e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e392      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003796:	4b42      	ldr	r3, [pc, #264]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0219 	bic.w	r2, r3, #25
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	493f      	ldr	r1, [pc, #252]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fade 	bl	8000d68 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fd fada 	bl	8000d68 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e37c      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c2:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	f7fd fafb 	bl	8000dc8 <HAL_GetREVID>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037d8:	4293      	cmp	r3, r2
 80037da:	d817      	bhi.n	800380c <HAL_RCC_OscConfig+0x1f4>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b40      	cmp	r3, #64	@ 0x40
 80037e2:	d108      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1de>
 80037e4:	4b2e      	ldr	r3, [pc, #184]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037ec:	4a2c      	ldr	r2, [pc, #176]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80037ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f4:	e07a      	b.n	80038ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	031b      	lsls	r3, r3, #12
 8003804:	4926      	ldr	r1, [pc, #152]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800380a:	e06f      	b.n	80038ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	4921      	ldr	r1, [pc, #132]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003820:	e064      	b.n	80038ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d047      	beq.n	80038ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800382a:	4b1d      	ldr	r3, [pc, #116]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0219 	bic.w	r2, r3, #25
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	491a      	ldr	r1, [pc, #104]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fa94 	bl	8000d68 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003844:	f7fd fa90 	bl	8000d68 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e332      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003856:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	f7fd fab1 	bl	8000dc8 <HAL_GetREVID>
 8003866:	4603      	mov	r3, r0
 8003868:	f241 0203 	movw	r2, #4099	@ 0x1003
 800386c:	4293      	cmp	r3, r2
 800386e:	d819      	bhi.n	80038a4 <HAL_RCC_OscConfig+0x28c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d108      	bne.n	800388a <HAL_RCC_OscConfig+0x272>
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003880:	4a07      	ldr	r2, [pc, #28]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e030      	b.n	80038ec <HAL_RCC_OscConfig+0x2d4>
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	031b      	lsls	r3, r3, #12
 8003898:	4901      	ldr	r1, [pc, #4]	@ (80038a0 <HAL_RCC_OscConfig+0x288>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
 800389e:	e025      	b.n	80038ec <HAL_RCC_OscConfig+0x2d4>
 80038a0:	58024400 	.word	0x58024400
 80038a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	4997      	ldr	r1, [pc, #604]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
 80038b8:	e018      	b.n	80038ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ba:	4b95      	ldr	r3, [pc, #596]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a94      	ldr	r2, [pc, #592]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd fa4f 	bl	8000d68 <HAL_GetTick>
 80038ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ce:	f7fd fa4b 	bl	8000d68 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e2ed      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e0:	4b8b      	ldr	r3, [pc, #556]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a9 	beq.w	8003a4c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fa:	4b85      	ldr	r3, [pc, #532]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003902:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003904:	4b82      	ldr	r3, [pc, #520]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003908:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d007      	beq.n	8003920 <HAL_RCC_OscConfig+0x308>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b18      	cmp	r3, #24
 8003914:	d13a      	bne.n	800398c <HAL_RCC_OscConfig+0x374>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d135      	bne.n	800398c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003920:	4b7b      	ldr	r3, [pc, #492]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_OscConfig+0x320>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b80      	cmp	r3, #128	@ 0x80
 8003932:	d001      	beq.n	8003938 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e2c1      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003938:	f7fd fa46 	bl	8000dc8 <HAL_GetREVID>
 800393c:	4603      	mov	r3, r0
 800393e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003942:	4293      	cmp	r3, r2
 8003944:	d817      	bhi.n	8003976 <HAL_RCC_OscConfig+0x35e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	2b20      	cmp	r3, #32
 800394c:	d108      	bne.n	8003960 <HAL_RCC_OscConfig+0x348>
 800394e:	4b70      	ldr	r3, [pc, #448]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003956:	4a6e      	ldr	r2, [pc, #440]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003958:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800395c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800395e:	e075      	b.n	8003a4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003960:	4b6b      	ldr	r3, [pc, #428]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	069b      	lsls	r3, r3, #26
 800396e:	4968      	ldr	r1, [pc, #416]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003974:	e06a      	b.n	8003a4c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003976:	4b66      	ldr	r3, [pc, #408]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	061b      	lsls	r3, r3, #24
 8003984:	4962      	ldr	r1, [pc, #392]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398a:	e05f      	b.n	8003a4c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d042      	beq.n	8003a1a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003994:	4b5e      	ldr	r3, [pc, #376]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a5d      	ldr	r2, [pc, #372]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 800399a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800399e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd f9e2 	bl	8000d68 <HAL_GetTick>
 80039a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039a8:	f7fd f9de 	bl	8000d68 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e280      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039ba:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039c6:	f7fd f9ff 	bl	8000dc8 <HAL_GetREVID>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d817      	bhi.n	8003a04 <HAL_RCC_OscConfig+0x3ec>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d108      	bne.n	80039ee <HAL_RCC_OscConfig+0x3d6>
 80039dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80039e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039ea:	6053      	str	r3, [r2, #4]
 80039ec:	e02e      	b.n	8003a4c <HAL_RCC_OscConfig+0x434>
 80039ee:	4b48      	ldr	r3, [pc, #288]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	069b      	lsls	r3, r3, #26
 80039fc:	4944      	ldr	r1, [pc, #272]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
 8003a02:	e023      	b.n	8003a4c <HAL_RCC_OscConfig+0x434>
 8003a04:	4b42      	ldr	r3, [pc, #264]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	493f      	ldr	r1, [pc, #252]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
 8003a18:	e018      	b.n	8003a4c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fd f99f 	bl	8000d68 <HAL_GetTick>
 8003a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a2e:	f7fd f99b 	bl	8000d68 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e23d      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a40:	4b33      	ldr	r3, [pc, #204]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d036      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d019      	beq.n	8003a94 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a60:	4b2b      	ldr	r3, [pc, #172]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a64:	4a2a      	ldr	r2, [pc, #168]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fd f97c 	bl	8000d68 <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fd f978 	bl	8000d68 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e21a      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a86:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x45c>
 8003a92:	e018      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b1e      	ldr	r3, [pc, #120]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a98:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd f962 	bl	8000d68 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7fd f95e 	bl	8000d68 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e200      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d039      	beq.n	8003b46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0c      	ldr	r2, [pc, #48]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003ae0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd f93f 	bl	8000d68 <HAL_GetTick>
 8003aea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aee:	f7fd f93b 	bl	8000d68 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e1dd      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b00:	4b03      	ldr	r3, [pc, #12]	@ (8003b10 <HAL_RCC_OscConfig+0x4f8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x4d6>
 8003b0c:	e01b      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
 8003b0e:	bf00      	nop
 8003b10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b14:	4b9b      	ldr	r3, [pc, #620]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a9a      	ldr	r2, [pc, #616]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b20:	f7fd f922 	bl	8000d68 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b28:	f7fd f91e 	bl	8000d68 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e1c0      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b3a:	4b92      	ldr	r3, [pc, #584]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8081 	beq.w	8003c56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b54:	4b8c      	ldr	r3, [pc, #560]	@ (8003d88 <HAL_RCC_OscConfig+0x770>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a8b      	ldr	r2, [pc, #556]	@ (8003d88 <HAL_RCC_OscConfig+0x770>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b60:	f7fd f902 	bl	8000d68 <HAL_GetTick>
 8003b64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fd f8fe 	bl	8000d68 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	@ 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e1a0      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7a:	4b83      	ldr	r3, [pc, #524]	@ (8003d88 <HAL_RCC_OscConfig+0x770>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x584>
 8003b8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b92:	4a7c      	ldr	r2, [pc, #496]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9a:	e02d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5e0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x5a6>
 8003ba4:	4b77      	ldr	r3, [pc, #476]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a76      	ldr	r2, [pc, #472]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb0:	4b74      	ldr	r3, [pc, #464]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	4a73      	ldr	r2, [pc, #460]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	f023 0304 	bic.w	r3, r3, #4
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5e0>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x5c8>
 8003bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a6e      	ldr	r2, [pc, #440]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x5e0>
 8003be0:	4b68      	ldr	r3, [pc, #416]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be4:	4a67      	ldr	r2, [pc, #412]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bec:	4b65      	ldr	r3, [pc, #404]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf0:	4a64      	ldr	r2, [pc, #400]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003bf2:	f023 0304 	bic.w	r3, r3, #4
 8003bf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d015      	beq.n	8003c2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd f8b2 	bl	8000d68 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd f8ae 	bl	8000d68 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e14e      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c1e:	4b59      	ldr	r3, [pc, #356]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ee      	beq.n	8003c08 <HAL_RCC_OscConfig+0x5f0>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd f89c 	bl	8000d68 <HAL_GetTick>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd f898 	bl	8000d68 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e138      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1ee      	bne.n	8003c34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 812d 	beq.w	8003eba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c60:	4b48      	ldr	r3, [pc, #288]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c68:	2b18      	cmp	r3, #24
 8003c6a:	f000 80bd 	beq.w	8003de8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	f040 809e 	bne.w	8003db4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	4b42      	ldr	r3, [pc, #264]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a41      	ldr	r2, [pc, #260]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd f870 	bl	8000d68 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd f86c 	bl	8000d68 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e10e      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c9e:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003caa:	4b36      	ldr	r3, [pc, #216]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cae:	4b37      	ldr	r3, [pc, #220]	@ (8003d8c <HAL_RCC_OscConfig+0x774>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4931      	ldr	r1, [pc, #196]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	025b      	lsls	r3, r3, #9
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	3b01      	subs	r3, #1
 8003cee:	061b      	lsls	r3, r3, #24
 8003cf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cf4:	4923      	ldr	r1, [pc, #140]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cfa:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d06:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d0a:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <HAL_RCC_OscConfig+0x778>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d12:	00d2      	lsls	r2, r2, #3
 8003d14:	491b      	ldr	r1, [pc, #108]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	4917      	ldr	r1, [pc, #92]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d2c:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	f023 0202 	bic.w	r2, r3, #2
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	4912      	ldr	r1, [pc, #72]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d3e:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	4a10      	ldr	r2, [pc, #64]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	4a07      	ldr	r2, [pc, #28]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d6e:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fc fff5 	bl	8000d68 <HAL_GetTick>
 8003d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d80:	e011      	b.n	8003da6 <HAL_RCC_OscConfig+0x78e>
 8003d82:	bf00      	nop
 8003d84:	58024400 	.word	0x58024400
 8003d88:	58024800 	.word	0x58024800
 8003d8c:	fffffc0c 	.word	0xfffffc0c
 8003d90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fc ffe8 	bl	8000d68 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e08a      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x77c>
 8003db2:	e082      	b.n	8003eba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b43      	ldr	r3, [pc, #268]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a42      	ldr	r2, [pc, #264]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003dba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fc ffd2 	bl	8000d68 <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fc ffce 	bl	8000d68 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e070      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dda:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x7b0>
 8003de6:	e068      	b.n	8003eba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003de8:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003dee:	4b35      	ldr	r3, [pc, #212]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d031      	beq.n	8003e60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f003 0203 	and.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d12a      	bne.n	8003e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d122      	bne.n	8003e60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d11a      	bne.n	8003e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0a5b      	lsrs	r3, r3, #9
 8003e2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d111      	bne.n	8003e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e02b      	b.n	8003ebc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e64:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e68:	08db      	lsrs	r3, r3, #3
 8003e6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d01f      	beq.n	8003eba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e7a:	4b12      	ldr	r3, [pc, #72]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e86:	f7fc ff6f 	bl	8000d68 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e8c:	bf00      	nop
 8003e8e:	f7fc ff6b 	bl	8000d68 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d0f9      	beq.n	8003e8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <HAL_RCC_OscConfig+0x8b0>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ea6:	00d2      	lsls	r2, r2, #3
 8003ea8:	4906      	ldr	r1, [pc, #24]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003eae:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <HAL_RCC_OscConfig+0x8ac>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3730      	adds	r7, #48	@ 0x30
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	ffff0007 	.word	0xffff0007

08003ecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e19c      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d910      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b87      	ldr	r3, [pc, #540]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 020f 	bic.w	r2, r3, #15
 8003ef6:	4985      	ldr	r1, [pc, #532]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b83      	ldr	r3, [pc, #524]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e184      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	4b7b      	ldr	r3, [pc, #492]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d908      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f2c:	4b78      	ldr	r3, [pc, #480]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4975      	ldr	r1, [pc, #468]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d010      	beq.n	8003f6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	4b70      	ldr	r3, [pc, #448]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d908      	bls.n	8003f6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	496a      	ldr	r1, [pc, #424]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	4b64      	ldr	r3, [pc, #400]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d908      	bls.n	8003f9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f88:	4b61      	ldr	r3, [pc, #388]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	495e      	ldr	r1, [pc, #376]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	4b59      	ldr	r3, [pc, #356]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d908      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fb6:	4b56      	ldr	r3, [pc, #344]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4953      	ldr	r1, [pc, #332]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b4d      	ldr	r3, [pc, #308]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d908      	bls.n	8003ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f023 020f 	bic.w	r2, r3, #15
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4947      	ldr	r1, [pc, #284]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d055      	beq.n	80040ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004002:	4b43      	ldr	r3, [pc, #268]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4940      	ldr	r1, [pc, #256]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8004010:	4313      	orrs	r3, r2
 8004012:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d107      	bne.n	800402c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800401c:	4b3c      	ldr	r3, [pc, #240]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d121      	bne.n	800406c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0f6      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004034:	4b36      	ldr	r3, [pc, #216]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d115      	bne.n	800406c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0ea      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800404c:	4b30      	ldr	r3, [pc, #192]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d109      	bne.n	800406c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0de      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800405c:	4b2c      	ldr	r3, [pc, #176]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0d6      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800406c:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f023 0207 	bic.w	r2, r3, #7
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4925      	ldr	r1, [pc, #148]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 800407a:	4313      	orrs	r3, r2
 800407c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407e:	f7fc fe73 	bl	8000d68 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004084:	e00a      	b.n	800409c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004086:	f7fc fe6f 	bl	8000d68 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004094:	4293      	cmp	r3, r2
 8004096:	d901      	bls.n	800409c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e0be      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409c:	4b1c      	ldr	r3, [pc, #112]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d1eb      	bne.n	8004086 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d010      	beq.n	80040dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	4b14      	ldr	r3, [pc, #80]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d208      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f023 020f 	bic.w	r2, r3, #15
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	490e      	ldr	r1, [pc, #56]	@ (8004110 <HAL_RCC_ClockConfig+0x244>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d214      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b08      	ldr	r3, [pc, #32]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 020f 	bic.w	r2, r3, #15
 80040f2:	4906      	ldr	r1, [pc, #24]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b04      	ldr	r3, [pc, #16]	@ (800410c <HAL_RCC_ClockConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e086      	b.n	800421a <HAL_RCC_ClockConfig+0x34e>
 800410c:	52002000 	.word	0x52002000
 8004110:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	4b3f      	ldr	r3, [pc, #252]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800412c:	429a      	cmp	r2, r3
 800412e:	d208      	bcs.n	8004142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004130:	4b3c      	ldr	r3, [pc, #240]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4939      	ldr	r1, [pc, #228]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 800413e:	4313      	orrs	r3, r2
 8004140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d010      	beq.n	8004170 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	4b34      	ldr	r3, [pc, #208]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800415a:	429a      	cmp	r2, r3
 800415c:	d208      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800415e:	4b31      	ldr	r3, [pc, #196]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	492e      	ldr	r1, [pc, #184]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d010      	beq.n	800419e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	4b28      	ldr	r3, [pc, #160]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004188:	429a      	cmp	r2, r3
 800418a:	d208      	bcs.n	800419e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800418c:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4922      	ldr	r1, [pc, #136]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 800419a:	4313      	orrs	r3, r2
 800419c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d010      	beq.n	80041cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d208      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4917      	ldr	r1, [pc, #92]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041cc:	f000 f834 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	4912      	ldr	r1, [pc, #72]	@ (8004228 <HAL_RCC_ClockConfig+0x35c>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004224 <HAL_RCC_ClockConfig+0x358>)
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004228 <HAL_RCC_ClockConfig+0x35c>)
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <HAL_RCC_ClockConfig+0x360>)
 8004202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x364>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <HAL_RCC_ClockConfig+0x368>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc fd60 	bl	8000cd4 <HAL_InitTick>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
 8004228:	080060ec 	.word	0x080060ec
 800422c:	24000004 	.word	0x24000004
 8004230:	24000000 	.word	0x24000000
 8004234:	24000008 	.word	0x24000008

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	@ 0x24
 800423c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423e:	4bb3      	ldr	r3, [pc, #716]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004246:	2b18      	cmp	r3, #24
 8004248:	f200 8155 	bhi.w	80044f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800424c:	a201      	add	r2, pc, #4	@ (adr r2, 8004254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	080042b9 	.word	0x080042b9
 8004258:	080044f7 	.word	0x080044f7
 800425c:	080044f7 	.word	0x080044f7
 8004260:	080044f7 	.word	0x080044f7
 8004264:	080044f7 	.word	0x080044f7
 8004268:	080044f7 	.word	0x080044f7
 800426c:	080044f7 	.word	0x080044f7
 8004270:	080044f7 	.word	0x080044f7
 8004274:	080042df 	.word	0x080042df
 8004278:	080044f7 	.word	0x080044f7
 800427c:	080044f7 	.word	0x080044f7
 8004280:	080044f7 	.word	0x080044f7
 8004284:	080044f7 	.word	0x080044f7
 8004288:	080044f7 	.word	0x080044f7
 800428c:	080044f7 	.word	0x080044f7
 8004290:	080044f7 	.word	0x080044f7
 8004294:	080042e5 	.word	0x080042e5
 8004298:	080044f7 	.word	0x080044f7
 800429c:	080044f7 	.word	0x080044f7
 80042a0:	080044f7 	.word	0x080044f7
 80042a4:	080044f7 	.word	0x080044f7
 80042a8:	080044f7 	.word	0x080044f7
 80042ac:	080044f7 	.word	0x080044f7
 80042b0:	080044f7 	.word	0x080044f7
 80042b4:	080042eb 	.word	0x080042eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042b8:	4b94      	ldr	r3, [pc, #592]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042c4:	4b91      	ldr	r3, [pc, #580]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	4a90      	ldr	r2, [pc, #576]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042d6:	e111      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042d8:	4b8d      	ldr	r3, [pc, #564]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042da:	61bb      	str	r3, [r7, #24]
      break;
 80042dc:	e10e      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042de:	4b8d      	ldr	r3, [pc, #564]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042e0:	61bb      	str	r3, [r7, #24]
      break;
 80042e2:	e10b      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042e6:	61bb      	str	r3, [r7, #24]
      break;
 80042e8:	e108      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ea:	4b88      	ldr	r3, [pc, #544]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042f4:	4b85      	ldr	r3, [pc, #532]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004300:	4b82      	ldr	r3, [pc, #520]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800430a:	4b80      	ldr	r3, [pc, #512]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80e1 	beq.w	80044f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b02      	cmp	r3, #2
 8004332:	f000 8083 	beq.w	800443c <HAL_RCC_GetSysClockFreq+0x204>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b02      	cmp	r3, #2
 800433a:	f200 80a1 	bhi.w	8004480 <HAL_RCC_GetSysClockFreq+0x248>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x114>
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d056      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800434a:	e099      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800434c:	4b6f      	ldr	r3, [pc, #444]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02d      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004358:	4b6c      	ldr	r3, [pc, #432]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	4a6b      	ldr	r2, [pc, #428]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	4b62      	ldr	r3, [pc, #392]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004392:	ed97 6a02 	vldr	s12, [r7, #8]
 8004396:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800451c <HAL_RCC_GetSysClockFreq+0x2e4>
 800439a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043b2:	e087      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004520 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c6:	4b51      	ldr	r3, [pc, #324]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800451c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043f6:	e065      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004524 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b40      	ldr	r3, [pc, #256]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a02 	vldr	s12, [r7, #8]
 800441e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800451c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800443a:	e043      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b2f      	ldr	r3, [pc, #188]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004462:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800451c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800447e:	e021      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800451c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044c4:	4b11      	ldr	r3, [pc, #68]	@ (800450c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	0a5b      	lsrs	r3, r3, #9
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	3301      	adds	r3, #1
 80044d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e8:	ee17 3a90 	vmov	r3, s15
 80044ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044ee:	e005      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
      break;
 80044f4:	e002      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f8:	61bb      	str	r3, [r7, #24]
      break;
 80044fa:	bf00      	nop
  }

  return sysclockfreq;
 80044fc:	69bb      	ldr	r3, [r7, #24]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3724      	adds	r7, #36	@ 0x24
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	58024400 	.word	0x58024400
 8004510:	03d09000 	.word	0x03d09000
 8004514:	003d0900 	.word	0x003d0900
 8004518:	007a1200 	.word	0x007a1200
 800451c:	46000000 	.word	0x46000000
 8004520:	4c742400 	.word	0x4c742400
 8004524:	4a742400 	.word	0x4a742400
 8004528:	4af42400 	.word	0x4af42400

0800452c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e049      	b.n	80045d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fab6 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fdb8 	bl	80050e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e049      	b.n	8004680 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f841 	bl	8004688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f000 fd61 	bl	80050e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e03c      	b.n	8004742 <HAL_TIM_PWM_Start_DMA+0xa6>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d109      	bne.n	80046e2 <HAL_TIM_PWM_Start_DMA+0x46>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	e02f      	b.n	8004742 <HAL_TIM_PWM_Start_DMA+0xa6>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start_DMA+0x60>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e022      	b.n	8004742 <HAL_TIM_PWM_Start_DMA+0xa6>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d109      	bne.n	8004716 <HAL_TIM_PWM_Start_DMA+0x7a>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e015      	b.n	8004742 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b10      	cmp	r3, #16
 800471a:	d109      	bne.n	8004730 <HAL_TIM_PWM_Start_DMA+0x94>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e008      	b.n	8004742 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
 8004748:	e1b0      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e03c      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0x142>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d109      	bne.n	800477e <HAL_TIM_PWM_Start_DMA+0xe2>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b01      	cmp	r3, #1
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e02f      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0x142>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e022      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0x142>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d109      	bne.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x116>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e015      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0x142>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start_DMA+0x130>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e008      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0x142>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d034      	beq.n	800484c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_TIM_PWM_Start_DMA+0x152>
 80047e8:	887b      	ldrh	r3, [r7, #2]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e15c      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start_DMA+0x166>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	e026      	b.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start_DMA+0x176>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	e01e      	b.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start_DMA+0x186>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	e016      	b.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start_DMA+0x196>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004830:	e00e      	b.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004840:	e006      	b.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800484a:	e001      	b.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e12d      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	f200 80ae 	bhi.w	80049b4 <HAL_TIM_PWM_Start_DMA+0x318>
 8004858:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004895 	.word	0x08004895
 8004864:	080049b5 	.word	0x080049b5
 8004868:	080049b5 	.word	0x080049b5
 800486c:	080049b5 	.word	0x080049b5
 8004870:	080048dd 	.word	0x080048dd
 8004874:	080049b5 	.word	0x080049b5
 8004878:	080049b5 	.word	0x080049b5
 800487c:	080049b5 	.word	0x080049b5
 8004880:	08004925 	.word	0x08004925
 8004884:	080049b5 	.word	0x080049b5
 8004888:	080049b5 	.word	0x080049b5
 800488c:	080049b5 	.word	0x080049b5
 8004890:	0800496d 	.word	0x0800496d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	4a86      	ldr	r2, [pc, #536]	@ (8004ab4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800489a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	4a85      	ldr	r2, [pc, #532]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	4a84      	ldr	r2, [pc, #528]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x420>)
 80048aa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3334      	adds	r3, #52	@ 0x34
 80048b8:	461a      	mov	r2, r3
 80048ba:	887b      	ldrh	r3, [r7, #2]
 80048bc:	f7fc fefc 	bl	80016b8 <HAL_DMA_Start_IT>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0f0      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d8:	60da      	str	r2, [r3, #12]
      break;
 80048da:	e06e      	b.n	80049ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	4a74      	ldr	r2, [pc, #464]	@ (8004ab4 <HAL_TIM_PWM_Start_DMA+0x418>)
 80048e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e8:	4a73      	ldr	r2, [pc, #460]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	4a72      	ldr	r2, [pc, #456]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x420>)
 80048f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3338      	adds	r3, #56	@ 0x38
 8004900:	461a      	mov	r2, r3
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	f7fc fed8 	bl	80016b8 <HAL_DMA_Start_IT>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0cc      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004920:	60da      	str	r2, [r3, #12]
      break;
 8004922:	e04a      	b.n	80049ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	4a62      	ldr	r2, [pc, #392]	@ (8004ab4 <HAL_TIM_PWM_Start_DMA+0x418>)
 800492a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	4a61      	ldr	r2, [pc, #388]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004932:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	4a60      	ldr	r2, [pc, #384]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x420>)
 800493a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	333c      	adds	r3, #60	@ 0x3c
 8004948:	461a      	mov	r2, r3
 800494a:	887b      	ldrh	r3, [r7, #2]
 800494c:	f7fc feb4 	bl	80016b8 <HAL_DMA_Start_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0a8      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004968:	60da      	str	r2, [r3, #12]
      break;
 800496a:	e026      	b.n	80049ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	4a50      	ldr	r2, [pc, #320]	@ (8004ab4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004972:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004978:	4a4f      	ldr	r2, [pc, #316]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800497a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	4a4e      	ldr	r2, [pc, #312]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x420>)
 8004982:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3340      	adds	r3, #64	@ 0x40
 8004990:	461a      	mov	r2, r3
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	f7fc fe90 	bl	80016b8 <HAL_DMA_Start_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e084      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049b0:	60da      	str	r2, [r3, #12]
      break;
 80049b2:	e002      	b.n	80049ba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
      break;
 80049b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d174      	bne.n	8004aaa <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff9d 	bl	8005908 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac0 <HAL_TIM_PWM_Start_DMA+0x424>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x364>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a39      	ldr	r2, [pc, #228]	@ (8004ac4 <HAL_TIM_PWM_Start_DMA+0x428>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00e      	beq.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x364>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a38      	ldr	r2, [pc, #224]	@ (8004ac8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d009      	beq.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x364>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a36      	ldr	r2, [pc, #216]	@ (8004acc <HAL_TIM_PWM_Start_DMA+0x430>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x364>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a35      	ldr	r2, [pc, #212]	@ (8004ad0 <HAL_TIM_PWM_Start_DMA+0x434>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d101      	bne.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x368>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004a04:	2300      	movs	r3, #0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a28      	ldr	r2, [pc, #160]	@ (8004ac0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d01d      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a28      	ldr	r2, [pc, #160]	@ (8004ad4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a26      	ldr	r2, [pc, #152]	@ (8004ad8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a25      	ldr	r2, [pc, #148]	@ (8004adc <HAL_TIM_PWM_Start_DMA+0x440>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a21      	ldr	r2, [pc, #132]	@ (8004ae0 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d115      	bne.n	8004a96 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae4 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b06      	cmp	r3, #6
 8004a7a:	d015      	beq.n	8004aa8 <HAL_TIM_PWM_Start_DMA+0x40c>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a82:	d011      	beq.n	8004aa8 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	e008      	b.n	8004aa8 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0201 	orr.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e000      	b.n	8004aaa <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08004fcf 	.word	0x08004fcf
 8004ab8:	08005077 	.word	0x08005077
 8004abc:	08004f3d 	.word	0x08004f3d
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40000800 	.word	0x40000800
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	40001800 	.word	0x40001800
 8004ae4:	00010007 	.word	0x00010007

08004ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ff      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b14      	cmp	r3, #20
 8004b12:	f200 80f0 	bhi.w	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b16:	a201      	add	r2, pc, #4	@ (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004cf7 	.word	0x08004cf7
 8004b24:	08004cf7 	.word	0x08004cf7
 8004b28:	08004cf7 	.word	0x08004cf7
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004cf7 	.word	0x08004cf7
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004cf7 	.word	0x08004cf7
 8004b3c:	08004bf3 	.word	0x08004bf3
 8004b40:	08004cf7 	.word	0x08004cf7
 8004b44:	08004cf7 	.word	0x08004cf7
 8004b48:	08004cf7 	.word	0x08004cf7
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004cf7 	.word	0x08004cf7
 8004b54:	08004cf7 	.word	0x08004cf7
 8004b58:	08004cf7 	.word	0x08004cf7
 8004b5c:	08004c75 	.word	0x08004c75
 8004b60:	08004cf7 	.word	0x08004cf7
 8004b64:	08004cf7 	.word	0x08004cf7
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004cb5 	.word	0x08004cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb52 	bl	8005220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e0a5      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fbc2 	bl	8005340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e084      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fc2b 	bl	8005454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e064      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fc93 	bl	8005564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e043      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fcdc 	bl	8005638 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0204 	bic.w	r2, r2, #4
 8004c9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cb2:	e023      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fd20 	bl	8005700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_ConfigClockSource+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0dc      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x1d6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a64      	ldr	r2, [pc, #400]	@ (8004ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f000 80a9 	beq.w	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004d68:	4a62      	ldr	r2, [pc, #392]	@ (8004ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	f200 80ae 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d70:	4a61      	ldr	r2, [pc, #388]	@ (8004ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	f000 80a1 	beq.w	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004d78:	4a5f      	ldr	r2, [pc, #380]	@ (8004ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	f200 80a6 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d80:	4a5e      	ldr	r2, [pc, #376]	@ (8004efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	f000 8099 	beq.w	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004d88:	4a5c      	ldr	r2, [pc, #368]	@ (8004efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	f200 809e 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004d90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d94:	f000 8091 	beq.w	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004d98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d9c:	f200 8096 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004da0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da4:	f000 8089 	beq.w	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dac:	f200 808e 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db4:	d03e      	beq.n	8004e34 <HAL_TIM_ConfigClockSource+0x124>
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dba:	f200 8087 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_TIM_ConfigClockSource+0x1c2>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	d87f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dcc:	2b70      	cmp	r3, #112	@ 0x70
 8004dce:	d01a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xf6>
 8004dd0:	2b70      	cmp	r3, #112	@ 0x70
 8004dd2:	d87b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dd4:	2b60      	cmp	r3, #96	@ 0x60
 8004dd6:	d050      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x16a>
 8004dd8:	2b60      	cmp	r3, #96	@ 0x60
 8004dda:	d877      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004ddc:	2b50      	cmp	r3, #80	@ 0x50
 8004dde:	d03c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x14a>
 8004de0:	2b50      	cmp	r3, #80	@ 0x50
 8004de2:	d873      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d058      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x18a>
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d86f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dec:	2b30      	cmp	r3, #48	@ 0x30
 8004dee:	d064      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d86b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d060      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d867      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d05a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x1aa>
 8004e04:	e062      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e16:	f000 fd57 	bl	80058c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]
      break;
 8004e32:	e04f      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e44:	f000 fd40 	bl	80058c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e56:	609a      	str	r2, [r3, #8]
      break;
 8004e58:	e03c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 fcb0 	bl	80057cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2150      	movs	r1, #80	@ 0x50
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd0a 	bl	800588c <TIM_ITRx_SetConfig>
      break;
 8004e78:	e02c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fccf 	bl	800582a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2160      	movs	r1, #96	@ 0x60
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fcfa 	bl	800588c <TIM_ITRx_SetConfig>
      break;
 8004e98:	e01c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fc90 	bl	80057cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2140      	movs	r1, #64	@ 0x40
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fcea 	bl	800588c <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e00c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 fce1 	bl	800588c <TIM_ITRx_SetConfig>
      break;
 8004eca:	e003      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	ffceff88 	.word	0xffceff88
 8004ef4:	00100040 	.word	0x00100040
 8004ef8:	00100030 	.word	0x00100030
 8004efc:	00100020 	.word	0x00100020

08004f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d107      	bne.n	8004f64 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f62:	e02a      	b.n	8004fba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d107      	bne.n	8004f7e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2202      	movs	r2, #2
 8004f72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f7c:	e01d      	b.n	8004fba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d107      	bne.n	8004f98 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f96:	e010      	b.n	8004fba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d107      	bne.n	8004fb2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb0:	e003      	b.n	8004fba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff ffb4 	bl	8004f28 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	771a      	strb	r2, [r3, #28]
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d10b      	bne.n	8004ffe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d136      	bne.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ffc:	e031      	b.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d10b      	bne.n	8005020 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2202      	movs	r2, #2
 800500c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d125      	bne.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800501e:	e020      	b.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	429a      	cmp	r2, r3
 8005028:	d10b      	bne.n	8005042 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2204      	movs	r2, #4
 800502e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d114      	bne.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005040:	e00f      	b.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d10a      	bne.n	8005062 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2208      	movs	r2, #8
 8005050:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff4c 	bl	8004f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	771a      	strb	r2, [r3, #28]
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d103      	bne.n	8005096 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	771a      	strb	r2, [r3, #28]
 8005094:	e019      	b.n	80050ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d103      	bne.n	80050a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2202      	movs	r2, #2
 80050a4:	771a      	strb	r2, [r3, #28]
 80050a6:	e010      	b.n	80050ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d103      	bne.n	80050ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2204      	movs	r2, #4
 80050b6:	771a      	strb	r2, [r3, #28]
 80050b8:	e007      	b.n	80050ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d102      	bne.n	80050ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2208      	movs	r2, #8
 80050c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff22 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	771a      	strb	r2, [r3, #28]
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a43      	ldr	r2, [pc, #268]	@ (8005200 <TIM_Base_SetConfig+0x120>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fe:	d00f      	beq.n	8005120 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a40      	ldr	r2, [pc, #256]	@ (8005204 <TIM_Base_SetConfig+0x124>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a3f      	ldr	r2, [pc, #252]	@ (8005208 <TIM_Base_SetConfig+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a3e      	ldr	r2, [pc, #248]	@ (800520c <TIM_Base_SetConfig+0x12c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3d      	ldr	r2, [pc, #244]	@ (8005210 <TIM_Base_SetConfig+0x130>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d108      	bne.n	8005132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a32      	ldr	r2, [pc, #200]	@ (8005200 <TIM_Base_SetConfig+0x120>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01f      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005140:	d01b      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2f      	ldr	r2, [pc, #188]	@ (8005204 <TIM_Base_SetConfig+0x124>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d017      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2e      	ldr	r2, [pc, #184]	@ (8005208 <TIM_Base_SetConfig+0x128>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2d      	ldr	r2, [pc, #180]	@ (800520c <TIM_Base_SetConfig+0x12c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00f      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2c      	ldr	r2, [pc, #176]	@ (8005210 <TIM_Base_SetConfig+0x130>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2b      	ldr	r2, [pc, #172]	@ (8005214 <TIM_Base_SetConfig+0x134>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d007      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2a      	ldr	r2, [pc, #168]	@ (8005218 <TIM_Base_SetConfig+0x138>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a29      	ldr	r2, [pc, #164]	@ (800521c <TIM_Base_SetConfig+0x13c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a14      	ldr	r2, [pc, #80]	@ (8005200 <TIM_Base_SetConfig+0x120>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00f      	beq.n	80051d2 <TIM_Base_SetConfig+0xf2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <TIM_Base_SetConfig+0x130>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00b      	beq.n	80051d2 <TIM_Base_SetConfig+0xf2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <TIM_Base_SetConfig+0x134>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <TIM_Base_SetConfig+0xf2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a14      	ldr	r2, [pc, #80]	@ (8005218 <TIM_Base_SetConfig+0x138>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_Base_SetConfig+0xf2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a13      	ldr	r2, [pc, #76]	@ (800521c <TIM_Base_SetConfig+0x13c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d103      	bne.n	80051da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f043 0204 	orr.w	r2, r3, #4
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800

08005220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f023 0201 	bic.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4b37      	ldr	r3, [pc, #220]	@ (8005328 <TIM_OC1_SetConfig+0x108>)
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0303 	bic.w	r3, r3, #3
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 0302 	bic.w	r3, r3, #2
 8005268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2d      	ldr	r2, [pc, #180]	@ (800532c <TIM_OC1_SetConfig+0x10c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00f      	beq.n	800529c <TIM_OC1_SetConfig+0x7c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a2c      	ldr	r2, [pc, #176]	@ (8005330 <TIM_OC1_SetConfig+0x110>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00b      	beq.n	800529c <TIM_OC1_SetConfig+0x7c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2b      	ldr	r2, [pc, #172]	@ (8005334 <TIM_OC1_SetConfig+0x114>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d007      	beq.n	800529c <TIM_OC1_SetConfig+0x7c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2a      	ldr	r2, [pc, #168]	@ (8005338 <TIM_OC1_SetConfig+0x118>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC1_SetConfig+0x7c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a29      	ldr	r2, [pc, #164]	@ (800533c <TIM_OC1_SetConfig+0x11c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d10c      	bne.n	80052b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0308 	bic.w	r3, r3, #8
 80052a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <TIM_OC1_SetConfig+0x10c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_OC1_SetConfig+0xbe>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005330 <TIM_OC1_SetConfig+0x110>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_OC1_SetConfig+0xbe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005334 <TIM_OC1_SetConfig+0x114>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_OC1_SetConfig+0xbe>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <TIM_OC1_SetConfig+0x118>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_OC1_SetConfig+0xbe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a18      	ldr	r2, [pc, #96]	@ (800533c <TIM_OC1_SetConfig+0x11c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	fffeff8f 	.word	0xfffeff8f
 800532c:	40010000 	.word	0x40010000
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f023 0210 	bic.w	r2, r3, #16
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4b34      	ldr	r3, [pc, #208]	@ (800543c <TIM_OC2_SetConfig+0xfc>)
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0320 	bic.w	r3, r3, #32
 800538a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a29      	ldr	r2, [pc, #164]	@ (8005440 <TIM_OC2_SetConfig+0x100>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_OC2_SetConfig+0x68>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a28      	ldr	r2, [pc, #160]	@ (8005444 <TIM_OC2_SetConfig+0x104>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10d      	bne.n	80053c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005440 <TIM_OC2_SetConfig+0x100>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00f      	beq.n	80053ec <TIM_OC2_SetConfig+0xac>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <TIM_OC2_SetConfig+0x104>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_OC2_SetConfig+0xac>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <TIM_OC2_SetConfig+0x108>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC2_SetConfig+0xac>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <TIM_OC2_SetConfig+0x10c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC2_SetConfig+0xac>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005450 <TIM_OC2_SetConfig+0x110>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d113      	bne.n	8005414 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	feff8fff 	.word	0xfeff8fff
 8005440:	40010000 	.word	0x40010000
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4b33      	ldr	r3, [pc, #204]	@ (800554c <TIM_OC3_SetConfig+0xf8>)
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a28      	ldr	r2, [pc, #160]	@ (8005550 <TIM_OC3_SetConfig+0xfc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC3_SetConfig+0x66>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a27      	ldr	r2, [pc, #156]	@ (8005554 <TIM_OC3_SetConfig+0x100>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10d      	bne.n	80054d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <TIM_OC3_SetConfig+0xfc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_OC3_SetConfig+0xaa>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <TIM_OC3_SetConfig+0x100>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_OC3_SetConfig+0xaa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <TIM_OC3_SetConfig+0x104>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_OC3_SetConfig+0xaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1a      	ldr	r2, [pc, #104]	@ (800555c <TIM_OC3_SetConfig+0x108>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_OC3_SetConfig+0xaa>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <TIM_OC3_SetConfig+0x10c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d113      	bne.n	8005526 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800550c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	621a      	str	r2, [r3, #32]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	fffeff8f 	.word	0xfffeff8f
 8005550:	40010000 	.word	0x40010000
 8005554:	40010400 	.word	0x40010400
 8005558:	40014000 	.word	0x40014000
 800555c:	40014400 	.word	0x40014400
 8005560:	40014800 	.word	0x40014800

08005564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4b24      	ldr	r3, [pc, #144]	@ (8005620 <TIM_OC4_SetConfig+0xbc>)
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a19      	ldr	r2, [pc, #100]	@ (8005624 <TIM_OC4_SetConfig+0xc0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <TIM_OC4_SetConfig+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a18      	ldr	r2, [pc, #96]	@ (8005628 <TIM_OC4_SetConfig+0xc4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <TIM_OC4_SetConfig+0x80>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a17      	ldr	r2, [pc, #92]	@ (800562c <TIM_OC4_SetConfig+0xc8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <TIM_OC4_SetConfig+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <TIM_OC4_SetConfig+0xcc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC4_SetConfig+0x80>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <TIM_OC4_SetConfig+0xd0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d109      	bne.n	80055f8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	feff8fff 	.word	0xfeff8fff
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4b21      	ldr	r3, [pc, #132]	@ (80056e8 <TIM_OC5_SetConfig+0xb0>)
 8005664:	4013      	ands	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <TIM_OC5_SetConfig+0xb4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_OC5_SetConfig+0x76>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a17      	ldr	r2, [pc, #92]	@ (80056f0 <TIM_OC5_SetConfig+0xb8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_OC5_SetConfig+0x76>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <TIM_OC5_SetConfig+0xbc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_OC5_SetConfig+0x76>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a15      	ldr	r2, [pc, #84]	@ (80056f8 <TIM_OC5_SetConfig+0xc0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC5_SetConfig+0x76>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <TIM_OC5_SetConfig+0xc4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d109      	bne.n	80056c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	621a      	str	r2, [r3, #32]
}
 80056dc:	bf00      	nop
 80056de:	371c      	adds	r7, #28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	fffeff8f 	.word	0xfffeff8f
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40014000 	.word	0x40014000
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800

08005700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4b22      	ldr	r3, [pc, #136]	@ (80057b4 <TIM_OC6_SetConfig+0xb4>)
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	051b      	lsls	r3, r3, #20
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a19      	ldr	r2, [pc, #100]	@ (80057b8 <TIM_OC6_SetConfig+0xb8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00f      	beq.n	8005778 <TIM_OC6_SetConfig+0x78>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a18      	ldr	r2, [pc, #96]	@ (80057bc <TIM_OC6_SetConfig+0xbc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_OC6_SetConfig+0x78>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a17      	ldr	r2, [pc, #92]	@ (80057c0 <TIM_OC6_SetConfig+0xc0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_OC6_SetConfig+0x78>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a16      	ldr	r2, [pc, #88]	@ (80057c4 <TIM_OC6_SetConfig+0xc4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_OC6_SetConfig+0x78>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a15      	ldr	r2, [pc, #84]	@ (80057c8 <TIM_OC6_SetConfig+0xc8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d109      	bne.n	800578c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800577e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	feff8fff 	.word	0xfeff8fff
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0201 	bic.w	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 030a 	bic.w	r3, r3, #10
 8005808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 0210 	bic.w	r2, r3, #16
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005866:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <TIM_ITRx_SetConfig+0x38>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f043 0307 	orr.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	609a      	str	r2, [r3, #8]
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	ffcfff8f 	.word	0xffcfff8f

080058c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2201      	movs	r2, #1
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e06d      	b.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a30      	ldr	r2, [pc, #192]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d108      	bne.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a20      	ldr	r2, [pc, #128]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d022      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059de:	d01d      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a15      	ldr	r2, [pc, #84]	@ (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10c      	bne.n	8005a36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40001800 	.word	0x40001800
 8005a6c:	40014000 	.word	0x40014000

08005a70 <memset>:
 8005a70:	4402      	add	r2, r0
 8005a72:	4603      	mov	r3, r0
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d100      	bne.n	8005a7a <memset+0xa>
 8005a78:	4770      	bx	lr
 8005a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7e:	e7f9      	b.n	8005a74 <memset+0x4>

08005a80 <__errno>:
 8005a80:	4b01      	ldr	r3, [pc, #4]	@ (8005a88 <__errno+0x8>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	24000010 	.word	0x24000010

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8005ac4 <__libc_init_array+0x38>)
 8005a90:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac8 <__libc_init_array+0x3c>)
 8005a92:	1b64      	subs	r4, r4, r5
 8005a94:	10a4      	asrs	r4, r4, #2
 8005a96:	2600      	movs	r6, #0
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8005acc <__libc_init_array+0x40>)
 8005a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ad0 <__libc_init_array+0x44>)
 8005aa0:	f000 fb12 	bl	80060c8 <_init>
 8005aa4:	1b64      	subs	r4, r4, r5
 8005aa6:	10a4      	asrs	r4, r4, #2
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	080079c0 	.word	0x080079c0
 8005ac8:	080079c0 	.word	0x080079c0
 8005acc:	080079c0 	.word	0x080079c0
 8005ad0:	080079c4 	.word	0x080079c4

08005ad4 <checkint>:
 8005ad4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ad8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8005adc:	429a      	cmp	r2, r3
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	dd2a      	ble.n	8005b38 <checkint+0x64>
 8005ae2:	f240 4333 	movw	r3, #1075	@ 0x433
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	dc24      	bgt.n	8005b34 <checkint+0x60>
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	f1a3 0620 	sub.w	r6, r3, #32
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	fa02 f403 	lsl.w	r4, r2, r3
 8005af8:	fa02 f606 	lsl.w	r6, r2, r6
 8005afc:	f1c3 0520 	rsb	r5, r3, #32
 8005b00:	fa22 f505 	lsr.w	r5, r2, r5
 8005b04:	4334      	orrs	r4, r6
 8005b06:	432c      	orrs	r4, r5
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	ea20 0202 	bic.w	r2, r0, r2
 8005b0e:	ea21 0404 	bic.w	r4, r1, r4
 8005b12:	4322      	orrs	r2, r4
 8005b14:	f1a3 0420 	sub.w	r4, r3, #32
 8005b18:	f1c3 0220 	rsb	r2, r3, #32
 8005b1c:	d10c      	bne.n	8005b38 <checkint+0x64>
 8005b1e:	40d8      	lsrs	r0, r3
 8005b20:	fa01 f302 	lsl.w	r3, r1, r2
 8005b24:	4318      	orrs	r0, r3
 8005b26:	40e1      	lsrs	r1, r4
 8005b28:	4308      	orrs	r0, r1
 8005b2a:	f000 0001 	and.w	r0, r0, #1
 8005b2e:	f1d0 0002 	rsbs	r0, r0, #2
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	2002      	movs	r0, #2
 8005b36:	e7fc      	b.n	8005b32 <checkint+0x5e>
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e7fa      	b.n	8005b32 <checkint+0x5e>
 8005b3c:	0000      	movs	r0, r0
	...

08005b40 <pow>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	ee10 4a90 	vmov	r4, s1
 8005b48:	ed2d 8b0a 	vpush	{d8-d12}
 8005b4c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8005b50:	ee11 aa90 	vmov	sl, s3
 8005b54:	f108 32ff 	add.w	r2, r8, #4294967295
 8005b58:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	ee10 5a10 	vmov	r5, s0
 8005b62:	ee11 0a10 	vmov	r0, s2
 8005b66:	b087      	sub	sp, #28
 8005b68:	46c4      	mov	ip, r8
 8005b6a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8005b6e:	d806      	bhi.n	8005b7e <pow+0x3e>
 8005b70:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8005b74:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8005b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b7a:	f240 8157 	bls.w	8005e2c <pow+0x2ec>
 8005b7e:	1802      	adds	r2, r0, r0
 8005b80:	eb4a 010a 	adc.w	r1, sl, sl
 8005b84:	f06f 0b01 	mvn.w	fp, #1
 8005b88:	1e57      	subs	r7, r2, #1
 8005b8a:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005b8e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8005b92:	45bb      	cmp	fp, r7
 8005b94:	eb7e 0303 	sbcs.w	r3, lr, r3
 8005b98:	d242      	bcs.n	8005c20 <pow+0xe0>
 8005b9a:	ea52 0301 	orrs.w	r3, r2, r1
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	d10c      	bne.n	8005bbe <pow+0x7e>
 8005ba4:	196d      	adds	r5, r5, r5
 8005ba6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8005baa:	4164      	adcs	r4, r4
 8005bac:	42ab      	cmp	r3, r5
 8005bae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005bb2:	41a3      	sbcs	r3, r4
 8005bb4:	f0c0 808f 	bcc.w	8005cd6 <pow+0x196>
 8005bb8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005bbc:	e02b      	b.n	8005c16 <pow+0xd6>
 8005bbe:	4ed4      	ldr	r6, [pc, #848]	@ (8005f10 <pow+0x3d0>)
 8005bc0:	42b4      	cmp	r4, r6
 8005bc2:	bf08      	it	eq
 8005bc4:	429d      	cmpeq	r5, r3
 8005bc6:	d109      	bne.n	8005bdc <pow+0x9c>
 8005bc8:	1800      	adds	r0, r0, r0
 8005bca:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8005bce:	eb4a 0a0a 	adc.w	sl, sl, sl
 8005bd2:	4283      	cmp	r3, r0
 8005bd4:	4bcf      	ldr	r3, [pc, #828]	@ (8005f14 <pow+0x3d4>)
 8005bd6:	eb73 030a 	sbcs.w	r3, r3, sl
 8005bda:	e7eb      	b.n	8005bb4 <pow+0x74>
 8005bdc:	196d      	adds	r5, r5, r5
 8005bde:	48ce      	ldr	r0, [pc, #824]	@ (8005f18 <pow+0x3d8>)
 8005be0:	4164      	adcs	r4, r4
 8005be2:	42ab      	cmp	r3, r5
 8005be4:	eb70 0604 	sbcs.w	r6, r0, r4
 8005be8:	d375      	bcc.n	8005cd6 <pow+0x196>
 8005bea:	4281      	cmp	r1, r0
 8005bec:	bf08      	it	eq
 8005bee:	429a      	cmpeq	r2, r3
 8005bf0:	d171      	bne.n	8005cd6 <pow+0x196>
 8005bf2:	4aca      	ldr	r2, [pc, #808]	@ (8005f1c <pow+0x3dc>)
 8005bf4:	4294      	cmp	r4, r2
 8005bf6:	bf08      	it	eq
 8005bf8:	429d      	cmpeq	r5, r3
 8005bfa:	d0dd      	beq.n	8005bb8 <pow+0x78>
 8005bfc:	4294      	cmp	r4, r2
 8005bfe:	ea6f 0a0a 	mvn.w	sl, sl
 8005c02:	bf34      	ite	cc
 8005c04:	2400      	movcc	r4, #0
 8005c06:	2401      	movcs	r4, #1
 8005c08:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8005c0c:	4554      	cmp	r4, sl
 8005c0e:	f040 81dc 	bne.w	8005fca <pow+0x48a>
 8005c12:	ee21 0b01 	vmul.f64	d0, d1, d1
 8005c16:	b007      	add	sp, #28
 8005c18:	ecbd 8b0a 	vpop	{d8-d12}
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	196f      	adds	r7, r5, r5
 8005c22:	eb44 0904 	adc.w	r9, r4, r4
 8005c26:	1e7a      	subs	r2, r7, #1
 8005c28:	f169 0300 	sbc.w	r3, r9, #0
 8005c2c:	4593      	cmp	fp, r2
 8005c2e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8005c32:	d225      	bcs.n	8005c80 <pow+0x140>
 8005c34:	ee20 0b00 	vmul.f64	d0, d0, d0
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	da13      	bge.n	8005c64 <pow+0x124>
 8005c3c:	4651      	mov	r1, sl
 8005c3e:	f7ff ff49 	bl	8005ad4 <checkint>
 8005c42:	2801      	cmp	r0, #1
 8005c44:	d10e      	bne.n	8005c64 <pow+0x124>
 8005c46:	eeb1 0b40 	vneg.f64	d0, d0
 8005c4a:	ea57 0909 	orrs.w	r9, r7, r9
 8005c4e:	d10b      	bne.n	8005c68 <pow+0x128>
 8005c50:	f1ba 0f00 	cmp.w	sl, #0
 8005c54:	dadf      	bge.n	8005c16 <pow+0xd6>
 8005c56:	b007      	add	sp, #28
 8005c58:	ecbd 8b0a 	vpop	{d8-d12}
 8005c5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	f000 b9ee 	b.w	8006040 <__math_divzero>
 8005c64:	2000      	movs	r0, #0
 8005c66:	e7f0      	b.n	8005c4a <pow+0x10a>
 8005c68:	f1ba 0f00 	cmp.w	sl, #0
 8005c6c:	dad3      	bge.n	8005c16 <pow+0xd6>
 8005c6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005c72:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8005c76:	ed8d 7b00 	vstr	d7, [sp]
 8005c7a:	ed9d 0b00 	vldr	d0, [sp]
 8005c7e:	e7ca      	b.n	8005c16 <pow+0xd6>
 8005c80:	2c00      	cmp	r4, #0
 8005c82:	da2b      	bge.n	8005cdc <pow+0x19c>
 8005c84:	4651      	mov	r1, sl
 8005c86:	f7ff ff25 	bl	8005ad4 <checkint>
 8005c8a:	b930      	cbnz	r0, 8005c9a <pow+0x15a>
 8005c8c:	b007      	add	sp, #28
 8005c8e:	ecbd 8b0a 	vpop	{d8-d12}
 8005c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	f000 b9eb 	b.w	8006070 <__math_invalid>
 8005c9a:	1e41      	subs	r1, r0, #1
 8005c9c:	4248      	negs	r0, r1
 8005c9e:	4148      	adcs	r0, r1
 8005ca0:	0480      	lsls	r0, r0, #18
 8005ca2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005ca6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8005caa:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8005cae:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8005cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cb4:	d92d      	bls.n	8005d12 <pow+0x1d2>
 8005cb6:	4b96      	ldr	r3, [pc, #600]	@ (8005f10 <pow+0x3d0>)
 8005cb8:	2000      	movs	r0, #0
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	bf08      	it	eq
 8005cbe:	4285      	cmpeq	r5, r0
 8005cc0:	f43f af7a 	beq.w	8005bb8 <pow+0x78>
 8005cc4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8005cc8:	428a      	cmp	r2, r1
 8005cca:	d80c      	bhi.n	8005ce6 <pow+0x1a6>
 8005ccc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005cd0:	42a8      	cmp	r0, r5
 8005cd2:	41a3      	sbcs	r3, r4
 8005cd4:	d204      	bcs.n	8005ce0 <pow+0x1a0>
 8005cd6:	ee31 0b00 	vadd.f64	d0, d1, d0
 8005cda:	e79c      	b.n	8005c16 <pow+0xd6>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e7e4      	b.n	8005caa <pow+0x16a>
 8005ce0:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005ce4:	e797      	b.n	8005c16 <pow+0xd6>
 8005ce6:	2d01      	cmp	r5, #1
 8005ce8:	eb74 0303 	sbcs.w	r3, r4, r3
 8005cec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005cf0:	bf34      	ite	cc
 8005cf2:	2301      	movcc	r3, #1
 8005cf4:	2300      	movcs	r3, #0
 8005cf6:	4296      	cmp	r6, r2
 8005cf8:	bf8c      	ite	hi
 8005cfa:	2600      	movhi	r6, #0
 8005cfc:	2601      	movls	r6, #1
 8005cfe:	42b3      	cmp	r3, r6
 8005d00:	f000 809c 	beq.w	8005e3c <pow+0x2fc>
 8005d04:	b007      	add	sp, #28
 8005d06:	ecbd 8b0a 	vpop	{d8-d12}
 8005d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0e:	f000 b98f 	b.w	8006030 <__math_oflow>
 8005d12:	f1bc 0f00 	cmp.w	ip, #0
 8005d16:	d10a      	bne.n	8005d2e <pow+0x1ee>
 8005d18:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8005f00 <pow+0x3c0>
 8005d1c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005d20:	ec53 2b17 	vmov	r2, r3, d7
 8005d24:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8005d28:	4615      	mov	r5, r2
 8005d2a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8005d2e:	4a7c      	ldr	r2, [pc, #496]	@ (8005f20 <pow+0x3e0>)
 8005d30:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8005d34:	4422      	add	r2, r4
 8005d36:	1513      	asrs	r3, r2, #20
 8005d38:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8005d3c:	ee03 3a10 	vmov	s6, r3
 8005d40:	0d12      	lsrs	r2, r2, #20
 8005d42:	4b78      	ldr	r3, [pc, #480]	@ (8005f24 <pow+0x3e4>)
 8005d44:	0512      	lsls	r2, r2, #20
 8005d46:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8005d4a:	1aa7      	subs	r7, r4, r2
 8005d4c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8005d50:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8005d54:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8005d58:	1e2e      	subs	r6, r5, #0
 8005d5a:	ec47 6b14 	vmov	d4, r6, r7
 8005d5e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8005d62:	eea4 6b05 	vfma.f64	d6, d4, d5
 8005d66:	ed93 5b00 	vldr	d5, [r3]
 8005d6a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8005d6e:	eea3 2b05 	vfma.f64	d2, d3, d5
 8005d72:	ed93 5b02 	vldr	d5, [r3, #8]
 8005d76:	ee36 4b02 	vadd.f64	d4, d6, d2
 8005d7a:	ee32 2b44 	vsub.f64	d2, d2, d4
 8005d7e:	eea3 7b05 	vfma.f64	d7, d3, d5
 8005d82:	ed93 5b04 	vldr	d5, [r3, #16]
 8005d86:	ee32 2b06 	vadd.f64	d2, d2, d6
 8005d8a:	ee37 7b02 	vadd.f64	d7, d7, d2
 8005d8e:	ee26 5b05 	vmul.f64	d5, d6, d5
 8005d92:	ee26 0b05 	vmul.f64	d0, d6, d5
 8005d96:	ee34 8b00 	vadd.f64	d8, d4, d0
 8005d9a:	eeb0 9b40 	vmov.f64	d9, d0
 8005d9e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8005da2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8005da6:	ee34 ab00 	vadd.f64	d10, d4, d0
 8005daa:	ed93 5b06 	vldr	d5, [r3, #24]
 8005dae:	ee26 bb00 	vmul.f64	d11, d6, d0
 8005db2:	ee37 7b09 	vadd.f64	d7, d7, d9
 8005db6:	ed93 4b08 	vldr	d4, [r3, #32]
 8005dba:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8005dbe:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8005dc2:	eea6 5b04 	vfma.f64	d5, d6, d4
 8005dc6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8005dca:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8005dce:	eea6 4b03 	vfma.f64	d4, d6, d3
 8005dd2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8005dd6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8005dda:	eea0 4b03 	vfma.f64	d4, d0, d3
 8005dde:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005de2:	eeab 7b05 	vfma.f64	d7, d11, d5
 8005de6:	ee38 4b07 	vadd.f64	d4, d8, d7
 8005dea:	ee21 6b04 	vmul.f64	d6, d1, d4
 8005dee:	ee16 3a90 	vmov	r3, s13
 8005df2:	eeb0 5b46 	vmov.f64	d5, d6
 8005df6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005dfa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8005dfe:	18b2      	adds	r2, r6, r2
 8005e00:	2a3e      	cmp	r2, #62	@ 0x3e
 8005e02:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8005e06:	ee38 8b44 	vsub.f64	d8, d8, d4
 8005e0a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005e0e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8005e12:	d91b      	bls.n	8005e4c <pow+0x30c>
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	da0b      	bge.n	8005e30 <pow+0x2f0>
 8005e18:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005e1c:	ee36 0b00 	vadd.f64	d0, d6, d0
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f43f aef8 	beq.w	8005c16 <pow+0xd6>
 8005e26:	eeb1 0b40 	vneg.f64	d0, d0
 8005e2a:	e6f4      	b.n	8005c16 <pow+0xd6>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e77e      	b.n	8005d2e <pow+0x1ee>
 8005e30:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8005e34:	d909      	bls.n	8005e4a <pow+0x30a>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f6bf af64 	bge.w	8005d04 <pow+0x1c4>
 8005e3c:	b007      	add	sp, #28
 8005e3e:	ecbd 8b0a 	vpop	{d8-d12}
 8005e42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e46:	f000 b8eb 	b.w	8006020 <__math_uflow>
 8005e4a:	2600      	movs	r6, #0
 8005e4c:	4936      	ldr	r1, [pc, #216]	@ (8005f28 <pow+0x3e8>)
 8005e4e:	ed91 4b02 	vldr	d4, [r1, #8]
 8005e52:	ed91 3b00 	vldr	d3, [r1]
 8005e56:	eeb0 7b44 	vmov.f64	d7, d4
 8005e5a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8005e5e:	ee17 5a10 	vmov	r5, s14
 8005e62:	ee37 7b44 	vsub.f64	d7, d7, d4
 8005e66:	ed91 4b04 	vldr	d4, [r1, #16]
 8005e6a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8005e6e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005e72:	ed91 4b06 	vldr	d4, [r1, #24]
 8005e76:	18dc      	adds	r4, r3, r3
 8005e78:	f104 030f 	add.w	r3, r4, #15
 8005e7c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005e80:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005e84:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8005e88:	ee35 5b06 	vadd.f64	d5, d5, d6
 8005e8c:	ee25 6b05 	vmul.f64	d6, d5, d5
 8005e90:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8005e94:	ed91 4b08 	vldr	d4, [r1, #32]
 8005e98:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005e9c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8005ea0:	eea5 4b03 	vfma.f64	d4, d5, d3
 8005ea4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8005ea8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005eac:	ee26 6b06 	vmul.f64	d6, d6, d6
 8005eb0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8005eb4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005eb8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005ebc:	eea5 4b03 	vfma.f64	d4, d5, d3
 8005ec0:	1940      	adds	r0, r0, r5
 8005ec2:	2700      	movs	r7, #0
 8005ec4:	eb17 020c 	adds.w	r2, r7, ip
 8005ec8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005ecc:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005ed0:	2e00      	cmp	r6, #0
 8005ed2:	d175      	bne.n	8005fc0 <pow+0x480>
 8005ed4:	42bd      	cmp	r5, r7
 8005ed6:	db29      	blt.n	8005f2c <pow+0x3ec>
 8005ed8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8005edc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	ec41 0b10 	vmov	d0, r0, r1
 8005ee6:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005eea:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8005f08 <pow+0x3c8>
 8005eee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005ef2:	b007      	add	sp, #28
 8005ef4:	ecbd 8b0a 	vpop	{d8-d12}
 8005ef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	f000 b8d0 	b.w	80060a0 <__math_check_oflow>
 8005f00:	00000000 	.word	0x00000000
 8005f04:	43300000 	.word	0x43300000
 8005f08:	00000000 	.word	0x00000000
 8005f0c:	7f000000 	.word	0x7f000000
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	fff00000 	.word	0xfff00000
 8005f18:	ffe00000 	.word	0xffe00000
 8005f1c:	7fe00000 	.word	0x7fe00000
 8005f20:	c0196aab 	.word	0xc0196aab
 8005f24:	08006108 	.word	0x08006108
 8005f28:	08007150 	.word	0x08007150
 8005f2c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8005f30:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8005f34:	4610      	mov	r0, r2
 8005f36:	ec41 0b15 	vmov	d5, r0, r1
 8005f3a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8005f3e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8005f42:	ee35 7b06 	vadd.f64	d7, d5, d6
 8005f46:	eeb0 4bc7 	vabs.f64	d4, d7
 8005f4a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8005f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f52:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8005fd0 <pow+0x490>
 8005f56:	d52a      	bpl.n	8005fae <pow+0x46e>
 8005f58:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005f5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	ee35 5b06 	vadd.f64	d5, d5, d6
 8005f68:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8005f6c:	bf58      	it	pl
 8005f6e:	eeb0 4b43 	vmovpl.f64	d4, d3
 8005f72:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005f76:	ee34 6b43 	vsub.f64	d6, d4, d3
 8005f7a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005f7e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8005f82:	ee36 6b03 	vadd.f64	d6, d6, d3
 8005f86:	ee36 7b44 	vsub.f64	d7, d6, d4
 8005f8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	d104      	bne.n	8005f9e <pow+0x45e>
 8005f94:	4632      	mov	r2, r6
 8005f96:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005f9a:	ec43 2b17 	vmov	d7, r2, r3
 8005f9e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fa2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005fa6:	ee26 6b00 	vmul.f64	d6, d6, d0
 8005faa:	ed8d 6b04 	vstr	d6, [sp, #16]
 8005fae:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005fb2:	b007      	add	sp, #28
 8005fb4:	ecbd 8b0a 	vpop	{d8-d12}
 8005fb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	f000 b867 	b.w	800608e <__math_check_uflow>
 8005fc0:	ec43 2b10 	vmov	d0, r2, r3
 8005fc4:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005fc8:	e625      	b.n	8005c16 <pow+0xd6>
 8005fca:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8005fd8 <pow+0x498>
 8005fce:	e622      	b.n	8005c16 <pow+0xd6>
 8005fd0:	00000000 	.word	0x00000000
 8005fd4:	00100000 	.word	0x00100000
	...

08005fe0 <with_errno>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	ed2d 8b02 	vpush	{d8}
 8005fe6:	eeb0 8b40 	vmov.f64	d8, d0
 8005fea:	4604      	mov	r4, r0
 8005fec:	f7ff fd48 	bl	8005a80 <__errno>
 8005ff0:	eeb0 0b48 	vmov.f64	d0, d8
 8005ff4:	ecbd 8b02 	vpop	{d8}
 8005ff8:	6004      	str	r4, [r0, #0]
 8005ffa:	bd10      	pop	{r4, pc}

08005ffc <xflow>:
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	b158      	cbz	r0, 8006018 <xflow+0x1c>
 8006000:	eeb1 7b40 	vneg.f64	d7, d0
 8006004:	ed8d 7b00 	vstr	d7, [sp]
 8006008:	ed9d 7b00 	vldr	d7, [sp]
 800600c:	2022      	movs	r0, #34	@ 0x22
 800600e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006012:	b002      	add	sp, #8
 8006014:	f7ff bfe4 	b.w	8005fe0 <with_errno>
 8006018:	eeb0 7b40 	vmov.f64	d7, d0
 800601c:	e7f2      	b.n	8006004 <xflow+0x8>
	...

08006020 <__math_uflow>:
 8006020:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006028 <__math_uflow+0x8>
 8006024:	f7ff bfea 	b.w	8005ffc <xflow>
 8006028:	00000000 	.word	0x00000000
 800602c:	10000000 	.word	0x10000000

08006030 <__math_oflow>:
 8006030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006038 <__math_oflow+0x8>
 8006034:	f7ff bfe2 	b.w	8005ffc <xflow>
 8006038:	00000000 	.word	0x00000000
 800603c:	70000000 	.word	0x70000000

08006040 <__math_divzero>:
 8006040:	b082      	sub	sp, #8
 8006042:	2800      	cmp	r0, #0
 8006044:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8006048:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800604c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8006050:	ed8d 7b00 	vstr	d7, [sp]
 8006054:	ed9d 0b00 	vldr	d0, [sp]
 8006058:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8006068 <__math_divzero+0x28>
 800605c:	2022      	movs	r0, #34	@ 0x22
 800605e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8006062:	b002      	add	sp, #8
 8006064:	f7ff bfbc 	b.w	8005fe0 <with_errno>
	...

08006070 <__math_invalid>:
 8006070:	eeb0 7b40 	vmov.f64	d7, d0
 8006074:	eeb4 7b47 	vcmp.f64	d7, d7
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8006080:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8006084:	d602      	bvs.n	800608c <__math_invalid+0x1c>
 8006086:	2021      	movs	r0, #33	@ 0x21
 8006088:	f7ff bfaa 	b.w	8005fe0 <with_errno>
 800608c:	4770      	bx	lr

0800608e <__math_check_uflow>:
 800608e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8006092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006096:	d102      	bne.n	800609e <__math_check_uflow+0x10>
 8006098:	2022      	movs	r0, #34	@ 0x22
 800609a:	f7ff bfa1 	b.w	8005fe0 <with_errno>
 800609e:	4770      	bx	lr

080060a0 <__math_check_oflow>:
 80060a0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 80060c0 <__math_check_oflow+0x20>
 80060a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80060a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80060ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b0:	dd02      	ble.n	80060b8 <__math_check_oflow+0x18>
 80060b2:	2022      	movs	r0, #34	@ 0x22
 80060b4:	f7ff bf94 	b.w	8005fe0 <with_errno>
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	f3af 8000 	nop.w
 80060c0:	ffffffff 	.word	0xffffffff
 80060c4:	7fefffff 	.word	0x7fefffff

080060c8 <_init>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr

080060d4 <_fini>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr
