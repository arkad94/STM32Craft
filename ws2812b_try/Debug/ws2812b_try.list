
ws2812b_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000001c  24000000  08005b08  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000480  2400001c  08005b24  0000701c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400049c  08005b24  0000749c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001096e  00000000  00000000  0000704a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002519  00000000  00000000  000179b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc0  00000000  00000000  00019ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a89  00000000  00000000  0001ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037ffc  00000000  00000000  0001b721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013663  00000000  00000000  0005371d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001652b8  00000000  00000000  00066d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001cc038  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000384c  00000000  00000000  001cc07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001cf8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005acc 	.word	0x08005acc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	08005acc 	.word	0x08005acc

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fe16 	bl	8000f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fe2d 	bl	8000f66 <HAL_NVIC_EnableIRQ>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	58024400 	.word	0x58024400

08000318 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	@ 0x28
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b34      	ldr	r3, [pc, #208]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000334:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033e:	4b30      	ldr	r3, [pc, #192]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034c:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000352:	4a2b      	ldr	r2, [pc, #172]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800035c:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800036c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000370:	4a23      	ldr	r2, [pc, #140]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000380:	f003 0302 	and.w	r3, r3, #2
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000388:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800038a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800038e:	4a1c      	ldr	r2, [pc, #112]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80003ac:	4815      	ldr	r0, [pc, #84]	@ (8000404 <MX_GPIO_Init+0xec>)
 80003ae:	f003 f8e1 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	4814      	ldr	r0, [pc, #80]	@ (8000408 <MX_GPIO_Init+0xf0>)
 80003b8:	f003 f8dc 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80003bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <MX_GPIO_Init+0xec>)
 80003d6:	f002 ff1d 	bl	8003214 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003da:	2302      	movs	r3, #2
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_GPIO_Init+0xf0>)
 80003f2:	f002 ff0f 	bl	8003214 <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	@ 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	58024400 	.word	0x58024400
 8000404:	58020400 	.word	0x58020400
 8000408:	58021000 	.word	0x58021000

0800040c <WS2812_SetColor>:
  * @param  led: LED index (0-15)
  * @param  green: Green intensity (0-255)
  * @param  red: Red intensity (0-255)
  * @param  blue: Blue intensity (0-255)
  */
void WS2812_SetColor(uint8_t led, uint8_t green, uint8_t red, uint8_t blue) {
 800040c:	b490      	push	{r4, r7}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4604      	mov	r4, r0
 8000414:	4608      	mov	r0, r1
 8000416:	4611      	mov	r1, r2
 8000418:	461a      	mov	r2, r3
 800041a:	4623      	mov	r3, r4
 800041c:	71fb      	strb	r3, [r7, #7]
 800041e:	4603      	mov	r3, r0
 8000420:	71bb      	strb	r3, [r7, #6]
 8000422:	460b      	mov	r3, r1
 8000424:	717b      	strb	r3, [r7, #5]
 8000426:	4613      	mov	r3, r2
 8000428:	713b      	strb	r3, [r7, #4]
    if (led >= NUM_LEDS) return;
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b0f      	cmp	r3, #15
 800042e:	d814      	bhi.n	800045a <WS2812_SetColor+0x4e>

    uint32_t ledOffset = led * 3;
 8000430:	79fa      	ldrb	r2, [r7, #7]
 8000432:	4613      	mov	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
    LED_Data[ledOffset] = green;     // Green
 800043a:	4a0a      	ldr	r2, [pc, #40]	@ (8000464 <WS2812_SetColor+0x58>)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	4413      	add	r3, r2
 8000440:	79ba      	ldrb	r2, [r7, #6]
 8000442:	701a      	strb	r2, [r3, #0]
    LED_Data[ledOffset + 1] = red;   // Red
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	4906      	ldr	r1, [pc, #24]	@ (8000464 <WS2812_SetColor+0x58>)
 800044a:	797a      	ldrb	r2, [r7, #5]
 800044c:	54ca      	strb	r2, [r1, r3]
    LED_Data[ledOffset + 2] = blue;  // Blue
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3302      	adds	r3, #2
 8000452:	4904      	ldr	r1, [pc, #16]	@ (8000464 <WS2812_SetColor+0x58>)
 8000454:	793a      	ldrb	r2, [r7, #4]
 8000456:	54ca      	strb	r2, [r1, r3]
 8000458:	e000      	b.n	800045c <WS2812_SetColor+0x50>
    if (led >= NUM_LEDS) return;
 800045a:	bf00      	nop
}
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bc90      	pop	{r4, r7}
 8000462:	4770      	bx	lr
 8000464:	2400039c 	.word	0x2400039c

08000468 <WS2812_Refresh>:

/**
  * @brief  Prepare and send LED data via DMA
  */
void WS2812_Refresh(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
    uint16_t pos = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	82fb      	strh	r3, [r7, #22]

    // Convert LED_Data to PWM signal
    for (int led = 0; led < NUM_LEDS; led++) {
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	e02f      	b.n	80004d8 <WS2812_Refresh+0x70>
        for (int color = 0; color < 3; color++) {
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	e026      	b.n	80004cc <WS2812_Refresh+0x64>
            uint8_t byte = LED_Data[led * 3 + color];
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	4613      	mov	r3, r2
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	441a      	add	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	4413      	add	r3, r2
 800048a:	4a23      	ldr	r2, [pc, #140]	@ (8000518 <WS2812_Refresh+0xb0>)
 800048c:	5cd3      	ldrb	r3, [r2, r3]
 800048e:	70fb      	strb	r3, [r7, #3]

            // Send each bit (MSB first)
            for (int bit = 7; bit >= 0; bit--) {
 8000490:	2307      	movs	r3, #7
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	e014      	b.n	80004c0 <WS2812_Refresh+0x58>
                LEDBuffer[pos++] = (byte & (1 << bit)) ? 56 : 28;
 8000496:	78fa      	ldrb	r2, [r7, #3]
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	fa42 f303 	asr.w	r3, r2, r3
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <WS2812_Refresh+0x42>
 80004a6:	2138      	movs	r1, #56	@ 0x38
 80004a8:	e000      	b.n	80004ac <WS2812_Refresh+0x44>
 80004aa:	211c      	movs	r1, #28
 80004ac:	8afb      	ldrh	r3, [r7, #22]
 80004ae:	1c5a      	adds	r2, r3, #1
 80004b0:	82fa      	strh	r2, [r7, #22]
 80004b2:	461a      	mov	r2, r3
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <WS2812_Refresh+0xb4>)
 80004b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (int bit = 7; bit >= 0; bit--) {
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	3b01      	subs	r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	dae7      	bge.n	8000496 <WS2812_Refresh+0x2e>
        for (int color = 0; color < 3; color++) {
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	ddd5      	ble.n	800047e <WS2812_Refresh+0x16>
    for (int led = 0; led < NUM_LEDS; led++) {
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	3301      	adds	r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	2b0f      	cmp	r3, #15
 80004dc:	ddcc      	ble.n	8000478 <WS2812_Refresh+0x10>
            }
        }
    }

    // Add reset pulse (all zeros)
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 80004de:	8afb      	ldrh	r3, [r7, #22]
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	e00a      	b.n	80004fa <WS2812_Refresh+0x92>
        LEDBuffer[pos++] = 0;
 80004e4:	8afb      	ldrh	r3, [r7, #22]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	82fa      	strh	r2, [r7, #22]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <WS2812_Refresh+0xb4>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 7fd9 	cmp.w	r3, #434	@ 0x1b2
 8000500:	dbf0      	blt.n	80004e4 <WS2812_Refresh+0x7c>
    }

    // Start DMA transfer
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)LEDBuffer, LED_BUFFER_SIZE);
 8000502:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <WS2812_Refresh+0xb4>)
 8000508:	2104      	movs	r1, #4
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <WS2812_Refresh+0xb8>)
 800050c:	f004 f8c8 	bl	80046a0 <HAL_TIM_PWM_Start_DMA>
}
 8000510:	bf00      	nop
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2400039c 	.word	0x2400039c
 800051c:	24000038 	.word	0x24000038
 8000520:	240003cc 	.word	0x240003cc

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	  /* MCU Configuration--------------------------------------------------------*/
	  HAL_Init();
 800052a:	f000 fb65 	bl	8000bf8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f833 	bl	8000598 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f7ff fef1 	bl	8000318 <MX_GPIO_Init>
  MX_DMA_Init();
 8000536:	f7ff fecf 	bl	80002d8 <MX_DMA_Init>
  MX_TIM3_Init();
 800053a:	f000 f997 	bl	800086c <MX_TIM3_Init>

  /* Initialize USER push-button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800053e:	2101      	movs	r1, #1
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fac3 	bl	8000acc <BSP_PB_Init>

  /* Initialize COM1 port */
  COM_InitTypeDef BspCOMInit;
  BspCOMInit.BaudRate   = 115200;
 8000546:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800054a:	607b      	str	r3, [r7, #4]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000550:	2300      	movs	r3, #0
 8000552:	81bb      	strh	r3, [r7, #12]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000554:	2300      	movs	r3, #0
 8000556:	81fb      	strh	r3, [r7, #14]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	823b      	strh	r3, [r7, #16]


  /* Demonstrate LED Control */
  // Clear all LEDs
  for (int i = 0; i < NUM_LEDS; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e009      	b.n	8000576 <main+0x52>
    WS2812_SetColor(i, 0, 0, 0);
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	b2d8      	uxtb	r0, r3
 8000566:	2300      	movs	r3, #0
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	f7ff ff4e 	bl	800040c <WS2812_SetColor>
  for (int i = 0; i < NUM_LEDS; i++) {
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	3301      	adds	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	ddf2      	ble.n	8000562 <main+0x3e>
  }

  // Set first LED to full red
  WS2812_SetColor(0, 0, 0, 0xFF);  // GRB order: Green=0, Red=0xFF, Blue=0
 800057c:	23ff      	movs	r3, #255	@ 0xff
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff ff42 	bl	800040c <WS2812_SetColor>
  WS2812_Refresh();
 8000588:	f7ff ff6e 	bl	8000468 <WS2812_Refresh>

  /* Infinite loop */
  while (1)
  {
    HAL_Delay(1000);  // 1-second delay
 800058c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000590:	f000 fbc4 	bl	8000d1c <HAL_Delay>
 8000594:	e7fa      	b.n	800058c <main+0x68>
	...

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09c      	sub	sp, #112	@ 0x70
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a2:	224c      	movs	r2, #76	@ 0x4c
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fa64 	bl	8005a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2220      	movs	r2, #32
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fa5e 	bl	8005a74 <memset>

  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f002 fff5 	bl	80035a8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <SystemClock_Config+0xcc>)
 80005c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005c6:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <SystemClock_Config+0xcc>)
 80005c8:	f023 0301 	bic.w	r3, r3, #1
 80005cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005ce:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <SystemClock_Config+0xcc>)
 80005d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <SystemClock_Config+0xd0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <SystemClock_Config+0xd0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f4:	bf00      	nop
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <SystemClock_Config+0xd0>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000602:	d1f8      	bne.n	80005f6 <SystemClock_Config+0x5e>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000608:	2301      	movs	r3, #1
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2340      	movs	r3, #64	@ 0x40
 800060e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000618:	4618      	mov	r0, r3
 800061a:	f002 ffff 	bl	800361c <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000624:	f000 f822 	bl	800066c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	233f      	movs	r3, #63	@ 0x3f
 800062a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fc3f 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 f808 	bl	800066c <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3770      	adds	r7, #112	@ 0x70
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	58000400 	.word	0x58000400
 8000668:	58024800 	.word	0x58024800

0800066c <Error_Handler>:
void Error_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    // Infinite loop
    while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <Error_Handler+0x4>

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_MspInit+0x30>)
 800067c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <HAL_MspInit+0x30>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_MspInit+0x30>)
 800068c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	58024400 	.word	0x58024400

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <NMI_Handler+0x4>

080006b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <HardFault_Handler+0x4>

080006b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <MemManage_Handler+0x4>

080006c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <BusFault_Handler+0x4>

080006c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <UsageFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fe:	f000 faed 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800070c:	4802      	ldr	r0, [pc, #8]	@ (8000718 <DMA1_Stream0_IRQHandler+0x10>)
 800070e:	f001 fa0b 	bl	8001b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000418 	.word	0x24000418

0800071c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fa45 	bl	8000bb0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000730:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <SystemInit+0xe4>)
 8000732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000736:	4a36      	ldr	r2, [pc, #216]	@ (8000810 <SystemInit+0xe4>)
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000740:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <SystemInit+0xe8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	2b06      	cmp	r3, #6
 800074a:	d807      	bhi.n	800075c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800074c:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <SystemInit+0xe8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f023 030f 	bic.w	r3, r3, #15
 8000754:	4a2f      	ldr	r2, [pc, #188]	@ (8000814 <SystemInit+0xe8>)
 8000756:	f043 0307 	orr.w	r3, r3, #7
 800075a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800075c:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <SystemInit+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <SystemInit+0xec>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000768:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <SystemInit+0xec>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <SystemInit+0xec>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4929      	ldr	r1, [pc, #164]	@ (8000818 <SystemInit+0xec>)
 8000774:	4b29      	ldr	r3, [pc, #164]	@ (800081c <SystemInit+0xf0>)
 8000776:	4013      	ands	r3, r2
 8000778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <SystemInit+0xe8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	2b00      	cmp	r3, #0
 8000784:	d007      	beq.n	8000796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <SystemInit+0xe8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 030f 	bic.w	r3, r3, #15
 800078e:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <SystemInit+0xe8>)
 8000790:	f043 0307 	orr.w	r3, r3, #7
 8000794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <SystemInit+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <SystemInit+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <SystemInit+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <SystemInit+0xec>)
 80007aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000820 <SystemInit+0xf4>)
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <SystemInit+0xec>)
 80007b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <SystemInit+0xf8>)
 80007b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <SystemInit+0xec>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000828 <SystemInit+0xfc>)
 80007b8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007ba:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <SystemInit+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <SystemInit+0xec>)
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <SystemInit+0xfc>)
 80007c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <SystemInit+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <SystemInit+0xec>)
 80007ce:	4a16      	ldr	r2, [pc, #88]	@ (8000828 <SystemInit+0xfc>)
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <SystemInit+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <SystemInit+0xec>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000818 <SystemInit+0xec>)
 80007de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <SystemInit+0xec>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <SystemInit+0x100>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <SystemInit+0x104>)
 80007f0:	4013      	ands	r3, r2
 80007f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007f6:	d202      	bcs.n	80007fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <SystemInit+0x108>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <SystemInit+0x10c>)
 8000800:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00
 8000814:	52002000 	.word	0x52002000
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	02020200 	.word	0x02020200
 8000824:	01ff0000 	.word	0x01ff0000
 8000828:	01010280 	.word	0x01010280
 800082c:	5c001000 	.word	0x5c001000
 8000830:	ffff0000 	.word	0xffff0000
 8000834:	51008108 	.word	0x51008108
 8000838:	52004000 	.word	0x52004000

0800083c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <ExitRun0Mode+0x2c>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <ExitRun0Mode+0x2c>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800084c:	bf00      	nop
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <ExitRun0Mode+0x2c>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0f9      	beq.n	800084e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	58024800 	.word	0x58024800

0800086c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	@ 0x38
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]
 800089c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800089e:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000954 <MX_TIM3_Init+0xe8>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008b2:	224f      	movs	r2, #79	@ 0x4f
 80008b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008c2:	4823      	ldr	r0, [pc, #140]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008c4:	f003 fe34 	bl	8004530 <HAL_TIM_Base_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008ce:	f7ff fecd 	bl	800066c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008dc:	4619      	mov	r1, r3
 80008de:	481c      	ldr	r0, [pc, #112]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008e0:	f004 fa18 	bl	8004d14 <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008ea:	f7ff febf 	bl	800066c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <MX_TIM3_Init+0xe4>)
 80008f0:	f003 fe75 	bl	80045de <HAL_TIM_PWM_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008fa:	f7ff feb7 	bl	800066c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4810      	ldr	r0, [pc, #64]	@ (8000950 <MX_TIM3_Init+0xe4>)
 800090e:	f005 f823 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000918:	f7ff fea8 	bl	800066c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	@ 0x60
 800091e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2204      	movs	r2, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <MX_TIM3_Init+0xe4>)
 8000934:	f004 f8da 	bl	8004aec <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800093e:	f7ff fe95 	bl	800066c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000942:	4803      	ldr	r0, [pc, #12]	@ (8000950 <MX_TIM3_Init+0xe4>)
 8000944:	f000 f85c 	bl	8000a00 <HAL_TIM_MspPostInit>

}
 8000948:	bf00      	nop
 800094a:	3738      	adds	r7, #56	@ 0x38
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	240003cc 	.word	0x240003cc
 8000954:	40000400 	.word	0x40000400

08000958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a22      	ldr	r2, [pc, #136]	@ (80009f0 <HAL_TIM_Base_MspInit+0x98>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d13d      	bne.n	80009e6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800096a:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <HAL_TIM_Base_MspInit+0x9c>)
 800096c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000970:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <HAL_TIM_Base_MspInit+0x9c>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800097a:	4b1e      	ldr	r3, [pc, #120]	@ (80009f4 <HAL_TIM_Base_MspInit+0x9c>)
 800097c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream0;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <HAL_TIM_Base_MspInit+0xa4>)
 800098c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 8000990:	2218      	movs	r2, #24
 8000992:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 8000996:	2240      	movs	r2, #64	@ 0x40
 8000998:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009cc:	f000 fae6 	bl	8000f9c <HAL_DMA_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80009d6:	f7ff fe49 	bl	800066c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a06      	ldr	r2, [pc, #24]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
 80009e0:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <HAL_TIM_Base_MspInit+0xa0>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40000400 	.word	0x40000400
 80009f4:	58024400 	.word	0x58024400
 80009f8:	24000418 	.word	0x24000418
 80009fc:	40020010 	.word	0x40020010

08000a00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <HAL_TIM_MspPostInit+0x68>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d11e      	bne.n	8000a60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_TIM_MspPostInit+0x6c>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a40:	2320      	movs	r3, #32
 8000a42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_TIM_MspPostInit+0x70>)
 8000a5c:	f002 fbda 	bl	8003214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020400 	.word	0x58020400

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ab0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000a78:	f7ff fee0 	bl	800083c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a7c:	f7ff fe56 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f004 ffed 	bl	8005a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fd3b 	bl	8000524 <main>
  bx  lr
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ab4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ab8:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000abc:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 8000ac0:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000ac4:	2400049c 	.word	0x2400049c

08000ac8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC3_IRQHandler>
	...

08000acc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000adc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <BSP_PB_Init+0xcc>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b98 <BSP_PB_Init+0xcc>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <BSP_PB_Init+0xcc>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10c      	bne.n	8000b28 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a21      	ldr	r2, [pc, #132]	@ (8000b9c <BSP_PB_Init+0xd0>)
 8000b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1a:	f107 020c 	add.w	r2, r7, #12
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fb77 	bl	8003214 <HAL_GPIO_Init>
 8000b26:	e031      	b.n	8000b8c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b2c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	@ (8000b9c <BSP_PB_Init+0xd0>)
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	f107 020c 	add.w	r2, r7, #12
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fb69 	bl	8003214 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4a16      	ldr	r2, [pc, #88]	@ (8000ba0 <BSP_PB_Init+0xd4>)
 8000b48:	441a      	add	r2, r3
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4915      	ldr	r1, [pc, #84]	@ (8000ba4 <BSP_PB_Init+0xd8>)
 8000b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b52:	4619      	mov	r1, r3
 8000b54:	4610      	mov	r0, r2
 8000b56:	f002 fb18 	bl	800318a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <BSP_PB_Init+0xd4>)
 8000b60:	1898      	adds	r0, r3, r2
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	4a10      	ldr	r2, [pc, #64]	@ (8000ba8 <BSP_PB_Init+0xdc>)
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f002 faed 	bl	800314c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000b72:	2028      	movs	r0, #40	@ 0x28
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <BSP_PB_Init+0xe0>)
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 f9d7 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000b84:	2328      	movs	r3, #40	@ 0x28
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f9ed 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	24000008 	.word	0x24000008
 8000ba0:	24000490 	.word	0x24000490
 8000ba4:	08005af4 	.word	0x08005af4
 8000ba8:	2400000c 	.word	0x2400000c
 8000bac:	24000010 	.word	0x24000010

08000bb0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <BSP_PB_IRQHandler+0x20>)
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 faf6 	bl	80031b4 <HAL_EXTI_IRQHandler>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000490 	.word	0x24000490

08000bd4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fff0 	bl	8000bd4 <BSP_PB_Callback>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f98c 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c04:	f003 fb1a 	bl	800423c <HAL_RCC_GetSysClockFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_Init+0x68>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4913      	ldr	r1, [pc, #76]	@ (8000c64 <HAL_Init+0x6c>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_Init+0x6c>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <HAL_Init+0x70>)
 8000c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <HAL_Init+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f814 	bl	8000c70 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e002      	b.n	8000c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c52:	f7ff fd0f 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	08005ae4 	.word	0x08005ae4
 8000c68:	24000004 	.word	0x24000004
 8000c6c:	24000000 	.word	0x24000000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e021      	b.n	8000cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_InitTick+0x64>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f971 	bl	8000f82 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f93b 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x68>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000018 	.word	0x24000018
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	24000014 	.word	0x24000014

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	24000018 	.word	0x24000018
 8000d00:	24000498 	.word	0x24000498

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	24000498 	.word	0x24000498

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	24000018 	.word	0x24000018

08000d64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetREVID+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0c1b      	lsrs	r3, r3, #16
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	5c001000 	.word	0x5c001000

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x40>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	05fa0000 	.word	0x05fa0000

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff40 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff90 	bl	8000e70 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5f 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff33 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa4 	bl	8000ed8 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff feae 	bl	8000d04 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e316      	b.n	80015e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a66      	ldr	r2, [pc, #408]	@ (8001154 <HAL_DMA_Init+0x1b8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d04a      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a65      	ldr	r2, [pc, #404]	@ (8001158 <HAL_DMA_Init+0x1bc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d045      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a63      	ldr	r2, [pc, #396]	@ (800115c <HAL_DMA_Init+0x1c0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d040      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a62      	ldr	r2, [pc, #392]	@ (8001160 <HAL_DMA_Init+0x1c4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d03b      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a60      	ldr	r2, [pc, #384]	@ (8001164 <HAL_DMA_Init+0x1c8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d036      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a5f      	ldr	r2, [pc, #380]	@ (8001168 <HAL_DMA_Init+0x1cc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d031      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a5d      	ldr	r2, [pc, #372]	@ (800116c <HAL_DMA_Init+0x1d0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d02c      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8001170 <HAL_DMA_Init+0x1d4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d027      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a5a      	ldr	r2, [pc, #360]	@ (8001174 <HAL_DMA_Init+0x1d8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d022      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a59      	ldr	r2, [pc, #356]	@ (8001178 <HAL_DMA_Init+0x1dc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d01d      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a57      	ldr	r2, [pc, #348]	@ (800117c <HAL_DMA_Init+0x1e0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d018      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a56      	ldr	r2, [pc, #344]	@ (8001180 <HAL_DMA_Init+0x1e4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d013      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a54      	ldr	r2, [pc, #336]	@ (8001184 <HAL_DMA_Init+0x1e8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00e      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a53      	ldr	r2, [pc, #332]	@ (8001188 <HAL_DMA_Init+0x1ec>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d009      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a51      	ldr	r2, [pc, #324]	@ (800118c <HAL_DMA_Init+0x1f0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d004      	beq.n	8001054 <HAL_DMA_Init+0xb8>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a50      	ldr	r2, [pc, #320]	@ (8001190 <HAL_DMA_Init+0x1f4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d101      	bne.n	8001058 <HAL_DMA_Init+0xbc>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_DMA_Init+0xbe>
 8001058:	2300      	movs	r3, #0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 813b 	beq.w	80012d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a37      	ldr	r2, [pc, #220]	@ (8001154 <HAL_DMA_Init+0x1b8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d04a      	beq.n	8001110 <HAL_DMA_Init+0x174>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a36      	ldr	r2, [pc, #216]	@ (8001158 <HAL_DMA_Init+0x1bc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d045      	beq.n	8001110 <HAL_DMA_Init+0x174>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a34      	ldr	r2, [pc, #208]	@ (800115c <HAL_DMA_Init+0x1c0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d040      	beq.n	8001110 <HAL_DMA_Init+0x174>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a33      	ldr	r2, [pc, #204]	@ (8001160 <HAL_DMA_Init+0x1c4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d03b      	beq.n	8001110 <HAL_DMA_Init+0x174>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <HAL_DMA_Init+0x1c8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d036      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a30      	ldr	r2, [pc, #192]	@ (8001168 <HAL_DMA_Init+0x1cc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d031      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2e      	ldr	r2, [pc, #184]	@ (800116c <HAL_DMA_Init+0x1d0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02c      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001170 <HAL_DMA_Init+0x1d4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d027      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001174 <HAL_DMA_Init+0x1d8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d022      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001178 <HAL_DMA_Init+0x1dc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d01d      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a28      	ldr	r2, [pc, #160]	@ (800117c <HAL_DMA_Init+0x1e0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d018      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a27      	ldr	r2, [pc, #156]	@ (8001180 <HAL_DMA_Init+0x1e4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d013      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a25      	ldr	r2, [pc, #148]	@ (8001184 <HAL_DMA_Init+0x1e8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00e      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_DMA_Init+0x1ec>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d009      	beq.n	8001110 <HAL_DMA_Init+0x174>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a22      	ldr	r2, [pc, #136]	@ (800118c <HAL_DMA_Init+0x1f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d004      	beq.n	8001110 <HAL_DMA_Init+0x174>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <HAL_DMA_Init+0x1f4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d108      	bne.n	8001122 <HAL_DMA_Init+0x186>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e007      	b.n	8001132 <HAL_DMA_Init+0x196>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001132:	e02f      	b.n	8001194 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001134:	f7ff fde6 	bl	8000d04 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b05      	cmp	r3, #5
 8001140:	d928      	bls.n	8001194 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2220      	movs	r2, #32
 8001146:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e246      	b.n	80015e2 <HAL_DMA_Init+0x646>
 8001154:	40020010 	.word	0x40020010
 8001158:	40020028 	.word	0x40020028
 800115c:	40020040 	.word	0x40020040
 8001160:	40020058 	.word	0x40020058
 8001164:	40020070 	.word	0x40020070
 8001168:	40020088 	.word	0x40020088
 800116c:	400200a0 	.word	0x400200a0
 8001170:	400200b8 	.word	0x400200b8
 8001174:	40020410 	.word	0x40020410
 8001178:	40020428 	.word	0x40020428
 800117c:	40020440 	.word	0x40020440
 8001180:	40020458 	.word	0x40020458
 8001184:	40020470 	.word	0x40020470
 8001188:	40020488 	.word	0x40020488
 800118c:	400204a0 	.word	0x400204a0
 8001190:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1c8      	bne.n	8001134 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4b83      	ldr	r3, [pc, #524]	@ (80013bc <HAL_DMA_Init+0x420>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80011ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d107      	bne.n	80011f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	4313      	orrs	r3, r2
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80011f8:	4b71      	ldr	r3, [pc, #452]	@ (80013c0 <HAL_DMA_Init+0x424>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b71      	ldr	r3, [pc, #452]	@ (80013c4 <HAL_DMA_Init+0x428>)
 80011fe:	4013      	ands	r3, r2
 8001200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001204:	d328      	bcc.n	8001258 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b28      	cmp	r3, #40	@ 0x28
 800120c:	d903      	bls.n	8001216 <HAL_DMA_Init+0x27a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b2e      	cmp	r3, #46	@ 0x2e
 8001214:	d917      	bls.n	8001246 <HAL_DMA_Init+0x2aa>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b3e      	cmp	r3, #62	@ 0x3e
 800121c:	d903      	bls.n	8001226 <HAL_DMA_Init+0x28a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b42      	cmp	r3, #66	@ 0x42
 8001224:	d90f      	bls.n	8001246 <HAL_DMA_Init+0x2aa>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b46      	cmp	r3, #70	@ 0x46
 800122c:	d903      	bls.n	8001236 <HAL_DMA_Init+0x29a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b48      	cmp	r3, #72	@ 0x48
 8001234:	d907      	bls.n	8001246 <HAL_DMA_Init+0x2aa>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b4e      	cmp	r3, #78	@ 0x4e
 800123c:	d905      	bls.n	800124a <HAL_DMA_Init+0x2ae>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b52      	cmp	r3, #82	@ 0x52
 8001244:	d801      	bhi.n	800124a <HAL_DMA_Init+0x2ae>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_DMA_Init+0x2b0>
 800124a:	2300      	movs	r3, #0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001256:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f023 0307 	bic.w	r3, r3, #7
 800126e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4313      	orrs	r3, r2
 8001278:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	2b04      	cmp	r3, #4
 8001280:	d117      	bne.n	80012b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00e      	beq.n	80012b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 fdcf 	bl	8002e38 <DMA_CheckFifoParam>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2240      	movs	r2, #64	@ 0x40
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e197      	b.n	80015e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 fd0a 	bl	8002cd4 <DMA_CalcBaseAndBitshift>
 80012c0:	4603      	mov	r3, r0
 80012c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	223f      	movs	r2, #63	@ 0x3f
 80012ce:	409a      	lsls	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e0cd      	b.n	8001472 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3b      	ldr	r2, [pc, #236]	@ (80013c8 <HAL_DMA_Init+0x42c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d022      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a39      	ldr	r2, [pc, #228]	@ (80013cc <HAL_DMA_Init+0x430>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01d      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <HAL_DMA_Init+0x434>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d018      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a36      	ldr	r2, [pc, #216]	@ (80013d4 <HAL_DMA_Init+0x438>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a35      	ldr	r2, [pc, #212]	@ (80013d8 <HAL_DMA_Init+0x43c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00e      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a33      	ldr	r2, [pc, #204]	@ (80013dc <HAL_DMA_Init+0x440>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d009      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a32      	ldr	r2, [pc, #200]	@ (80013e0 <HAL_DMA_Init+0x444>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d004      	beq.n	8001326 <HAL_DMA_Init+0x38a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a30      	ldr	r2, [pc, #192]	@ (80013e4 <HAL_DMA_Init+0x448>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_DMA_Init+0x38e>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_DMA_Init+0x390>
 800132a:	2300      	movs	r3, #0
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8097 	beq.w	8001460 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a24      	ldr	r2, [pc, #144]	@ (80013c8 <HAL_DMA_Init+0x42c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d021      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a22      	ldr	r2, [pc, #136]	@ (80013cc <HAL_DMA_Init+0x430>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01c      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <HAL_DMA_Init+0x434>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d017      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1f      	ldr	r2, [pc, #124]	@ (80013d4 <HAL_DMA_Init+0x438>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d012      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1e      	ldr	r2, [pc, #120]	@ (80013d8 <HAL_DMA_Init+0x43c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00d      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <HAL_DMA_Init+0x440>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d008      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <HAL_DMA_Init+0x444>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d003      	beq.n	8001380 <HAL_DMA_Init+0x3e4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <HAL_DMA_Init+0x448>)
 800137e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_DMA_Init+0x44c>)
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b40      	cmp	r3, #64	@ 0x40
 80013a6:	d021      	beq.n	80013ec <HAL_DMA_Init+0x450>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b80      	cmp	r3, #128	@ 0x80
 80013ae:	d102      	bne.n	80013b6 <HAL_DMA_Init+0x41a>
 80013b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013b4:	e01b      	b.n	80013ee <HAL_DMA_Init+0x452>
 80013b6:	2300      	movs	r3, #0
 80013b8:	e019      	b.n	80013ee <HAL_DMA_Init+0x452>
 80013ba:	bf00      	nop
 80013bc:	fe10803f 	.word	0xfe10803f
 80013c0:	5c001000 	.word	0x5c001000
 80013c4:	ffff0000 	.word	0xffff0000
 80013c8:	58025408 	.word	0x58025408
 80013cc:	5802541c 	.word	0x5802541c
 80013d0:	58025430 	.word	0x58025430
 80013d4:	58025444 	.word	0x58025444
 80013d8:	58025458 	.word	0x58025458
 80013dc:	5802546c 	.word	0x5802546c
 80013e0:	58025480 	.word	0x58025480
 80013e4:	58025494 	.word	0x58025494
 80013e8:	fffe000f 	.word	0xfffe000f
 80013ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68d2      	ldr	r2, [r2, #12]
 80013f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80013f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80013fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001404:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800140c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800141c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b6e      	ldr	r3, [pc, #440]	@ (80015ec <HAL_DMA_Init+0x650>)
 8001434:	4413      	add	r3, r2
 8001436:	4a6e      	ldr	r2, [pc, #440]	@ (80015f0 <HAL_DMA_Init+0x654>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	009a      	lsls	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f001 fc45 	bl	8002cd4 <DMA_CalcBaseAndBitshift>
 800144a:	4603      	mov	r3, r0
 800144c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2201      	movs	r2, #1
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	e008      	b.n	8001472 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2240      	movs	r2, #64	@ 0x40
 8001464:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0b7      	b.n	80015e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a5f      	ldr	r2, [pc, #380]	@ (80015f4 <HAL_DMA_Init+0x658>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d072      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5d      	ldr	r2, [pc, #372]	@ (80015f8 <HAL_DMA_Init+0x65c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d06d      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a5c      	ldr	r2, [pc, #368]	@ (80015fc <HAL_DMA_Init+0x660>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d068      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a5a      	ldr	r2, [pc, #360]	@ (8001600 <HAL_DMA_Init+0x664>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d063      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a59      	ldr	r2, [pc, #356]	@ (8001604 <HAL_DMA_Init+0x668>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d05e      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a57      	ldr	r2, [pc, #348]	@ (8001608 <HAL_DMA_Init+0x66c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d059      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a56      	ldr	r2, [pc, #344]	@ (800160c <HAL_DMA_Init+0x670>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d054      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a54      	ldr	r2, [pc, #336]	@ (8001610 <HAL_DMA_Init+0x674>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d04f      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a53      	ldr	r2, [pc, #332]	@ (8001614 <HAL_DMA_Init+0x678>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d04a      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a51      	ldr	r2, [pc, #324]	@ (8001618 <HAL_DMA_Init+0x67c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d045      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a50      	ldr	r2, [pc, #320]	@ (800161c <HAL_DMA_Init+0x680>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d040      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001620 <HAL_DMA_Init+0x684>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d03b      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001624 <HAL_DMA_Init+0x688>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d036      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_DMA_Init+0x68c>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d031      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a4a      	ldr	r2, [pc, #296]	@ (800162c <HAL_DMA_Init+0x690>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d02c      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a48      	ldr	r2, [pc, #288]	@ (8001630 <HAL_DMA_Init+0x694>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d027      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a47      	ldr	r2, [pc, #284]	@ (8001634 <HAL_DMA_Init+0x698>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d022      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a45      	ldr	r2, [pc, #276]	@ (8001638 <HAL_DMA_Init+0x69c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01d      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a44      	ldr	r2, [pc, #272]	@ (800163c <HAL_DMA_Init+0x6a0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d018      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <HAL_DMA_Init+0x6a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a41      	ldr	r2, [pc, #260]	@ (8001644 <HAL_DMA_Init+0x6a8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d00e      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a3f      	ldr	r2, [pc, #252]	@ (8001648 <HAL_DMA_Init+0x6ac>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d009      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a3e      	ldr	r2, [pc, #248]	@ (800164c <HAL_DMA_Init+0x6b0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d004      	beq.n	8001562 <HAL_DMA_Init+0x5c6>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a3c      	ldr	r2, [pc, #240]	@ (8001650 <HAL_DMA_Init+0x6b4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d101      	bne.n	8001566 <HAL_DMA_Init+0x5ca>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_DMA_Init+0x5cc>
 8001566:	2300      	movs	r3, #0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d032      	beq.n	80015d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 fcdf 	bl	8002f30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b80      	cmp	r3, #128	@ 0x80
 8001578:	d102      	bne.n	8001580 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001594:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_DMA_Init+0x624>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d80c      	bhi.n	80015c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f001 fd5c 	bl	8003064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e008      	b.n	80015d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	a7fdabf8 	.word	0xa7fdabf8
 80015f0:	cccccccd 	.word	0xcccccccd
 80015f4:	40020010 	.word	0x40020010
 80015f8:	40020028 	.word	0x40020028
 80015fc:	40020040 	.word	0x40020040
 8001600:	40020058 	.word	0x40020058
 8001604:	40020070 	.word	0x40020070
 8001608:	40020088 	.word	0x40020088
 800160c:	400200a0 	.word	0x400200a0
 8001610:	400200b8 	.word	0x400200b8
 8001614:	40020410 	.word	0x40020410
 8001618:	40020428 	.word	0x40020428
 800161c:	40020440 	.word	0x40020440
 8001620:	40020458 	.word	0x40020458
 8001624:	40020470 	.word	0x40020470
 8001628:	40020488 	.word	0x40020488
 800162c:	400204a0 	.word	0x400204a0
 8001630:	400204b8 	.word	0x400204b8
 8001634:	58025408 	.word	0x58025408
 8001638:	5802541c 	.word	0x5802541c
 800163c:	58025430 	.word	0x58025430
 8001640:	58025444 	.word	0x58025444
 8001644:	58025458 	.word	0x58025458
 8001648:	5802546c 	.word	0x5802546c
 800164c:	58025480 	.word	0x58025480
 8001650:	58025494 	.word	0x58025494

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e226      	b.n	8001abe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_DMA_Start_IT+0x2a>
 800167a:	2302      	movs	r3, #2
 800167c:	e21f      	b.n	8001abe <HAL_DMA_Start_IT+0x46a>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	f040 820a 	bne.w	8001aa8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a68      	ldr	r2, [pc, #416]	@ (8001848 <HAL_DMA_Start_IT+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04a      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a66      	ldr	r2, [pc, #408]	@ (800184c <HAL_DMA_Start_IT+0x1f8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d045      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a65      	ldr	r2, [pc, #404]	@ (8001850 <HAL_DMA_Start_IT+0x1fc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d040      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a63      	ldr	r2, [pc, #396]	@ (8001854 <HAL_DMA_Start_IT+0x200>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d03b      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a62      	ldr	r2, [pc, #392]	@ (8001858 <HAL_DMA_Start_IT+0x204>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d036      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a60      	ldr	r2, [pc, #384]	@ (800185c <HAL_DMA_Start_IT+0x208>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d031      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001860 <HAL_DMA_Start_IT+0x20c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d02c      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001864 <HAL_DMA_Start_IT+0x210>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d027      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001868 <HAL_DMA_Start_IT+0x214>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a5a      	ldr	r2, [pc, #360]	@ (800186c <HAL_DMA_Start_IT+0x218>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01d      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a59      	ldr	r2, [pc, #356]	@ (8001870 <HAL_DMA_Start_IT+0x21c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d018      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a57      	ldr	r2, [pc, #348]	@ (8001874 <HAL_DMA_Start_IT+0x220>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a56      	ldr	r2, [pc, #344]	@ (8001878 <HAL_DMA_Start_IT+0x224>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a54      	ldr	r2, [pc, #336]	@ (800187c <HAL_DMA_Start_IT+0x228>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a53      	ldr	r2, [pc, #332]	@ (8001880 <HAL_DMA_Start_IT+0x22c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d004      	beq.n	8001742 <HAL_DMA_Start_IT+0xee>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a51      	ldr	r2, [pc, #324]	@ (8001884 <HAL_DMA_Start_IT+0x230>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d108      	bne.n	8001754 <HAL_DMA_Start_IT+0x100>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_DMA_Start_IT+0x110>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f001 f906 	bl	800297c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a34      	ldr	r2, [pc, #208]	@ (8001848 <HAL_DMA_Start_IT+0x1f4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d04a      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a33      	ldr	r2, [pc, #204]	@ (800184c <HAL_DMA_Start_IT+0x1f8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d045      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a31      	ldr	r2, [pc, #196]	@ (8001850 <HAL_DMA_Start_IT+0x1fc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d040      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a30      	ldr	r2, [pc, #192]	@ (8001854 <HAL_DMA_Start_IT+0x200>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d03b      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2e      	ldr	r2, [pc, #184]	@ (8001858 <HAL_DMA_Start_IT+0x204>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d036      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2d      	ldr	r2, [pc, #180]	@ (800185c <HAL_DMA_Start_IT+0x208>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d031      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001860 <HAL_DMA_Start_IT+0x20c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02c      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001864 <HAL_DMA_Start_IT+0x210>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d027      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a28      	ldr	r2, [pc, #160]	@ (8001868 <HAL_DMA_Start_IT+0x214>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d022      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a27      	ldr	r2, [pc, #156]	@ (800186c <HAL_DMA_Start_IT+0x218>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d01d      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a25      	ldr	r2, [pc, #148]	@ (8001870 <HAL_DMA_Start_IT+0x21c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d018      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a24      	ldr	r2, [pc, #144]	@ (8001874 <HAL_DMA_Start_IT+0x220>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <HAL_DMA_Start_IT+0x224>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00e      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_DMA_Start_IT+0x228>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d009      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1f      	ldr	r2, [pc, #124]	@ (8001880 <HAL_DMA_Start_IT+0x22c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d004      	beq.n	8001810 <HAL_DMA_Start_IT+0x1bc>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1e      	ldr	r2, [pc, #120]	@ (8001884 <HAL_DMA_Start_IT+0x230>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_DMA_Start_IT+0x1c0>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_DMA_Start_IT+0x1c2>
 8001814:	2300      	movs	r3, #0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d036      	beq.n	8001888 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 021e 	bic.w	r2, r3, #30
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0216 	orr.w	r2, r2, #22
 800182c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03e      	beq.n	80018b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0208 	orr.w	r2, r2, #8
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e035      	b.n	80018b4 <HAL_DMA_Start_IT+0x260>
 8001848:	40020010 	.word	0x40020010
 800184c:	40020028 	.word	0x40020028
 8001850:	40020040 	.word	0x40020040
 8001854:	40020058 	.word	0x40020058
 8001858:	40020070 	.word	0x40020070
 800185c:	40020088 	.word	0x40020088
 8001860:	400200a0 	.word	0x400200a0
 8001864:	400200b8 	.word	0x400200b8
 8001868:	40020410 	.word	0x40020410
 800186c:	40020428 	.word	0x40020428
 8001870:	40020440 	.word	0x40020440
 8001874:	40020458 	.word	0x40020458
 8001878:	40020470 	.word	0x40020470
 800187c:	40020488 	.word	0x40020488
 8001880:	400204a0 	.word	0x400204a0
 8001884:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 020e 	bic.w	r2, r3, #14
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 020a 	orr.w	r2, r2, #10
 800189a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0204 	orr.w	r2, r2, #4
 80018b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a83      	ldr	r2, [pc, #524]	@ (8001ac8 <HAL_DMA_Start_IT+0x474>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d072      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a82      	ldr	r2, [pc, #520]	@ (8001acc <HAL_DMA_Start_IT+0x478>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d06d      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a80      	ldr	r2, [pc, #512]	@ (8001ad0 <HAL_DMA_Start_IT+0x47c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d068      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7f      	ldr	r2, [pc, #508]	@ (8001ad4 <HAL_DMA_Start_IT+0x480>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d063      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad8 <HAL_DMA_Start_IT+0x484>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d05e      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7c      	ldr	r2, [pc, #496]	@ (8001adc <HAL_DMA_Start_IT+0x488>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d059      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a7a      	ldr	r2, [pc, #488]	@ (8001ae0 <HAL_DMA_Start_IT+0x48c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d054      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a79      	ldr	r2, [pc, #484]	@ (8001ae4 <HAL_DMA_Start_IT+0x490>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d04f      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a77      	ldr	r2, [pc, #476]	@ (8001ae8 <HAL_DMA_Start_IT+0x494>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d04a      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a76      	ldr	r2, [pc, #472]	@ (8001aec <HAL_DMA_Start_IT+0x498>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d045      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a74      	ldr	r2, [pc, #464]	@ (8001af0 <HAL_DMA_Start_IT+0x49c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d040      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a73      	ldr	r2, [pc, #460]	@ (8001af4 <HAL_DMA_Start_IT+0x4a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d03b      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a71      	ldr	r2, [pc, #452]	@ (8001af8 <HAL_DMA_Start_IT+0x4a4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d036      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a70      	ldr	r2, [pc, #448]	@ (8001afc <HAL_DMA_Start_IT+0x4a8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d031      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6e      	ldr	r2, [pc, #440]	@ (8001b00 <HAL_DMA_Start_IT+0x4ac>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d02c      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6d      	ldr	r2, [pc, #436]	@ (8001b04 <HAL_DMA_Start_IT+0x4b0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d027      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6b      	ldr	r2, [pc, #428]	@ (8001b08 <HAL_DMA_Start_IT+0x4b4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d022      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6a      	ldr	r2, [pc, #424]	@ (8001b0c <HAL_DMA_Start_IT+0x4b8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d01d      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a68      	ldr	r2, [pc, #416]	@ (8001b10 <HAL_DMA_Start_IT+0x4bc>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a67      	ldr	r2, [pc, #412]	@ (8001b14 <HAL_DMA_Start_IT+0x4c0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a65      	ldr	r2, [pc, #404]	@ (8001b18 <HAL_DMA_Start_IT+0x4c4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00e      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a64      	ldr	r2, [pc, #400]	@ (8001b1c <HAL_DMA_Start_IT+0x4c8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a62      	ldr	r2, [pc, #392]	@ (8001b20 <HAL_DMA_Start_IT+0x4cc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_Start_IT+0x350>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a61      	ldr	r2, [pc, #388]	@ (8001b24 <HAL_DMA_Start_IT+0x4d0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Start_IT+0x354>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_DMA_Start_IT+0x356>
 80019a8:	2300      	movs	r3, #0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a37      	ldr	r2, [pc, #220]	@ (8001ac8 <HAL_DMA_Start_IT+0x474>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d04a      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a36      	ldr	r2, [pc, #216]	@ (8001acc <HAL_DMA_Start_IT+0x478>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d045      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a34      	ldr	r2, [pc, #208]	@ (8001ad0 <HAL_DMA_Start_IT+0x47c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d040      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a33      	ldr	r2, [pc, #204]	@ (8001ad4 <HAL_DMA_Start_IT+0x480>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d03b      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a31      	ldr	r2, [pc, #196]	@ (8001ad8 <HAL_DMA_Start_IT+0x484>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d036      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a30      	ldr	r2, [pc, #192]	@ (8001adc <HAL_DMA_Start_IT+0x488>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d031      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae0 <HAL_DMA_Start_IT+0x48c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d02c      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae4 <HAL_DMA_Start_IT+0x490>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d027      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2b      	ldr	r2, [pc, #172]	@ (8001ae8 <HAL_DMA_Start_IT+0x494>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d022      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2a      	ldr	r2, [pc, #168]	@ (8001aec <HAL_DMA_Start_IT+0x498>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d01d      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a28      	ldr	r2, [pc, #160]	@ (8001af0 <HAL_DMA_Start_IT+0x49c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d018      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a27      	ldr	r2, [pc, #156]	@ (8001af4 <HAL_DMA_Start_IT+0x4a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a25      	ldr	r2, [pc, #148]	@ (8001af8 <HAL_DMA_Start_IT+0x4a4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00e      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a24      	ldr	r2, [pc, #144]	@ (8001afc <HAL_DMA_Start_IT+0x4a8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d009      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_DMA_Start_IT+0x4ac>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_DMA_Start_IT+0x430>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <HAL_DMA_Start_IT+0x4b0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d108      	bne.n	8001a96 <HAL_DMA_Start_IT+0x442>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e012      	b.n	8001abc <HAL_DMA_Start_IT+0x468>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e009      	b.n	8001abc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020010 	.word	0x40020010
 8001acc:	40020028 	.word	0x40020028
 8001ad0:	40020040 	.word	0x40020040
 8001ad4:	40020058 	.word	0x40020058
 8001ad8:	40020070 	.word	0x40020070
 8001adc:	40020088 	.word	0x40020088
 8001ae0:	400200a0 	.word	0x400200a0
 8001ae4:	400200b8 	.word	0x400200b8
 8001ae8:	40020410 	.word	0x40020410
 8001aec:	40020428 	.word	0x40020428
 8001af0:	40020440 	.word	0x40020440
 8001af4:	40020458 	.word	0x40020458
 8001af8:	40020470 	.word	0x40020470
 8001afc:	40020488 	.word	0x40020488
 8001b00:	400204a0 	.word	0x400204a0
 8001b04:	400204b8 	.word	0x400204b8
 8001b08:	58025408 	.word	0x58025408
 8001b0c:	5802541c 	.word	0x5802541c
 8001b10:	58025430 	.word	0x58025430
 8001b14:	58025444 	.word	0x58025444
 8001b18:	58025458 	.word	0x58025458
 8001b1c:	5802546c 	.word	0x5802546c
 8001b20:	58025480 	.word	0x58025480
 8001b24:	58025494 	.word	0x58025494

08001b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b34:	4b67      	ldr	r3, [pc, #412]	@ (8001cd4 <HAL_DMA_IRQHandler+0x1ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a67      	ldr	r2, [pc, #412]	@ (8001cd8 <HAL_DMA_IRQHandler+0x1b0>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001cdc <HAL_DMA_IRQHandler+0x1b4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d04a      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d045      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5c      	ldr	r2, [pc, #368]	@ (8001ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d040      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d03b      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a59      	ldr	r2, [pc, #356]	@ (8001cec <HAL_DMA_IRQHandler+0x1c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d036      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a57      	ldr	r2, [pc, #348]	@ (8001cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d031      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d02c      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a54      	ldr	r2, [pc, #336]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d027      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a53      	ldr	r2, [pc, #332]	@ (8001cfc <HAL_DMA_IRQHandler+0x1d4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d022      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a51      	ldr	r2, [pc, #324]	@ (8001d00 <HAL_DMA_IRQHandler+0x1d8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01d      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a50      	ldr	r2, [pc, #320]	@ (8001d04 <HAL_DMA_IRQHandler+0x1dc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d018      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d08 <HAL_DMA_IRQHandler+0x1e0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8001d0c <HAL_DMA_IRQHandler+0x1e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00e      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	@ (8001d10 <HAL_DMA_IRQHandler+0x1e8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d009      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4a      	ldr	r2, [pc, #296]	@ (8001d14 <HAL_DMA_IRQHandler+0x1ec>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xd2>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	@ (8001d18 <HAL_DMA_IRQHandler+0x1f0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_IRQHandler+0xd6>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_DMA_IRQHandler+0xd8>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 842b 	beq.w	800245c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2208      	movs	r2, #8
 8001c10:	409a      	lsls	r2, r3
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80a2 	beq.w	8001d60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2e      	ldr	r2, [pc, #184]	@ (8001cdc <HAL_DMA_IRQHandler+0x1b4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d04a      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d045      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d040      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d03b      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a28      	ldr	r2, [pc, #160]	@ (8001cec <HAL_DMA_IRQHandler+0x1c4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d036      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a27      	ldr	r2, [pc, #156]	@ (8001cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d031      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02c      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d027      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_DMA_IRQHandler+0x1d4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <HAL_DMA_IRQHandler+0x1d8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d01d      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_DMA_IRQHandler+0x1dc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_DMA_IRQHandler+0x1e0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_DMA_IRQHandler+0x1e4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_DMA_IRQHandler+0x1e8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_DMA_IRQHandler+0x1ec>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x194>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <HAL_DMA_IRQHandler+0x1f0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d12f      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x1f4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	e02e      	b.n	8001d30 <HAL_DMA_IRQHandler+0x208>
 8001cd2:	bf00      	nop
 8001cd4:	24000000 	.word	0x24000000
 8001cd8:	1b4e81b5 	.word	0x1b4e81b5
 8001cdc:	40020010 	.word	0x40020010
 8001ce0:	40020028 	.word	0x40020028
 8001ce4:	40020040 	.word	0x40020040
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40020070 	.word	0x40020070
 8001cf0:	40020088 	.word	0x40020088
 8001cf4:	400200a0 	.word	0x400200a0
 8001cf8:	400200b8 	.word	0x400200b8
 8001cfc:	40020410 	.word	0x40020410
 8001d00:	40020428 	.word	0x40020428
 8001d04:	40020440 	.word	0x40020440
 8001d08:	40020458 	.word	0x40020458
 8001d0c:	40020470 	.word	0x40020470
 8001d10:	40020488 	.word	0x40020488
 8001d14:	400204a0 	.word	0x400204a0
 8001d18:	400204b8 	.word	0x400204b8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0204 	bic.w	r2, r2, #4
 8001d42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d06e      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a69      	ldr	r2, [pc, #420]	@ (8001f20 <HAL_DMA_IRQHandler+0x3f8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d04a      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a67      	ldr	r2, [pc, #412]	@ (8001f24 <HAL_DMA_IRQHandler+0x3fc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d045      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_DMA_IRQHandler+0x400>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d040      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a64      	ldr	r2, [pc, #400]	@ (8001f2c <HAL_DMA_IRQHandler+0x404>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d03b      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_DMA_IRQHandler+0x408>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d036      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a61      	ldr	r2, [pc, #388]	@ (8001f34 <HAL_DMA_IRQHandler+0x40c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d031      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a60      	ldr	r2, [pc, #384]	@ (8001f38 <HAL_DMA_IRQHandler+0x410>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d02c      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8001f3c <HAL_DMA_IRQHandler+0x414>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d027      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_DMA_IRQHandler+0x418>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d022      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a5b      	ldr	r2, [pc, #364]	@ (8001f44 <HAL_DMA_IRQHandler+0x41c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01d      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a5a      	ldr	r2, [pc, #360]	@ (8001f48 <HAL_DMA_IRQHandler+0x420>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d018      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_DMA_IRQHandler+0x424>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_DMA_IRQHandler+0x428>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00e      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a55      	ldr	r2, [pc, #340]	@ (8001f54 <HAL_DMA_IRQHandler+0x42c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a54      	ldr	r2, [pc, #336]	@ (8001f58 <HAL_DMA_IRQHandler+0x430>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d004      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x2ee>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_DMA_IRQHandler+0x434>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10a      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x304>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e003      	b.n	8001e34 <HAL_DMA_IRQHandler+0x30c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2201      	movs	r2, #1
 8001e42:	409a      	lsls	r2, r3
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	f043 0202 	orr.w	r2, r3, #2
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 808f 	beq.w	8001f88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f20 <HAL_DMA_IRQHandler+0x3f8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d04a      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2a      	ldr	r2, [pc, #168]	@ (8001f24 <HAL_DMA_IRQHandler+0x3fc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d045      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a29      	ldr	r2, [pc, #164]	@ (8001f28 <HAL_DMA_IRQHandler+0x400>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d040      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a27      	ldr	r2, [pc, #156]	@ (8001f2c <HAL_DMA_IRQHandler+0x404>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d03b      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a26      	ldr	r2, [pc, #152]	@ (8001f30 <HAL_DMA_IRQHandler+0x408>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d036      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <HAL_DMA_IRQHandler+0x40c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d031      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <HAL_DMA_IRQHandler+0x410>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d02c      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a21      	ldr	r2, [pc, #132]	@ (8001f3c <HAL_DMA_IRQHandler+0x414>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d027      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a20      	ldr	r2, [pc, #128]	@ (8001f40 <HAL_DMA_IRQHandler+0x418>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d022      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <HAL_DMA_IRQHandler+0x41c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01d      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_DMA_IRQHandler+0x420>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d018      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f4c <HAL_DMA_IRQHandler+0x424>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f50 <HAL_DMA_IRQHandler+0x428>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00e      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <HAL_DMA_IRQHandler+0x42c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <HAL_DMA_IRQHandler+0x430>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d004      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x3e2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a15      	ldr	r2, [pc, #84]	@ (8001f5c <HAL_DMA_IRQHandler+0x434>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12a      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x438>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e023      	b.n	8001f68 <HAL_DMA_IRQHandler+0x440>
 8001f20:	40020010 	.word	0x40020010
 8001f24:	40020028 	.word	0x40020028
 8001f28:	40020040 	.word	0x40020040
 8001f2c:	40020058 	.word	0x40020058
 8001f30:	40020070 	.word	0x40020070
 8001f34:	40020088 	.word	0x40020088
 8001f38:	400200a0 	.word	0x400200a0
 8001f3c:	400200b8 	.word	0x400200b8
 8001f40:	40020410 	.word	0x40020410
 8001f44:	40020428 	.word	0x40020428
 8001f48:	40020440 	.word	0x40020440
 8001f4c:	40020458 	.word	0x40020458
 8001f50:	40020470 	.word	0x40020470
 8001f54:	40020488 	.word	0x40020488
 8001f58:	400204a0 	.word	0x400204a0
 8001f5c:	400204b8 	.word	0x400204b8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2204      	movs	r2, #4
 8001f76:	409a      	lsls	r2, r3
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	f043 0204 	orr.w	r2, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2210      	movs	r2, #16
 8001f92:	409a      	lsls	r2, r3
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a6 	beq.w	80020ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a85      	ldr	r2, [pc, #532]	@ (80021b8 <HAL_DMA_IRQHandler+0x690>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d04a      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a83      	ldr	r2, [pc, #524]	@ (80021bc <HAL_DMA_IRQHandler+0x694>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d045      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a82      	ldr	r2, [pc, #520]	@ (80021c0 <HAL_DMA_IRQHandler+0x698>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d040      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a80      	ldr	r2, [pc, #512]	@ (80021c4 <HAL_DMA_IRQHandler+0x69c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d03b      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7f      	ldr	r2, [pc, #508]	@ (80021c8 <HAL_DMA_IRQHandler+0x6a0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d036      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7d      	ldr	r2, [pc, #500]	@ (80021cc <HAL_DMA_IRQHandler+0x6a4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d031      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7c      	ldr	r2, [pc, #496]	@ (80021d0 <HAL_DMA_IRQHandler+0x6a8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d02c      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a7a      	ldr	r2, [pc, #488]	@ (80021d4 <HAL_DMA_IRQHandler+0x6ac>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d027      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a79      	ldr	r2, [pc, #484]	@ (80021d8 <HAL_DMA_IRQHandler+0x6b0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d022      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a77      	ldr	r2, [pc, #476]	@ (80021dc <HAL_DMA_IRQHandler+0x6b4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01d      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a76      	ldr	r2, [pc, #472]	@ (80021e0 <HAL_DMA_IRQHandler+0x6b8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d018      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a74      	ldr	r2, [pc, #464]	@ (80021e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a73      	ldr	r2, [pc, #460]	@ (80021e8 <HAL_DMA_IRQHandler+0x6c0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00e      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a71      	ldr	r2, [pc, #452]	@ (80021ec <HAL_DMA_IRQHandler+0x6c4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a70      	ldr	r2, [pc, #448]	@ (80021f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d004      	beq.n	800203e <HAL_DMA_IRQHandler+0x516>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6e      	ldr	r2, [pc, #440]	@ (80021f4 <HAL_DMA_IRQHandler+0x6cc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10a      	bne.n	8002054 <HAL_DMA_IRQHandler+0x52c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e009      	b.n	8002068 <HAL_DMA_IRQHandler+0x540>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	bf14      	ite	ne
 8002062:	2301      	movne	r3, #1
 8002064:	2300      	moveq	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03e      	beq.n	80020ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2210      	movs	r2, #16
 8002076:	409a      	lsls	r2, r3
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d018      	beq.n	80020bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d024      	beq.n	80020ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e01f      	b.n	80020ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01b      	beq.n	80020ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
 80020ba:	e016      	b.n	80020ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0208 	bic.w	r2, r2, #8
 80020d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2220      	movs	r2, #32
 80020f4:	409a      	lsls	r2, r3
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8110 	beq.w	8002320 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2c      	ldr	r2, [pc, #176]	@ (80021b8 <HAL_DMA_IRQHandler+0x690>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2b      	ldr	r2, [pc, #172]	@ (80021bc <HAL_DMA_IRQHandler+0x694>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a29      	ldr	r2, [pc, #164]	@ (80021c0 <HAL_DMA_IRQHandler+0x698>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a28      	ldr	r2, [pc, #160]	@ (80021c4 <HAL_DMA_IRQHandler+0x69c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <HAL_DMA_IRQHandler+0x6a0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a25      	ldr	r2, [pc, #148]	@ (80021cc <HAL_DMA_IRQHandler+0x6a4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a23      	ldr	r2, [pc, #140]	@ (80021d0 <HAL_DMA_IRQHandler+0x6a8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a22      	ldr	r2, [pc, #136]	@ (80021d4 <HAL_DMA_IRQHandler+0x6ac>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a20      	ldr	r2, [pc, #128]	@ (80021d8 <HAL_DMA_IRQHandler+0x6b0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1f      	ldr	r2, [pc, #124]	@ (80021dc <HAL_DMA_IRQHandler+0x6b4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_DMA_IRQHandler+0x6b8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_DMA_IRQHandler+0x6bc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1a      	ldr	r2, [pc, #104]	@ (80021e8 <HAL_DMA_IRQHandler+0x6c0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a19      	ldr	r2, [pc, #100]	@ (80021ec <HAL_DMA_IRQHandler+0x6c4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a17      	ldr	r2, [pc, #92]	@ (80021f0 <HAL_DMA_IRQHandler+0x6c8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x678>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <HAL_DMA_IRQHandler+0x6cc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12b      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x6d0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e02a      	b.n	800220c <HAL_DMA_IRQHandler+0x6e4>
 80021b6:	bf00      	nop
 80021b8:	40020010 	.word	0x40020010
 80021bc:	40020028 	.word	0x40020028
 80021c0:	40020040 	.word	0x40020040
 80021c4:	40020058 	.word	0x40020058
 80021c8:	40020070 	.word	0x40020070
 80021cc:	40020088 	.word	0x40020088
 80021d0:	400200a0 	.word	0x400200a0
 80021d4:	400200b8 	.word	0x400200b8
 80021d8:	40020410 	.word	0x40020410
 80021dc:	40020428 	.word	0x40020428
 80021e0:	40020440 	.word	0x40020440
 80021e4:	40020458 	.word	0x40020458
 80021e8:	40020470 	.word	0x40020470
 80021ec:	40020488 	.word	0x40020488
 80021f0:	400204a0 	.word	0x400204a0
 80021f4:	400204b8 	.word	0x400204b8
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 8087 	beq.w	8002320 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2220      	movs	r2, #32
 800221c:	409a      	lsls	r2, r3
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b04      	cmp	r3, #4
 800222c:	d139      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0216 	bic.w	r2, r2, #22
 800223c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800224c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_DMA_IRQHandler+0x736>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0208 	bic.w	r2, r2, #8
 800226c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	223f      	movs	r2, #63	@ 0x3f
 8002278:	409a      	lsls	r2, r3
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 834a 	beq.w	800292c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	4798      	blx	r3
          }
          return;
 80022a0:	e344      	b.n	800292c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02c      	beq.n	8002320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
 80022ce:	e027      	b.n	8002320 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d023      	beq.n	8002320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e01e      	b.n	8002320 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0210 	bic.w	r2, r2, #16
 80022fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8306 	beq.w	8002936 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8088 	beq.w	8002448 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7a      	ldr	r2, [pc, #488]	@ (8002530 <HAL_DMA_IRQHandler+0xa08>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04a      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a79      	ldr	r2, [pc, #484]	@ (8002534 <HAL_DMA_IRQHandler+0xa0c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d045      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a77      	ldr	r2, [pc, #476]	@ (8002538 <HAL_DMA_IRQHandler+0xa10>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a76      	ldr	r2, [pc, #472]	@ (800253c <HAL_DMA_IRQHandler+0xa14>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03b      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a74      	ldr	r2, [pc, #464]	@ (8002540 <HAL_DMA_IRQHandler+0xa18>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a73      	ldr	r2, [pc, #460]	@ (8002544 <HAL_DMA_IRQHandler+0xa1c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a71      	ldr	r2, [pc, #452]	@ (8002548 <HAL_DMA_IRQHandler+0xa20>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a70      	ldr	r2, [pc, #448]	@ (800254c <HAL_DMA_IRQHandler+0xa24>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d027      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6e      	ldr	r2, [pc, #440]	@ (8002550 <HAL_DMA_IRQHandler+0xa28>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d022      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6d      	ldr	r2, [pc, #436]	@ (8002554 <HAL_DMA_IRQHandler+0xa2c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01d      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002558 <HAL_DMA_IRQHandler+0xa30>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a6a      	ldr	r2, [pc, #424]	@ (800255c <HAL_DMA_IRQHandler+0xa34>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a68      	ldr	r2, [pc, #416]	@ (8002560 <HAL_DMA_IRQHandler+0xa38>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a67      	ldr	r2, [pc, #412]	@ (8002564 <HAL_DMA_IRQHandler+0xa3c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a65      	ldr	r2, [pc, #404]	@ (8002568 <HAL_DMA_IRQHandler+0xa40>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x8b8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a64      	ldr	r2, [pc, #400]	@ (800256c <HAL_DMA_IRQHandler+0xa44>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d108      	bne.n	80023f2 <HAL_DMA_IRQHandler+0x8ca>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <HAL_DMA_IRQHandler+0x8da>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240a:	429a      	cmp	r2, r3
 800240c:	d307      	bcc.n	800241e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f2      	bne.n	8002402 <HAL_DMA_IRQHandler+0x8da>
 800241c:	e000      	b.n	8002420 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800241e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2203      	movs	r2, #3
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002436:	e003      	b.n	8002440 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8272 	beq.w	8002936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
 800245a:	e26c      	b.n	8002936 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a43      	ldr	r2, [pc, #268]	@ (8002570 <HAL_DMA_IRQHandler+0xa48>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d022      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a42      	ldr	r2, [pc, #264]	@ (8002574 <HAL_DMA_IRQHandler+0xa4c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d01d      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a40      	ldr	r2, [pc, #256]	@ (8002578 <HAL_DMA_IRQHandler+0xa50>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d018      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a3f      	ldr	r2, [pc, #252]	@ (800257c <HAL_DMA_IRQHandler+0xa54>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3d      	ldr	r2, [pc, #244]	@ (8002580 <HAL_DMA_IRQHandler+0xa58>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00e      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3c      	ldr	r2, [pc, #240]	@ (8002584 <HAL_DMA_IRQHandler+0xa5c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3a      	ldr	r2, [pc, #232]	@ (8002588 <HAL_DMA_IRQHandler+0xa60>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_DMA_IRQHandler+0x984>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a39      	ldr	r2, [pc, #228]	@ (800258c <HAL_DMA_IRQHandler+0xa64>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x988>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_DMA_IRQHandler+0x98a>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 823f 	beq.w	8002936 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2204      	movs	r2, #4
 80024ca:	409a      	lsls	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80cd 	beq.w	8002670 <HAL_DMA_IRQHandler+0xb48>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80c7 	beq.w	8002670 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2204      	movs	r2, #4
 80024ec:	409a      	lsls	r2, r3
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d049      	beq.n	8002590 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8210 	beq.w	8002930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002518:	e20a      	b.n	8002930 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8206 	beq.w	8002930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800252c:	e200      	b.n	8002930 <HAL_DMA_IRQHandler+0xe08>
 800252e:	bf00      	nop
 8002530:	40020010 	.word	0x40020010
 8002534:	40020028 	.word	0x40020028
 8002538:	40020040 	.word	0x40020040
 800253c:	40020058 	.word	0x40020058
 8002540:	40020070 	.word	0x40020070
 8002544:	40020088 	.word	0x40020088
 8002548:	400200a0 	.word	0x400200a0
 800254c:	400200b8 	.word	0x400200b8
 8002550:	40020410 	.word	0x40020410
 8002554:	40020428 	.word	0x40020428
 8002558:	40020440 	.word	0x40020440
 800255c:	40020458 	.word	0x40020458
 8002560:	40020470 	.word	0x40020470
 8002564:	40020488 	.word	0x40020488
 8002568:	400204a0 	.word	0x400204a0
 800256c:	400204b8 	.word	0x400204b8
 8002570:	58025408 	.word	0x58025408
 8002574:	5802541c 	.word	0x5802541c
 8002578:	58025430 	.word	0x58025430
 800257c:	58025444 	.word	0x58025444
 8002580:	58025458 	.word	0x58025458
 8002584:	5802546c 	.word	0x5802546c
 8002588:	58025480 	.word	0x58025480
 800258c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d160      	bne.n	800265c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7f      	ldr	r2, [pc, #508]	@ (800279c <HAL_DMA_IRQHandler+0xc74>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04a      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a7d      	ldr	r2, [pc, #500]	@ (80027a0 <HAL_DMA_IRQHandler+0xc78>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d045      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a7c      	ldr	r2, [pc, #496]	@ (80027a4 <HAL_DMA_IRQHandler+0xc7c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d040      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a7a      	ldr	r2, [pc, #488]	@ (80027a8 <HAL_DMA_IRQHandler+0xc80>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d03b      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a79      	ldr	r2, [pc, #484]	@ (80027ac <HAL_DMA_IRQHandler+0xc84>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d036      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a77      	ldr	r2, [pc, #476]	@ (80027b0 <HAL_DMA_IRQHandler+0xc88>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a76      	ldr	r2, [pc, #472]	@ (80027b4 <HAL_DMA_IRQHandler+0xc8c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d02c      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a74      	ldr	r2, [pc, #464]	@ (80027b8 <HAL_DMA_IRQHandler+0xc90>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d027      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a73      	ldr	r2, [pc, #460]	@ (80027bc <HAL_DMA_IRQHandler+0xc94>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a71      	ldr	r2, [pc, #452]	@ (80027c0 <HAL_DMA_IRQHandler+0xc98>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a70      	ldr	r2, [pc, #448]	@ (80027c4 <HAL_DMA_IRQHandler+0xc9c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a6e      	ldr	r2, [pc, #440]	@ (80027c8 <HAL_DMA_IRQHandler+0xca0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6d      	ldr	r2, [pc, #436]	@ (80027cc <HAL_DMA_IRQHandler+0xca4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6b      	ldr	r2, [pc, #428]	@ (80027d0 <HAL_DMA_IRQHandler+0xca8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6a      	ldr	r2, [pc, #424]	@ (80027d4 <HAL_DMA_IRQHandler+0xcac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_DMA_IRQHandler+0xb12>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a68      	ldr	r2, [pc, #416]	@ (80027d8 <HAL_DMA_IRQHandler+0xcb0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <HAL_DMA_IRQHandler+0xb24>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0208 	bic.w	r2, r2, #8
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e007      	b.n	800265c <HAL_DMA_IRQHandler+0xb34>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0204 	bic.w	r2, r2, #4
 800265a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8165 	beq.w	8002930 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800266e:	e15f      	b.n	8002930 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2202      	movs	r2, #2
 800267a:	409a      	lsls	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80c5 	beq.w	8002810 <HAL_DMA_IRQHandler+0xce8>
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80bf 	beq.w	8002810 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2202      	movs	r2, #2
 800269c:	409a      	lsls	r2, r3
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 813a 	beq.w	8002934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026c8:	e134      	b.n	8002934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8130 	beq.w	8002934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026dc:	e12a      	b.n	8002934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 8089 	bne.w	80027fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2b      	ldr	r2, [pc, #172]	@ (800279c <HAL_DMA_IRQHandler+0xc74>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d04a      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a29      	ldr	r2, [pc, #164]	@ (80027a0 <HAL_DMA_IRQHandler+0xc78>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d045      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a28      	ldr	r2, [pc, #160]	@ (80027a4 <HAL_DMA_IRQHandler+0xc7c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d040      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a26      	ldr	r2, [pc, #152]	@ (80027a8 <HAL_DMA_IRQHandler+0xc80>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d03b      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a25      	ldr	r2, [pc, #148]	@ (80027ac <HAL_DMA_IRQHandler+0xc84>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a23      	ldr	r2, [pc, #140]	@ (80027b0 <HAL_DMA_IRQHandler+0xc88>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d031      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <HAL_DMA_IRQHandler+0xc8c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d02c      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <HAL_DMA_IRQHandler+0xc90>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d027      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1f      	ldr	r2, [pc, #124]	@ (80027bc <HAL_DMA_IRQHandler+0xc94>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d022      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <HAL_DMA_IRQHandler+0xc98>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01d      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1c      	ldr	r2, [pc, #112]	@ (80027c4 <HAL_DMA_IRQHandler+0xc9c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d018      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1a      	ldr	r2, [pc, #104]	@ (80027c8 <HAL_DMA_IRQHandler+0xca0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a19      	ldr	r2, [pc, #100]	@ (80027cc <HAL_DMA_IRQHandler+0xca4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a17      	ldr	r2, [pc, #92]	@ (80027d0 <HAL_DMA_IRQHandler+0xca8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <HAL_DMA_IRQHandler+0xcac>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_DMA_IRQHandler+0xc62>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_DMA_IRQHandler+0xcb0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d128      	bne.n	80027dc <HAL_DMA_IRQHandler+0xcb4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0214 	bic.w	r2, r2, #20
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e027      	b.n	80027ec <HAL_DMA_IRQHandler+0xcc4>
 800279c:	40020010 	.word	0x40020010
 80027a0:	40020028 	.word	0x40020028
 80027a4:	40020040 	.word	0x40020040
 80027a8:	40020058 	.word	0x40020058
 80027ac:	40020070 	.word	0x40020070
 80027b0:	40020088 	.word	0x40020088
 80027b4:	400200a0 	.word	0x400200a0
 80027b8:	400200b8 	.word	0x400200b8
 80027bc:	40020410 	.word	0x40020410
 80027c0:	40020428 	.word	0x40020428
 80027c4:	40020440 	.word	0x40020440
 80027c8:	40020458 	.word	0x40020458
 80027cc:	40020470 	.word	0x40020470
 80027d0:	40020488 	.word	0x40020488
 80027d4:	400204a0 	.word	0x400204a0
 80027d8:	400204b8 	.word	0x400204b8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 020a 	bic.w	r2, r2, #10
 80027ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8097 	beq.w	8002934 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800280e:	e091      	b.n	8002934 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2208      	movs	r2, #8
 800281a:	409a      	lsls	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8088 	beq.w	8002936 <HAL_DMA_IRQHandler+0xe0e>
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8082 	beq.w	8002936 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a41      	ldr	r2, [pc, #260]	@ (800293c <HAL_DMA_IRQHandler+0xe14>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d04a      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3f      	ldr	r2, [pc, #252]	@ (8002940 <HAL_DMA_IRQHandler+0xe18>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d045      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a3e      	ldr	r2, [pc, #248]	@ (8002944 <HAL_DMA_IRQHandler+0xe1c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d040      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3c      	ldr	r2, [pc, #240]	@ (8002948 <HAL_DMA_IRQHandler+0xe20>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d03b      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a3b      	ldr	r2, [pc, #236]	@ (800294c <HAL_DMA_IRQHandler+0xe24>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d036      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a39      	ldr	r2, [pc, #228]	@ (8002950 <HAL_DMA_IRQHandler+0xe28>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d031      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a38      	ldr	r2, [pc, #224]	@ (8002954 <HAL_DMA_IRQHandler+0xe2c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d02c      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a36      	ldr	r2, [pc, #216]	@ (8002958 <HAL_DMA_IRQHandler+0xe30>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d027      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a35      	ldr	r2, [pc, #212]	@ (800295c <HAL_DMA_IRQHandler+0xe34>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a33      	ldr	r2, [pc, #204]	@ (8002960 <HAL_DMA_IRQHandler+0xe38>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01d      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a32      	ldr	r2, [pc, #200]	@ (8002964 <HAL_DMA_IRQHandler+0xe3c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d018      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a30      	ldr	r2, [pc, #192]	@ (8002968 <HAL_DMA_IRQHandler+0xe40>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2f      	ldr	r2, [pc, #188]	@ (800296c <HAL_DMA_IRQHandler+0xe44>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00e      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_DMA_IRQHandler+0xe48>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002974 <HAL_DMA_IRQHandler+0xe4c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xdaa>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <HAL_DMA_IRQHandler+0xe50>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d108      	bne.n	80028e4 <HAL_DMA_IRQHandler+0xdbc>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 021c 	bic.w	r2, r2, #28
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_DMA_IRQHandler+0xdcc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 020e 	bic.w	r2, r2, #14
 80028f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	4798      	blx	r3
 800292a:	e004      	b.n	8002936 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800292c:	bf00      	nop
 800292e:	e002      	b.n	8002936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002930:	bf00      	nop
 8002932:	e000      	b.n	8002936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002934:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002936:	3728      	adds	r7, #40	@ 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40020010 	.word	0x40020010
 8002940:	40020028 	.word	0x40020028
 8002944:	40020040 	.word	0x40020040
 8002948:	40020058 	.word	0x40020058
 800294c:	40020070 	.word	0x40020070
 8002950:	40020088 	.word	0x40020088
 8002954:	400200a0 	.word	0x400200a0
 8002958:	400200b8 	.word	0x400200b8
 800295c:	40020410 	.word	0x40020410
 8002960:	40020428 	.word	0x40020428
 8002964:	40020440 	.word	0x40020440
 8002968:	40020458 	.word	0x40020458
 800296c:	40020470 	.word	0x40020470
 8002970:	40020488 	.word	0x40020488
 8002974:	400204a0 	.word	0x400204a0
 8002978:	400204b8 	.word	0x400204b8

0800297c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b98 <DMA_SetConfig+0x21c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d072      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a7d      	ldr	r2, [pc, #500]	@ (8002b9c <DMA_SetConfig+0x220>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d06d      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <DMA_SetConfig+0x224>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d068      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a7a      	ldr	r2, [pc, #488]	@ (8002ba4 <DMA_SetConfig+0x228>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d063      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a79      	ldr	r2, [pc, #484]	@ (8002ba8 <DMA_SetConfig+0x22c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d05e      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a77      	ldr	r2, [pc, #476]	@ (8002bac <DMA_SetConfig+0x230>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d059      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a76      	ldr	r2, [pc, #472]	@ (8002bb0 <DMA_SetConfig+0x234>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d054      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a74      	ldr	r2, [pc, #464]	@ (8002bb4 <DMA_SetConfig+0x238>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d04f      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a73      	ldr	r2, [pc, #460]	@ (8002bb8 <DMA_SetConfig+0x23c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d04a      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a71      	ldr	r2, [pc, #452]	@ (8002bbc <DMA_SetConfig+0x240>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d045      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a70      	ldr	r2, [pc, #448]	@ (8002bc0 <DMA_SetConfig+0x244>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d040      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc4 <DMA_SetConfig+0x248>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d03b      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6d      	ldr	r2, [pc, #436]	@ (8002bc8 <DMA_SetConfig+0x24c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d036      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bcc <DMA_SetConfig+0x250>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd0 <DMA_SetConfig+0x254>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d02c      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a68      	ldr	r2, [pc, #416]	@ (8002bd4 <DMA_SetConfig+0x258>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d027      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a67      	ldr	r2, [pc, #412]	@ (8002bd8 <DMA_SetConfig+0x25c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a65      	ldr	r2, [pc, #404]	@ (8002bdc <DMA_SetConfig+0x260>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a64      	ldr	r2, [pc, #400]	@ (8002be0 <DMA_SetConfig+0x264>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d018      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a62      	ldr	r2, [pc, #392]	@ (8002be4 <DMA_SetConfig+0x268>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a61      	ldr	r2, [pc, #388]	@ (8002be8 <DMA_SetConfig+0x26c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bec <DMA_SetConfig+0x270>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5e      	ldr	r2, [pc, #376]	@ (8002bf0 <DMA_SetConfig+0x274>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <DMA_SetConfig+0x10a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf4 <DMA_SetConfig+0x278>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <DMA_SetConfig+0x10e>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <DMA_SetConfig+0x110>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002aaa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a39      	ldr	r2, [pc, #228]	@ (8002b98 <DMA_SetConfig+0x21c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d04a      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a38      	ldr	r2, [pc, #224]	@ (8002b9c <DMA_SetConfig+0x220>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d045      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a36      	ldr	r2, [pc, #216]	@ (8002ba0 <DMA_SetConfig+0x224>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d040      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a35      	ldr	r2, [pc, #212]	@ (8002ba4 <DMA_SetConfig+0x228>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d03b      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a33      	ldr	r2, [pc, #204]	@ (8002ba8 <DMA_SetConfig+0x22c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d036      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <DMA_SetConfig+0x230>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d031      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a30      	ldr	r2, [pc, #192]	@ (8002bb0 <DMA_SetConfig+0x234>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d02c      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb4 <DMA_SetConfig+0x238>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d027      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb8 <DMA_SetConfig+0x23c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d022      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002bbc <DMA_SetConfig+0x240>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01d      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc0 <DMA_SetConfig+0x244>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d018      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	@ (8002bc4 <DMA_SetConfig+0x248>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d013      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a27      	ldr	r2, [pc, #156]	@ (8002bc8 <DMA_SetConfig+0x24c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00e      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a26      	ldr	r2, [pc, #152]	@ (8002bcc <DMA_SetConfig+0x250>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d009      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a24      	ldr	r2, [pc, #144]	@ (8002bd0 <DMA_SetConfig+0x254>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <DMA_SetConfig+0x1d0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a23      	ldr	r2, [pc, #140]	@ (8002bd4 <DMA_SetConfig+0x258>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <DMA_SetConfig+0x1d4>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <DMA_SetConfig+0x1d6>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d059      	beq.n	8002c0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	223f      	movs	r2, #63	@ 0x3f
 8002b60:	409a      	lsls	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	d138      	bne.n	8002bf8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b96:	e086      	b.n	8002ca6 <DMA_SetConfig+0x32a>
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	58025408 	.word	0x58025408
 8002bdc:	5802541c 	.word	0x5802541c
 8002be0:	58025430 	.word	0x58025430
 8002be4:	58025444 	.word	0x58025444
 8002be8:	58025458 	.word	0x58025458
 8002bec:	5802546c 	.word	0x5802546c
 8002bf0:	58025480 	.word	0x58025480
 8002bf4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]
}
 8002c08:	e04d      	b.n	8002ca6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a29      	ldr	r2, [pc, #164]	@ (8002cb4 <DMA_SetConfig+0x338>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a27      	ldr	r2, [pc, #156]	@ (8002cb8 <DMA_SetConfig+0x33c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a26      	ldr	r2, [pc, #152]	@ (8002cbc <DMA_SetConfig+0x340>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	@ (8002cc0 <DMA_SetConfig+0x344>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <DMA_SetConfig+0x348>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a21      	ldr	r2, [pc, #132]	@ (8002cc8 <DMA_SetConfig+0x34c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a20      	ldr	r2, [pc, #128]	@ (8002ccc <DMA_SetConfig+0x350>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <DMA_SetConfig+0x2de>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd0 <DMA_SetConfig+0x354>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <DMA_SetConfig+0x2e2>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <DMA_SetConfig+0x2e4>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b40      	cmp	r3, #64	@ 0x40
 8002c82:	d108      	bne.n	8002c96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	60da      	str	r2, [r3, #12]
}
 8002c94:	e007      	b.n	8002ca6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	60da      	str	r2, [r3, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	58025408 	.word	0x58025408
 8002cb8:	5802541c 	.word	0x5802541c
 8002cbc:	58025430 	.word	0x58025430
 8002cc0:	58025444 	.word	0x58025444
 8002cc4:	58025458 	.word	0x58025458
 8002cc8:	5802546c 	.word	0x5802546c
 8002ccc:	58025480 	.word	0x58025480
 8002cd0:	58025494 	.word	0x58025494

08002cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a42      	ldr	r2, [pc, #264]	@ (8002dec <DMA_CalcBaseAndBitshift+0x118>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d04a      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a41      	ldr	r2, [pc, #260]	@ (8002df0 <DMA_CalcBaseAndBitshift+0x11c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d045      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x120>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d040      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002df8 <DMA_CalcBaseAndBitshift+0x124>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d03b      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3c      	ldr	r2, [pc, #240]	@ (8002dfc <DMA_CalcBaseAndBitshift+0x128>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d036      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3b      	ldr	r2, [pc, #236]	@ (8002e00 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d031      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a39      	ldr	r2, [pc, #228]	@ (8002e04 <DMA_CalcBaseAndBitshift+0x130>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d02c      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a38      	ldr	r2, [pc, #224]	@ (8002e08 <DMA_CalcBaseAndBitshift+0x134>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d027      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a36      	ldr	r2, [pc, #216]	@ (8002e0c <DMA_CalcBaseAndBitshift+0x138>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a35      	ldr	r2, [pc, #212]	@ (8002e10 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01d      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a33      	ldr	r2, [pc, #204]	@ (8002e14 <DMA_CalcBaseAndBitshift+0x140>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d018      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a32      	ldr	r2, [pc, #200]	@ (8002e18 <DMA_CalcBaseAndBitshift+0x144>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d013      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a30      	ldr	r2, [pc, #192]	@ (8002e1c <DMA_CalcBaseAndBitshift+0x148>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00e      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2f      	ldr	r2, [pc, #188]	@ (8002e20 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d009      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <DMA_CalcBaseAndBitshift+0x150>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d004      	beq.n	8002d7c <DMA_CalcBaseAndBitshift+0xa8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <DMA_CalcBaseAndBitshift+0x154>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <DMA_CalcBaseAndBitshift+0xac>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <DMA_CalcBaseAndBitshift+0xae>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3b10      	subs	r3, #16
 8002d8e:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <DMA_CalcBaseAndBitshift+0x158>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	4a24      	ldr	r2, [pc, #144]	@ (8002e30 <DMA_CalcBaseAndBitshift+0x15c>)
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d908      	bls.n	8002dc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <DMA_CalcBaseAndBitshift+0x160>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	1d1a      	adds	r2, r3, #4
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dbe:	e00d      	b.n	8002ddc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <DMA_CalcBaseAndBitshift+0x160>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dce:	e005      	b.n	8002ddc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	40020010 	.word	0x40020010
 8002df0:	40020028 	.word	0x40020028
 8002df4:	40020040 	.word	0x40020040
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	40020070 	.word	0x40020070
 8002e00:	40020088 	.word	0x40020088
 8002e04:	400200a0 	.word	0x400200a0
 8002e08:	400200b8 	.word	0x400200b8
 8002e0c:	40020410 	.word	0x40020410
 8002e10:	40020428 	.word	0x40020428
 8002e14:	40020440 	.word	0x40020440
 8002e18:	40020458 	.word	0x40020458
 8002e1c:	40020470 	.word	0x40020470
 8002e20:	40020488 	.word	0x40020488
 8002e24:	400204a0 	.word	0x400204a0
 8002e28:	400204b8 	.word	0x400204b8
 8002e2c:	aaaaaaab 	.word	0xaaaaaaab
 8002e30:	08005af8 	.word	0x08005af8
 8002e34:	fffffc00 	.word	0xfffffc00

08002e38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d120      	bne.n	8002e8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d858      	bhi.n	8002f06 <DMA_CheckFifoParam+0xce>
 8002e54:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <DMA_CheckFifoParam+0x24>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e7f 	.word	0x08002e7f
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08002f07 	.word	0x08002f07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d048      	beq.n	8002f0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e7c:	e045      	b.n	8002f0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e86:	d142      	bne.n	8002f0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e8c:	e03f      	b.n	8002f0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e96:	d123      	bne.n	8002ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d838      	bhi.n	8002f12 <DMA_CheckFifoParam+0xda>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <DMA_CheckFifoParam+0x70>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ebf 	.word	0x08002ebf
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002ed1 	.word	0x08002ed1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
        break;
 8002ebc:	e030      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d025      	beq.n	8002f16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ece:	e022      	b.n	8002f16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed8:	d11f      	bne.n	8002f1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ede:	e01c      	b.n	8002f1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d902      	bls.n	8002eee <DMA_CheckFifoParam+0xb6>
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d003      	beq.n	8002ef4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002eec:	e018      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef2:	e015      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
    break;
 8002f04:	e00b      	b.n	8002f1e <DMA_CheckFifoParam+0xe6>
        break;
 8002f06:	bf00      	nop
 8002f08:	e00a      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        break;
 8002f0a:	bf00      	nop
 8002f0c:	e008      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        break;
 8002f0e:	bf00      	nop
 8002f10:	e006      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        break;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
    break;
 8002f1e:	bf00      	nop
    }
  }

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a38      	ldr	r2, [pc, #224]	@ (8003024 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d022      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a36      	ldr	r2, [pc, #216]	@ (8003028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01d      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a35      	ldr	r2, [pc, #212]	@ (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d018      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a33      	ldr	r2, [pc, #204]	@ (8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a32      	ldr	r2, [pc, #200]	@ (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00e      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a30      	ldr	r2, [pc, #192]	@ (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d009      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800303c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d004      	beq.n	8002f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2d      	ldr	r2, [pc, #180]	@ (8003040 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01a      	beq.n	8002fce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3b08      	subs	r3, #8
 8002fa0:	4a28      	ldr	r2, [pc, #160]	@ (8003044 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4b26      	ldr	r3, [pc, #152]	@ (8003048 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a24      	ldr	r2, [pc, #144]	@ (800304c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002fbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002fcc:	e024      	b.n	8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3b10      	subs	r3, #16
 8002fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003050 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8003054 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d806      	bhi.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4a1b      	ldr	r2, [pc, #108]	@ (8003058 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d902      	bls.n	8002ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4b18      	ldr	r3, [pc, #96]	@ (800305c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a16      	ldr	r2, [pc, #88]	@ (8003060 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003008:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2201      	movs	r2, #1
 8003012:	409a      	lsls	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	58025408 	.word	0x58025408
 8003028:	5802541c 	.word	0x5802541c
 800302c:	58025430 	.word	0x58025430
 8003030:	58025444 	.word	0x58025444
 8003034:	58025458 	.word	0x58025458
 8003038:	5802546c 	.word	0x5802546c
 800303c:	58025480 	.word	0x58025480
 8003040:	58025494 	.word	0x58025494
 8003044:	cccccccd 	.word	0xcccccccd
 8003048:	16009600 	.word	0x16009600
 800304c:	58025880 	.word	0x58025880
 8003050:	aaaaaaab 	.word	0xaaaaaaab
 8003054:	400204b8 	.word	0x400204b8
 8003058:	4002040f 	.word	0x4002040f
 800305c:	10008200 	.word	0x10008200
 8003060:	40020880 	.word	0x40020880

08003064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04a      	beq.n	8003110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d847      	bhi.n	8003110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a25      	ldr	r2, [pc, #148]	@ (800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01d      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a21      	ldr	r2, [pc, #132]	@ (8003128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4b17      	ldr	r3, [pc, #92]	@ (800313c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80030ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80030ee:	e009      	b.n	8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	461a      	mov	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a11      	ldr	r2, [pc, #68]	@ (8003148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003102:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b01      	subs	r3, #1
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	58025408 	.word	0x58025408
 8003120:	5802541c 	.word	0x5802541c
 8003124:	58025430 	.word	0x58025430
 8003128:	58025444 	.word	0x58025444
 800312c:	58025458 	.word	0x58025458
 8003130:	5802546c 	.word	0x5802546c
 8003134:	58025480 	.word	0x58025480
 8003138:	58025494 	.word	0x58025494
 800313c:	1600963f 	.word	0x1600963f
 8003140:	58025940 	.word	0x58025940
 8003144:	1000823f 	.word	0x1000823f
 8003148:	40020940 	.word	0x40020940

0800314c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	460b      	mov	r3, r1
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e00a      	b.n	800317e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]
      break;
 8003174:	e002      	b.n	800317c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
      break;
 800317a:	bf00      	nop
  }

  return status;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
}
 800317e:	4618      	mov	r0, r3
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e003      	b.n	80031a6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2201      	movs	r2, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	011a      	lsls	r2, r3, #4
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <HAL_EXTI_IRQHandler+0x5c>)
 80031de:	4413      	add	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4798      	blx	r3
    }
  }
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	58000088 	.word	0x58000088

08003214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	@ 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003222:	4b89      	ldr	r3, [pc, #548]	@ (8003448 <HAL_GPIO_Init+0x234>)
 8003224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003226:	e194      	b.n	8003552 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8186 	beq.w	800354c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d005      	beq.n	8003258 <HAL_GPIO_Init+0x44>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d130      	bne.n	80032ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800328e:	2201      	movs	r2, #1
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 0201 	and.w	r2, r3, #1
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d017      	beq.n	80032f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2203      	movs	r2, #3
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d123      	bne.n	800334a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	08da      	lsrs	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3208      	adds	r2, #8
 800330a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	69b9      	ldr	r1, [r7, #24]
 8003346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f003 0203 	and.w	r2, r3, #3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80e0 	beq.w	800354c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338c:	4b2f      	ldr	r3, [pc, #188]	@ (800344c <HAL_GPIO_Init+0x238>)
 800338e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003392:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <HAL_GPIO_Init+0x238>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800339c:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <HAL_GPIO_Init+0x238>)
 800339e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033aa:	4a29      	ldr	r2, [pc, #164]	@ (8003450 <HAL_GPIO_Init+0x23c>)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	089b      	lsrs	r3, r3, #2
 80033b0:	3302      	adds	r3, #2
 80033b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a20      	ldr	r2, [pc, #128]	@ (8003454 <HAL_GPIO_Init+0x240>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d052      	beq.n	800347c <HAL_GPIO_Init+0x268>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_GPIO_Init+0x244>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_GPIO_Init+0x22e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <HAL_GPIO_Init+0x248>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02b      	beq.n	800343e <HAL_GPIO_Init+0x22a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003460 <HAL_GPIO_Init+0x24c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d025      	beq.n	800343a <HAL_GPIO_Init+0x226>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003464 <HAL_GPIO_Init+0x250>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <HAL_GPIO_Init+0x222>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003468 <HAL_GPIO_Init+0x254>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d019      	beq.n	8003432 <HAL_GPIO_Init+0x21e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1a      	ldr	r2, [pc, #104]	@ (800346c <HAL_GPIO_Init+0x258>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_GPIO_Init+0x21a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a19      	ldr	r2, [pc, #100]	@ (8003470 <HAL_GPIO_Init+0x25c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00d      	beq.n	800342a <HAL_GPIO_Init+0x216>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <HAL_GPIO_Init+0x260>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d007      	beq.n	8003426 <HAL_GPIO_Init+0x212>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <HAL_GPIO_Init+0x264>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_GPIO_Init+0x20e>
 800341e:	2309      	movs	r3, #9
 8003420:	e02d      	b.n	800347e <HAL_GPIO_Init+0x26a>
 8003422:	230a      	movs	r3, #10
 8003424:	e02b      	b.n	800347e <HAL_GPIO_Init+0x26a>
 8003426:	2308      	movs	r3, #8
 8003428:	e029      	b.n	800347e <HAL_GPIO_Init+0x26a>
 800342a:	2307      	movs	r3, #7
 800342c:	e027      	b.n	800347e <HAL_GPIO_Init+0x26a>
 800342e:	2306      	movs	r3, #6
 8003430:	e025      	b.n	800347e <HAL_GPIO_Init+0x26a>
 8003432:	2305      	movs	r3, #5
 8003434:	e023      	b.n	800347e <HAL_GPIO_Init+0x26a>
 8003436:	2304      	movs	r3, #4
 8003438:	e021      	b.n	800347e <HAL_GPIO_Init+0x26a>
 800343a:	2303      	movs	r3, #3
 800343c:	e01f      	b.n	800347e <HAL_GPIO_Init+0x26a>
 800343e:	2302      	movs	r3, #2
 8003440:	e01d      	b.n	800347e <HAL_GPIO_Init+0x26a>
 8003442:	2301      	movs	r3, #1
 8003444:	e01b      	b.n	800347e <HAL_GPIO_Init+0x26a>
 8003446:	bf00      	nop
 8003448:	58000080 	.word	0x58000080
 800344c:	58024400 	.word	0x58024400
 8003450:	58000400 	.word	0x58000400
 8003454:	58020000 	.word	0x58020000
 8003458:	58020400 	.word	0x58020400
 800345c:	58020800 	.word	0x58020800
 8003460:	58020c00 	.word	0x58020c00
 8003464:	58021000 	.word	0x58021000
 8003468:	58021400 	.word	0x58021400
 800346c:	58021800 	.word	0x58021800
 8003470:	58021c00 	.word	0x58021c00
 8003474:	58022000 	.word	0x58022000
 8003478:	58022400 	.word	0x58022400
 800347c:	2300      	movs	r3, #0
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	f002 0203 	and.w	r2, r2, #3
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	4093      	lsls	r3, r2
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800348e:	4938      	ldr	r1, [pc, #224]	@ (8003570 <HAL_GPIO_Init+0x35c>)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f ae63 	bne.w	8003228 <HAL_GPIO_Init+0x14>
  }
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	3724      	adds	r7, #36	@ 0x24
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	58000400 	.word	0x58000400

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003590:	e003      	b.n	800359a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	041a      	lsls	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	619a      	str	r2, [r3, #24]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <HAL_PWREx_ConfigSupply+0x70>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d00a      	beq.n	80035d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035bc:	4b16      	ldr	r3, [pc, #88]	@ (8003618 <HAL_PWREx_ConfigSupply+0x70>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e01f      	b.n	800360e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e01d      	b.n	800360e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035d2:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <HAL_PWREx_ConfigSupply+0x70>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f023 0207 	bic.w	r2, r3, #7
 80035da:	490f      	ldr	r1, [pc, #60]	@ (8003618 <HAL_PWREx_ConfigSupply+0x70>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035e2:	f7fd fb8f 	bl	8000d04 <HAL_GetTick>
 80035e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035e8:	e009      	b.n	80035fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035ea:	f7fd fb8b 	bl	8000d04 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035f8:	d901      	bls.n	80035fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e007      	b.n	800360e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_PWREx_ConfigSupply+0x70>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800360a:	d1ee      	bne.n	80035ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	58024800 	.word	0x58024800

0800361c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08c      	sub	sp, #48	@ 0x30
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f000 bc48 	b.w	8003ec0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8088 	beq.w	800374e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363e:	4b99      	ldr	r3, [pc, #612]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003648:	4b96      	ldr	r3, [pc, #600]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800364e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003650:	2b10      	cmp	r3, #16
 8003652:	d007      	beq.n	8003664 <HAL_RCC_OscConfig+0x48>
 8003654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003656:	2b18      	cmp	r3, #24
 8003658:	d111      	bne.n	800367e <HAL_RCC_OscConfig+0x62>
 800365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d10c      	bne.n	800367e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	4b8f      	ldr	r3, [pc, #572]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d06d      	beq.n	800374c <HAL_RCC_OscConfig+0x130>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d169      	bne.n	800374c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f000 bc21 	b.w	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x7a>
 8003688:	4b86      	ldr	r3, [pc, #536]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a85      	ldr	r2, [pc, #532]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e02e      	b.n	80036f4 <HAL_RCC_OscConfig+0xd8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x9c>
 800369e:	4b81      	ldr	r3, [pc, #516]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a80      	ldr	r2, [pc, #512]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b7e      	ldr	r3, [pc, #504]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7d      	ldr	r2, [pc, #500]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xd8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036c2:	4b78      	ldr	r3, [pc, #480]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a77      	ldr	r2, [pc, #476]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b75      	ldr	r3, [pc, #468]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a74      	ldr	r2, [pc, #464]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xd8>
 80036dc:	4b71      	ldr	r3, [pc, #452]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a70      	ldr	r2, [pc, #448]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b6e      	ldr	r3, [pc, #440]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6d      	ldr	r2, [pc, #436]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd fb02 	bl	8000d04 <HAL_GetTick>
 8003700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fd fafe 	bl	8000d04 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e3d4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003716:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd faee 	bl	8000d04 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800372c:	f7fd faea 	bl	8000d04 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	@ 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e3c0      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800373e:	4b59      	ldr	r3, [pc, #356]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x110>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80ca 	beq.w	80038f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375c:	4b51      	ldr	r3, [pc, #324]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003764:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003766:	4b4f      	ldr	r3, [pc, #316]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_RCC_OscConfig+0x166>
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	2b18      	cmp	r3, #24
 8003776:	d156      	bne.n	8003826 <HAL_RCC_OscConfig+0x20a>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d151      	bne.n	8003826 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003782:	4b48      	ldr	r3, [pc, #288]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x17e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e392      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800379a:	4b42      	ldr	r3, [pc, #264]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0219 	bic.w	r2, r3, #25
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	493f      	ldr	r1, [pc, #252]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd faaa 	bl	8000d04 <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fd faa6 	bl	8000d04 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e37c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c6:	4b37      	ldr	r3, [pc, #220]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	f7fd fac7 	bl	8000d64 <HAL_GetREVID>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037dc:	4293      	cmp	r3, r2
 80037de:	d817      	bhi.n	8003810 <HAL_RCC_OscConfig+0x1f4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d108      	bne.n	80037fa <HAL_RCC_OscConfig+0x1de>
 80037e8:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80037f0:	4a2c      	ldr	r2, [pc, #176]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80037f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f8:	e07a      	b.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fa:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	031b      	lsls	r3, r3, #12
 8003808:	4926      	ldr	r1, [pc, #152]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800380a:	4313      	orrs	r3, r2
 800380c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800380e:	e06f      	b.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b24      	ldr	r3, [pc, #144]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	4921      	ldr	r1, [pc, #132]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003824:	e064      	b.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d047      	beq.n	80038be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800382e:	4b1d      	ldr	r3, [pc, #116]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0219 	bic.w	r2, r3, #25
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	491a      	ldr	r1, [pc, #104]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fa60 	bl	8000d04 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003848:	f7fd fa5c 	bl	8000d04 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e332      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003866:	f7fd fa7d 	bl	8000d64 <HAL_GetREVID>
 800386a:	4603      	mov	r3, r0
 800386c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003870:	4293      	cmp	r3, r2
 8003872:	d819      	bhi.n	80038a8 <HAL_RCC_OscConfig+0x28c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d108      	bne.n	800388e <HAL_RCC_OscConfig+0x272>
 800387c:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003884:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800388a:	6053      	str	r3, [r2, #4]
 800388c:	e030      	b.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	031b      	lsls	r3, r3, #12
 800389c:	4901      	ldr	r1, [pc, #4]	@ (80038a4 <HAL_RCC_OscConfig+0x288>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
 80038a2:	e025      	b.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
 80038a4:	58024400 	.word	0x58024400
 80038a8:	4b9a      	ldr	r3, [pc, #616]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	4997      	ldr	r1, [pc, #604]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e018      	b.n	80038f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b95      	ldr	r3, [pc, #596]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a94      	ldr	r2, [pc, #592]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd fa1b 	bl	8000d04 <HAL_GetTick>
 80038ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fd fa17 	bl	8000d04 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e2ed      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e4:	4b8b      	ldr	r3, [pc, #556]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80a9 	beq.w	8003a50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fe:	4b85      	ldr	r3, [pc, #532]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003906:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003908:	4b82      	ldr	r3, [pc, #520]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d007      	beq.n	8003924 <HAL_RCC_OscConfig+0x308>
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b18      	cmp	r3, #24
 8003918:	d13a      	bne.n	8003990 <HAL_RCC_OscConfig+0x374>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d135      	bne.n	8003990 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003924:	4b7b      	ldr	r3, [pc, #492]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_OscConfig+0x320>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	2b80      	cmp	r3, #128	@ 0x80
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e2c1      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800393c:	f7fd fa12 	bl	8000d64 <HAL_GetREVID>
 8003940:	4603      	mov	r3, r0
 8003942:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003946:	4293      	cmp	r3, r2
 8003948:	d817      	bhi.n	800397a <HAL_RCC_OscConfig+0x35e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	2b20      	cmp	r3, #32
 8003950:	d108      	bne.n	8003964 <HAL_RCC_OscConfig+0x348>
 8003952:	4b70      	ldr	r3, [pc, #448]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800395a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003960:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003962:	e075      	b.n	8003a50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003964:	4b6b      	ldr	r3, [pc, #428]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	069b      	lsls	r3, r3, #26
 8003972:	4968      	ldr	r1, [pc, #416]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003978:	e06a      	b.n	8003a50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800397a:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	4962      	ldr	r1, [pc, #392]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800398e:	e05f      	b.n	8003a50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d042      	beq.n	8003a1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003998:	4b5e      	ldr	r3, [pc, #376]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 800399e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fd f9ae 	bl	8000d04 <HAL_GetTick>
 80039a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039ac:	f7fd f9aa 	bl	8000d04 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e280      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039be:	4b55      	ldr	r3, [pc, #340]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ca:	f7fd f9cb 	bl	8000d64 <HAL_GetREVID>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d817      	bhi.n	8003a08 <HAL_RCC_OscConfig+0x3ec>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d108      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3d6>
 80039e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039ee:	6053      	str	r3, [r2, #4]
 80039f0:	e02e      	b.n	8003a50 <HAL_RCC_OscConfig+0x434>
 80039f2:	4b48      	ldr	r3, [pc, #288]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	069b      	lsls	r3, r3, #26
 8003a00:	4944      	ldr	r1, [pc, #272]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
 8003a06:	e023      	b.n	8003a50 <HAL_RCC_OscConfig+0x434>
 8003a08:	4b42      	ldr	r3, [pc, #264]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	493f      	ldr	r1, [pc, #252]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60cb      	str	r3, [r1, #12]
 8003a1c:	e018      	b.n	8003a50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd f96b 	bl	8000d04 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a32:	f7fd f967 	bl	8000d04 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e23d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a44:	4b33      	ldr	r3, [pc, #204]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d036      	beq.n	8003aca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d019      	beq.n	8003a98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a64:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a68:	4a2a      	ldr	r2, [pc, #168]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd f948 	bl	8000d04 <HAL_GetTick>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fd f944 	bl	8000d04 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e21a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a8a:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x45c>
 8003a96:	e018      	b.n	8003aca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a98:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd f92e 	bl	8000d04 <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fd f92a 	bl	8000d04 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e200      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d039      	beq.n	8003b4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003aea:	f7fd f90b 	bl	8000d04 <HAL_GetTick>
 8003aee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af2:	f7fd f907 	bl	8000d04 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1dd      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b04:	4b03      	ldr	r3, [pc, #12]	@ (8003b14 <HAL_RCC_OscConfig+0x4f8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x4d6>
 8003b10:	e01b      	b.n	8003b4a <HAL_RCC_OscConfig+0x52e>
 8003b12:	bf00      	nop
 8003b14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b18:	4b9b      	ldr	r3, [pc, #620]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a9a      	ldr	r2, [pc, #616]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b24:	f7fd f8ee 	bl	8000d04 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b2c:	f7fd f8ea 	bl	8000d04 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1c0      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b3e:	4b92      	ldr	r3, [pc, #584]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8081 	beq.w	8003c5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b58:	4b8c      	ldr	r3, [pc, #560]	@ (8003d8c <HAL_RCC_OscConfig+0x770>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a8b      	ldr	r2, [pc, #556]	@ (8003d8c <HAL_RCC_OscConfig+0x770>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b64:	f7fd f8ce 	bl	8000d04 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fd f8ca 	bl	8000d04 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	@ 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1a0      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7e:	4b83      	ldr	r3, [pc, #524]	@ (8003d8c <HAL_RCC_OscConfig+0x770>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x584>
 8003b92:	4b7d      	ldr	r3, [pc, #500]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	4a7c      	ldr	r2, [pc, #496]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9e:	e02d      	b.n	8003bfc <HAL_RCC_OscConfig+0x5e0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5a6>
 8003ba8:	4b77      	ldr	r3, [pc, #476]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a76      	ldr	r2, [pc, #472]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	4b74      	ldr	r3, [pc, #464]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a73      	ldr	r2, [pc, #460]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bba:	f023 0304 	bic.w	r3, r3, #4
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc0:	e01c      	b.n	8003bfc <HAL_RCC_OscConfig+0x5e0>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5c8>
 8003bca:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a6e      	ldr	r2, [pc, #440]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0x5e0>
 8003be4:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a67      	ldr	r2, [pc, #412]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	4b65      	ldr	r3, [pc, #404]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	4a64      	ldr	r2, [pc, #400]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003bf6:	f023 0304 	bic.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd f87e 	bl	8000d04 <HAL_GetTick>
 8003c08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fd f87a 	bl	8000d04 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e14e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c22:	4b59      	ldr	r3, [pc, #356]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0ee      	beq.n	8003c0c <HAL_RCC_OscConfig+0x5f0>
 8003c2e:	e014      	b.n	8003c5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fd f868 	bl	8000d04 <HAL_GetTick>
 8003c34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fd f864 	bl	8000d04 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e138      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ee      	bne.n	8003c38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 812d 	beq.w	8003ebe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c64:	4b48      	ldr	r3, [pc, #288]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c6c:	2b18      	cmp	r3, #24
 8003c6e:	f000 80bd 	beq.w	8003dec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	f040 809e 	bne.w	8003db8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b42      	ldr	r3, [pc, #264]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a41      	ldr	r2, [pc, #260]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd f83c 	bl	8000d04 <HAL_GetTick>
 8003c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd f838 	bl	8000d04 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e10e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca2:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cae:	4b36      	ldr	r3, [pc, #216]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003cb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cb2:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_RCC_OscConfig+0x774>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	4931      	ldr	r1, [pc, #196]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	025b      	lsls	r3, r3, #9
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	061b      	lsls	r3, r3, #24
 8003cf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003cf8:	4923      	ldr	r1, [pc, #140]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d02:	4a21      	ldr	r2, [pc, #132]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d0e:	4b21      	ldr	r3, [pc, #132]	@ (8003d94 <HAL_RCC_OscConfig+0x778>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d16:	00d2      	lsls	r2, r2, #3
 8003d18:	491b      	ldr	r1, [pc, #108]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	f023 020c 	bic.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	4917      	ldr	r1, [pc, #92]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d30:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d34:	f023 0202 	bic.w	r2, r3, #2
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3c:	4912      	ldr	r1, [pc, #72]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d42:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d46:	4a10      	ldr	r2, [pc, #64]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d66:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6a:	4a07      	ldr	r2, [pc, #28]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d72:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a04      	ldr	r2, [pc, #16]	@ (8003d88 <HAL_RCC_OscConfig+0x76c>)
 8003d78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fc ffc1 	bl	8000d04 <HAL_GetTick>
 8003d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d84:	e011      	b.n	8003daa <HAL_RCC_OscConfig+0x78e>
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	58024800 	.word	0x58024800
 8003d90:	fffffc0c 	.word	0xfffffc0c
 8003d94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fc ffb4 	bl	8000d04 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e08a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003daa:	4b47      	ldr	r3, [pc, #284]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x77c>
 8003db6:	e082      	b.n	8003ebe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b43      	ldr	r3, [pc, #268]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a42      	ldr	r2, [pc, #264]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fc ff9e 	bl	8000d04 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fc ff9a 	bl	8000d04 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e070      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dde:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x7b0>
 8003dea:	e068      	b.n	8003ebe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003dec:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003df2:	4b35      	ldr	r3, [pc, #212]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d031      	beq.n	8003e64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0203 	and.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d12a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d122      	bne.n	8003e64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d11a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0a5b      	lsrs	r3, r3, #9
 8003e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d111      	bne.n	8003e64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	0e1b      	lsrs	r3, r3, #24
 8003e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e02b      	b.n	8003ec0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e68:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d01f      	beq.n	8003ebe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4a11      	ldr	r2, [pc, #68]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8a:	f7fc ff3b 	bl	8000d04 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003e90:	bf00      	nop
 8003e92:	f7fc ff37 	bl	8000d04 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d0f9      	beq.n	8003e92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_RCC_OscConfig+0x8b0>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eaa:	00d2      	lsls	r2, r2, #3
 8003eac:	4906      	ldr	r1, [pc, #24]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003eb2:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <HAL_RCC_OscConfig+0x8ac>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3730      	adds	r7, #48	@ 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	ffff0007 	.word	0xffff0007

08003ed0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e19c      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b8a      	ldr	r3, [pc, #552]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b87      	ldr	r3, [pc, #540]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 020f 	bic.w	r2, r3, #15
 8003efa:	4985      	ldr	r1, [pc, #532]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b83      	ldr	r3, [pc, #524]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e184      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	4b7b      	ldr	r3, [pc, #492]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d908      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f30:	4b78      	ldr	r3, [pc, #480]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4975      	ldr	r1, [pc, #468]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	4b70      	ldr	r3, [pc, #448]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d908      	bls.n	8003f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	496a      	ldr	r1, [pc, #424]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d010      	beq.n	8003f9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	4b64      	ldr	r3, [pc, #400]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d908      	bls.n	8003f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f8c:	4b61      	ldr	r3, [pc, #388]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	495e      	ldr	r1, [pc, #376]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	4b59      	ldr	r3, [pc, #356]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d908      	bls.n	8003fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fba:	4b56      	ldr	r3, [pc, #344]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4953      	ldr	r1, [pc, #332]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d010      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d908      	bls.n	8003ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f023 020f 	bic.w	r2, r3, #15
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4947      	ldr	r1, [pc, #284]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d055      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004006:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4940      	ldr	r1, [pc, #256]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8004014:	4313      	orrs	r3, r2
 8004016:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d107      	bne.n	8004030 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004020:	4b3c      	ldr	r3, [pc, #240]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d121      	bne.n	8004070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0f6      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004038:	4b36      	ldr	r3, [pc, #216]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d115      	bne.n	8004070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0ea      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0de      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004060:	4b2c      	ldr	r3, [pc, #176]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0d6      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004070:	4b28      	ldr	r3, [pc, #160]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f023 0207 	bic.w	r2, r3, #7
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4925      	ldr	r1, [pc, #148]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 800407e:	4313      	orrs	r3, r2
 8004080:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004082:	f7fc fe3f 	bl	8000d04 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408a:	f7fc fe3b 	bl	8000d04 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0be      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d1eb      	bne.n	800408a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d208      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ce:	4b11      	ldr	r3, [pc, #68]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f023 020f 	bic.w	r2, r3, #15
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	490e      	ldr	r1, [pc, #56]	@ (8004114 <HAL_RCC_ClockConfig+0x244>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d214      	bcs.n	8004118 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b08      	ldr	r3, [pc, #32]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 020f 	bic.w	r2, r3, #15
 80040f6:	4906      	ldr	r1, [pc, #24]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b04      	ldr	r3, [pc, #16]	@ (8004110 <HAL_RCC_ClockConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e086      	b.n	800421e <HAL_RCC_ClockConfig+0x34e>
 8004110:	52002000 	.word	0x52002000
 8004114:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	4b3f      	ldr	r3, [pc, #252]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004130:	429a      	cmp	r2, r3
 8004132:	d208      	bcs.n	8004146 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004134:	4b3c      	ldr	r3, [pc, #240]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	4939      	ldr	r1, [pc, #228]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004142:	4313      	orrs	r3, r2
 8004144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	4b34      	ldr	r3, [pc, #208]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800415e:	429a      	cmp	r2, r3
 8004160:	d208      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004162:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	492e      	ldr	r1, [pc, #184]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004170:	4313      	orrs	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	4b28      	ldr	r3, [pc, #160]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800418c:	429a      	cmp	r2, r3
 800418e:	d208      	bcs.n	80041a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004190:	4b25      	ldr	r3, [pc, #148]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4922      	ldr	r1, [pc, #136]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d010      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d208      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041be:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4917      	ldr	r1, [pc, #92]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041d0:	f000 f834 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b14      	ldr	r3, [pc, #80]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	4912      	ldr	r1, [pc, #72]	@ (800422c <HAL_RCC_ClockConfig+0x35c>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <HAL_RCC_ClockConfig+0x358>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <HAL_RCC_ClockConfig+0x35c>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	4a0a      	ldr	r2, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x360>)
 8004206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004208:	4a0a      	ldr	r2, [pc, #40]	@ (8004234 <HAL_RCC_ClockConfig+0x364>)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800420e:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <HAL_RCC_ClockConfig+0x368>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc fd2c 	bl	8000c70 <HAL_InitTick>
 8004218:	4603      	mov	r3, r0
 800421a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	08005ae4 	.word	0x08005ae4
 8004230:	24000004 	.word	0x24000004
 8004234:	24000000 	.word	0x24000000
 8004238:	24000014 	.word	0x24000014

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004242:	4bb3      	ldr	r3, [pc, #716]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800424a:	2b18      	cmp	r3, #24
 800424c:	f200 8155 	bhi.w	80044fa <HAL_RCC_GetSysClockFreq+0x2be>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	080042bd 	.word	0x080042bd
 800425c:	080044fb 	.word	0x080044fb
 8004260:	080044fb 	.word	0x080044fb
 8004264:	080044fb 	.word	0x080044fb
 8004268:	080044fb 	.word	0x080044fb
 800426c:	080044fb 	.word	0x080044fb
 8004270:	080044fb 	.word	0x080044fb
 8004274:	080044fb 	.word	0x080044fb
 8004278:	080042e3 	.word	0x080042e3
 800427c:	080044fb 	.word	0x080044fb
 8004280:	080044fb 	.word	0x080044fb
 8004284:	080044fb 	.word	0x080044fb
 8004288:	080044fb 	.word	0x080044fb
 800428c:	080044fb 	.word	0x080044fb
 8004290:	080044fb 	.word	0x080044fb
 8004294:	080044fb 	.word	0x080044fb
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080044fb 	.word	0x080044fb
 80042a0:	080044fb 	.word	0x080044fb
 80042a4:	080044fb 	.word	0x080044fb
 80042a8:	080044fb 	.word	0x080044fb
 80042ac:	080044fb 	.word	0x080044fb
 80042b0:	080044fb 	.word	0x080044fb
 80042b4:	080044fb 	.word	0x080044fb
 80042b8:	080042ef 	.word	0x080042ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042bc:	4b94      	ldr	r3, [pc, #592]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042c8:	4b91      	ldr	r3, [pc, #580]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	4a90      	ldr	r2, [pc, #576]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042d4:	fa22 f303 	lsr.w	r3, r2, r3
 80042d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042da:	e111      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042de:	61bb      	str	r3, [r7, #24]
      break;
 80042e0:	e10e      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042e4:	61bb      	str	r3, [r7, #24]
      break;
 80042e6:	e10b      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042e8:	4b8c      	ldr	r3, [pc, #560]	@ (800451c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042ea:	61bb      	str	r3, [r7, #24]
      break;
 80042ec:	e108      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ee:	4b88      	ldr	r3, [pc, #544]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042f8:	4b85      	ldr	r3, [pc, #532]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004302:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004304:	4b82      	ldr	r3, [pc, #520]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800430e:	4b80      	ldr	r3, [pc, #512]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	08db      	lsrs	r3, r3, #3
 8004314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80e1 	beq.w	80044f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b02      	cmp	r3, #2
 8004336:	f000 8083 	beq.w	8004440 <HAL_RCC_GetSysClockFreq+0x204>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b02      	cmp	r3, #2
 800433e:	f200 80a1 	bhi.w	8004484 <HAL_RCC_GetSysClockFreq+0x248>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x114>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d056      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800434e:	e099      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004350:	4b6f      	ldr	r3, [pc, #444]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02d      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800435c:	4b6c      	ldr	r3, [pc, #432]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	4a6b      	ldr	r2, [pc, #428]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
 800436c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	ee07 3a90 	vmov	s15, r3
 8004374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004386:	4b62      	ldr	r3, [pc, #392]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a02 	vldr	s12, [r7, #8]
 800439a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043b6:	e087      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ca:	4b51      	ldr	r3, [pc, #324]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043da:	ed97 6a02 	vldr	s12, [r7, #8]
 80043de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043fa:	e065      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b40      	ldr	r3, [pc, #256]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004422:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800443e:	e043      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800452c <HAL_RCC_GetSysClockFreq+0x2f0>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b2f      	ldr	r3, [pc, #188]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a02 	vldr	s12, [r7, #8]
 8004466:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004482:	e021      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b1e      	ldr	r3, [pc, #120]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	0a5b      	lsrs	r3, r3, #9
 80044ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d2:	3301      	adds	r3, #1
 80044d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ec:	ee17 3a90 	vmov	r3, s15
 80044f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044f2:	e005      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
      break;
 80044f8:	e002      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044fa:	4b07      	ldr	r3, [pc, #28]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044fc:	61bb      	str	r3, [r7, #24]
      break;
 80044fe:	bf00      	nop
  }

  return sysclockfreq;
 8004500:	69bb      	ldr	r3, [r7, #24]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3724      	adds	r7, #36	@ 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	58024400 	.word	0x58024400
 8004514:	03d09000 	.word	0x03d09000
 8004518:	003d0900 	.word	0x003d0900
 800451c:	007a1200 	.word	0x007a1200
 8004520:	46000000 	.word	0x46000000
 8004524:	4c742400 	.word	0x4c742400
 8004528:	4a742400 	.word	0x4a742400
 800452c:	4af42400 	.word	0x4af42400

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e049      	b.n	80045d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc f9fe 	bl	8000958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fdb8 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e049      	b.n	8004684 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d106      	bne.n	800460a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f841 	bl	800468c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 fd61 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	e03c      	b.n	8004746 <HAL_TIM_PWM_Start_DMA+0xa6>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d109      	bne.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	e02f      	b.n	8004746 <HAL_TIM_PWM_Start_DMA+0xa6>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d109      	bne.n	8004700 <HAL_TIM_PWM_Start_DMA+0x60>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e022      	b.n	8004746 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d109      	bne.n	800471a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	e015      	b.n	8004746 <HAL_TIM_PWM_Start_DMA+0xa6>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b10      	cmp	r3, #16
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start_DMA+0x94>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e008      	b.n	8004746 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
 800474c:	e1b0      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e03c      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d109      	bne.n	8004782 <HAL_TIM_PWM_Start_DMA+0xe2>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b01      	cmp	r3, #1
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e02f      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d109      	bne.n	800479c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e022      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d109      	bne.n	80047b6 <HAL_TIM_PWM_Start_DMA+0x116>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e015      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start_DMA+0x130>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e008      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d034      	beq.n	8004850 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e15c      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start_DMA+0x166>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004804:	e026      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start_DMA+0x176>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004814:	e01e      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start_DMA+0x186>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004824:	e016      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start_DMA+0x196>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004834:	e00e      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b10      	cmp	r3, #16
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004844:	e006      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2202      	movs	r2, #2
 800484a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800484e:	e001      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e12d      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	f200 80ae 	bhi.w	80049b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800485c:	a201      	add	r2, pc, #4	@ (adr r2, 8004864 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004899 	.word	0x08004899
 8004868:	080049b9 	.word	0x080049b9
 800486c:	080049b9 	.word	0x080049b9
 8004870:	080049b9 	.word	0x080049b9
 8004874:	080048e1 	.word	0x080048e1
 8004878:	080049b9 	.word	0x080049b9
 800487c:	080049b9 	.word	0x080049b9
 8004880:	080049b9 	.word	0x080049b9
 8004884:	08004929 	.word	0x08004929
 8004888:	080049b9 	.word	0x080049b9
 800488c:	080049b9 	.word	0x080049b9
 8004890:	080049b9 	.word	0x080049b9
 8004894:	08004971 	.word	0x08004971
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	4a86      	ldr	r2, [pc, #536]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800489e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	4a85      	ldr	r2, [pc, #532]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4a84      	ldr	r2, [pc, #528]	@ (8004ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 80048ae:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3334      	adds	r3, #52	@ 0x34
 80048bc:	461a      	mov	r2, r3
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	f7fc fec8 	bl	8001654 <HAL_DMA_Start_IT>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0f0      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048dc:	60da      	str	r2, [r3, #12]
      break;
 80048de:	e06e      	b.n	80049be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	4a74      	ldr	r2, [pc, #464]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80048e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	4a73      	ldr	r2, [pc, #460]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	4a72      	ldr	r2, [pc, #456]	@ (8004ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 80048f6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3338      	adds	r3, #56	@ 0x38
 8004904:	461a      	mov	r2, r3
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	f7fc fea4 	bl	8001654 <HAL_DMA_Start_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0cc      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004924:	60da      	str	r2, [r3, #12]
      break;
 8004926:	e04a      	b.n	80049be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492c:	4a62      	ldr	r2, [pc, #392]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800492e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	4a61      	ldr	r2, [pc, #388]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a60      	ldr	r2, [pc, #384]	@ (8004ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800493e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	333c      	adds	r3, #60	@ 0x3c
 800494c:	461a      	mov	r2, r3
 800494e:	887b      	ldrh	r3, [r7, #2]
 8004950:	f7fc fe80 	bl	8001654 <HAL_DMA_Start_IT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0a8      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800496c:	60da      	str	r2, [r3, #12]
      break;
 800496e:	e026      	b.n	80049be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	4a50      	ldr	r2, [pc, #320]	@ (8004ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004976:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	4a4f      	ldr	r2, [pc, #316]	@ (8004abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	4a4e      	ldr	r2, [pc, #312]	@ (8004ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004986:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3340      	adds	r3, #64	@ 0x40
 8004994:	461a      	mov	r2, r3
 8004996:	887b      	ldrh	r3, [r7, #2]
 8004998:	f7fc fe5c 	bl	8001654 <HAL_DMA_Start_IT>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e084      	b.n	8004ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049b4:	60da      	str	r2, [r3, #12]
      break;
 80049b6:	e002      	b.n	80049be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d174      	bne.n	8004aae <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 ff9d 	bl	800590c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a39      	ldr	r2, [pc, #228]	@ (8004ac8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a38      	ldr	r2, [pc, #224]	@ (8004acc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a36      	ldr	r2, [pc, #216]	@ (8004ad0 <HAL_TIM_PWM_Start_DMA+0x430>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a35      	ldr	r2, [pc, #212]	@ (8004ad4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_PWM_Start_DMA+0x368>
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_TIM_PWM_Start_DMA+0x36a>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a30:	d01d      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a28      	ldr	r2, [pc, #160]	@ (8004ad8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ae0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ae4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d115      	bne.n	8004a9a <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b06      	cmp	r3, #6
 8004a7e:	d015      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x40c>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a86:	d011      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	e008      	b.n	8004aac <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e000      	b.n	8004aae <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	08004fd3 	.word	0x08004fd3
 8004abc:	0800507b 	.word	0x0800507b
 8004ac0:	08004f41 	.word	0x08004f41
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40010400 	.word	0x40010400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40001800 	.word	0x40001800
 8004ae8:	00010007 	.word	0x00010007

08004aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e0ff      	b.n	8004d0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b14      	cmp	r3, #20
 8004b16:	f200 80f0 	bhi.w	8004cfa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b75 	.word	0x08004b75
 8004b24:	08004cfb 	.word	0x08004cfb
 8004b28:	08004cfb 	.word	0x08004cfb
 8004b2c:	08004cfb 	.word	0x08004cfb
 8004b30:	08004bb5 	.word	0x08004bb5
 8004b34:	08004cfb 	.word	0x08004cfb
 8004b38:	08004cfb 	.word	0x08004cfb
 8004b3c:	08004cfb 	.word	0x08004cfb
 8004b40:	08004bf7 	.word	0x08004bf7
 8004b44:	08004cfb 	.word	0x08004cfb
 8004b48:	08004cfb 	.word	0x08004cfb
 8004b4c:	08004cfb 	.word	0x08004cfb
 8004b50:	08004c37 	.word	0x08004c37
 8004b54:	08004cfb 	.word	0x08004cfb
 8004b58:	08004cfb 	.word	0x08004cfb
 8004b5c:	08004cfb 	.word	0x08004cfb
 8004b60:	08004c79 	.word	0x08004c79
 8004b64:	08004cfb 	.word	0x08004cfb
 8004b68:	08004cfb 	.word	0x08004cfb
 8004b6c:	08004cfb 	.word	0x08004cfb
 8004b70:	08004cb9 	.word	0x08004cb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fb52 	bl	8005224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0208 	orr.w	r2, r2, #8
 8004b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6999      	ldr	r1, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	619a      	str	r2, [r3, #24]
      break;
 8004bb2:	e0a5      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbc2 	bl	8005344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6999      	ldr	r1, [r3, #24]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	619a      	str	r2, [r3, #24]
      break;
 8004bf4:	e084      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fc2b 	bl	8005458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0208 	orr.w	r2, r2, #8
 8004c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0204 	bic.w	r2, r2, #4
 8004c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69d9      	ldr	r1, [r3, #28]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	61da      	str	r2, [r3, #28]
      break;
 8004c34:	e064      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fc93 	bl	8005568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69d9      	ldr	r1, [r3, #28]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	021a      	lsls	r2, r3, #8
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	61da      	str	r2, [r3, #28]
      break;
 8004c76:	e043      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fcdc 	bl	800563c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0208 	orr.w	r2, r2, #8
 8004c92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0204 	bic.w	r2, r2, #4
 8004ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cb6:	e023      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fd20 	bl	8005704 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004cf8:	e002      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop

08004d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIM_ConfigClockSource+0x1c>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0dc      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x1d6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a64      	ldr	r2, [pc, #400]	@ (8004ef8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	f000 80a9 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004d6c:	4a62      	ldr	r2, [pc, #392]	@ (8004ef8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	f200 80ae 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d74:	4a61      	ldr	r2, [pc, #388]	@ (8004efc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	f000 80a1 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004d7c:	4a5f      	ldr	r2, [pc, #380]	@ (8004efc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	f200 80a6 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d84:	4a5e      	ldr	r2, [pc, #376]	@ (8004f00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	f000 8099 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004f00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	f200 809e 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d98:	f000 8091 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004d9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004da0:	f200 8096 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da8:	f000 8089 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004dac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004db0:	f200 808e 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db8:	d03e      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x124>
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dbe:	f200 8087 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc6:	f000 8086 	beq.w	8004ed6 <HAL_TIM_ConfigClockSource+0x1c2>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	d87f      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004dd0:	2b70      	cmp	r3, #112	@ 0x70
 8004dd2:	d01a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0xf6>
 8004dd4:	2b70      	cmp	r3, #112	@ 0x70
 8004dd6:	d87b      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004dd8:	2b60      	cmp	r3, #96	@ 0x60
 8004dda:	d050      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x16a>
 8004ddc:	2b60      	cmp	r3, #96	@ 0x60
 8004dde:	d877      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004de0:	2b50      	cmp	r3, #80	@ 0x50
 8004de2:	d03c      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x14a>
 8004de4:	2b50      	cmp	r3, #80	@ 0x50
 8004de6:	d873      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004de8:	2b40      	cmp	r3, #64	@ 0x40
 8004dea:	d058      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x18a>
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d86f      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004df0:	2b30      	cmp	r3, #48	@ 0x30
 8004df2:	d064      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004df4:	2b30      	cmp	r3, #48	@ 0x30
 8004df6:	d86b      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d060      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d867      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d05a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1aa>
 8004e08:	e062      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1a:	f000 fd57 	bl	80058cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	609a      	str	r2, [r3, #8]
      break;
 8004e36:	e04f      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	f000 fd40 	bl	80058cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e5a:	609a      	str	r2, [r3, #8]
      break;
 8004e5c:	e03c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 fcb0 	bl	80057d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2150      	movs	r1, #80	@ 0x50
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fd0a 	bl	8005890 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e02c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 fccf 	bl	800582e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2160      	movs	r1, #96	@ 0x60
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fcfa 	bl	8005890 <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e01c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 fc90 	bl	80057d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2140      	movs	r1, #64	@ 0x40
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fcea 	bl	8005890 <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e00c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 fce1 	bl	8005890 <TIM_ITRx_SetConfig>
      break;
 8004ece:	e003      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	ffceff88 	.word	0xffceff88
 8004ef8:	00100040 	.word	0x00100040
 8004efc:	00100030 	.word	0x00100030
 8004f00:	00100020 	.word	0x00100020

08004f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d107      	bne.n	8004f68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f66:	e02a      	b.n	8004fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d107      	bne.n	8004f82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2202      	movs	r2, #2
 8004f76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f80:	e01d      	b.n	8004fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d107      	bne.n	8004f9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2204      	movs	r2, #4
 8004f90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f9a:	e010      	b.n	8004fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d107      	bne.n	8004fb6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb4:	e003      	b.n	8004fbe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff ffb4 	bl	8004f2c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d10b      	bne.n	8005002 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d136      	bne.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005000:	e031      	b.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d10b      	bne.n	8005024 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2202      	movs	r2, #2
 8005010:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d125      	bne.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005022:	e020      	b.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d10b      	bne.n	8005046 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2204      	movs	r2, #4
 8005032:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d114      	bne.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005044:	e00f      	b.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d10a      	bne.n	8005066 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2208      	movs	r2, #8
 8005054:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff ff4c 	bl	8004f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	771a      	strb	r2, [r3, #28]
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	429a      	cmp	r2, r3
 8005090:	d103      	bne.n	800509a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	771a      	strb	r2, [r3, #28]
 8005098:	e019      	b.n	80050ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d103      	bne.n	80050ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2202      	movs	r2, #2
 80050a8:	771a      	strb	r2, [r3, #28]
 80050aa:	e010      	b.n	80050ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d103      	bne.n	80050be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2204      	movs	r2, #4
 80050ba:	771a      	strb	r2, [r3, #28]
 80050bc:	e007      	b.n	80050ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d102      	bne.n	80050ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2208      	movs	r2, #8
 80050cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff ff22 	bl	8004f18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	771a      	strb	r2, [r3, #28]
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a43      	ldr	r2, [pc, #268]	@ (8005204 <TIM_Base_SetConfig+0x120>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a40      	ldr	r2, [pc, #256]	@ (8005208 <TIM_Base_SetConfig+0x124>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3f      	ldr	r2, [pc, #252]	@ (800520c <TIM_Base_SetConfig+0x128>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3e      	ldr	r2, [pc, #248]	@ (8005210 <TIM_Base_SetConfig+0x12c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3d      	ldr	r2, [pc, #244]	@ (8005214 <TIM_Base_SetConfig+0x130>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a32      	ldr	r2, [pc, #200]	@ (8005204 <TIM_Base_SetConfig+0x120>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005144:	d01b      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2f      	ldr	r2, [pc, #188]	@ (8005208 <TIM_Base_SetConfig+0x124>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d017      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2e      	ldr	r2, [pc, #184]	@ (800520c <TIM_Base_SetConfig+0x128>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2d      	ldr	r2, [pc, #180]	@ (8005210 <TIM_Base_SetConfig+0x12c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2c      	ldr	r2, [pc, #176]	@ (8005214 <TIM_Base_SetConfig+0x130>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2b      	ldr	r2, [pc, #172]	@ (8005218 <TIM_Base_SetConfig+0x134>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2a      	ldr	r2, [pc, #168]	@ (800521c <TIM_Base_SetConfig+0x138>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a29      	ldr	r2, [pc, #164]	@ (8005220 <TIM_Base_SetConfig+0x13c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <TIM_Base_SetConfig+0x120>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00f      	beq.n	80051d6 <TIM_Base_SetConfig+0xf2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <TIM_Base_SetConfig+0x130>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0xf2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a15      	ldr	r2, [pc, #84]	@ (8005218 <TIM_Base_SetConfig+0x134>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0xf2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a14      	ldr	r2, [pc, #80]	@ (800521c <TIM_Base_SetConfig+0x138>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0xf2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <TIM_Base_SetConfig+0x13c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d103      	bne.n	80051de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40010400 	.word	0x40010400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0201 	bic.w	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4b37      	ldr	r3, [pc, #220]	@ (800532c <TIM_OC1_SetConfig+0x108>)
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 0302 	bic.w	r3, r3, #2
 800526c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a2d      	ldr	r2, [pc, #180]	@ (8005330 <TIM_OC1_SetConfig+0x10c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00f      	beq.n	80052a0 <TIM_OC1_SetConfig+0x7c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a2c      	ldr	r2, [pc, #176]	@ (8005334 <TIM_OC1_SetConfig+0x110>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00b      	beq.n	80052a0 <TIM_OC1_SetConfig+0x7c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a2b      	ldr	r2, [pc, #172]	@ (8005338 <TIM_OC1_SetConfig+0x114>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d007      	beq.n	80052a0 <TIM_OC1_SetConfig+0x7c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a2a      	ldr	r2, [pc, #168]	@ (800533c <TIM_OC1_SetConfig+0x118>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC1_SetConfig+0x7c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a29      	ldr	r2, [pc, #164]	@ (8005340 <TIM_OC1_SetConfig+0x11c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d10c      	bne.n	80052ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0308 	bic.w	r3, r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f023 0304 	bic.w	r3, r3, #4
 80052b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005330 <TIM_OC1_SetConfig+0x10c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00f      	beq.n	80052e2 <TIM_OC1_SetConfig+0xbe>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005334 <TIM_OC1_SetConfig+0x110>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00b      	beq.n	80052e2 <TIM_OC1_SetConfig+0xbe>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <TIM_OC1_SetConfig+0x114>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <TIM_OC1_SetConfig+0xbe>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a19      	ldr	r2, [pc, #100]	@ (800533c <TIM_OC1_SetConfig+0x118>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC1_SetConfig+0xbe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <TIM_OC1_SetConfig+0x11c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	fffeff8f 	.word	0xfffeff8f
 8005330:	40010000 	.word	0x40010000
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0210 	bic.w	r2, r3, #16
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4b34      	ldr	r3, [pc, #208]	@ (8005440 <TIM_OC2_SetConfig+0xfc>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0320 	bic.w	r3, r3, #32
 800538e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <TIM_OC2_SetConfig+0x100>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC2_SetConfig+0x68>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a28      	ldr	r2, [pc, #160]	@ (8005448 <TIM_OC2_SetConfig+0x104>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d10d      	bne.n	80053c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005444 <TIM_OC2_SetConfig+0x100>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d00f      	beq.n	80053f0 <TIM_OC2_SetConfig+0xac>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005448 <TIM_OC2_SetConfig+0x104>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_OC2_SetConfig+0xac>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <TIM_OC2_SetConfig+0x108>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_OC2_SetConfig+0xac>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <TIM_OC2_SetConfig+0x10c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC2_SetConfig+0xac>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005454 <TIM_OC2_SetConfig+0x110>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d113      	bne.n	8005418 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	feff8fff 	.word	0xfeff8fff
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4b33      	ldr	r3, [pc, #204]	@ (8005550 <TIM_OC3_SetConfig+0xf8>)
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a28      	ldr	r2, [pc, #160]	@ (8005554 <TIM_OC3_SetConfig+0xfc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_OC3_SetConfig+0x66>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a27      	ldr	r2, [pc, #156]	@ (8005558 <TIM_OC3_SetConfig+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10d      	bne.n	80054da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <TIM_OC3_SetConfig+0xfc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <TIM_OC3_SetConfig+0xaa>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <TIM_OC3_SetConfig+0x100>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_OC3_SetConfig+0xaa>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <TIM_OC3_SetConfig+0x104>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <TIM_OC3_SetConfig+0xaa>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005560 <TIM_OC3_SetConfig+0x108>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_OC3_SetConfig+0xaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <TIM_OC3_SetConfig+0x10c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d113      	bne.n	800552a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	621a      	str	r2, [r3, #32]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	fffeff8f 	.word	0xfffeff8f
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4b24      	ldr	r3, [pc, #144]	@ (8005624 <TIM_OC4_SetConfig+0xbc>)
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	031b      	lsls	r3, r3, #12
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a19      	ldr	r2, [pc, #100]	@ (8005628 <TIM_OC4_SetConfig+0xc0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00f      	beq.n	80055e8 <TIM_OC4_SetConfig+0x80>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a18      	ldr	r2, [pc, #96]	@ (800562c <TIM_OC4_SetConfig+0xc4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <TIM_OC4_SetConfig+0x80>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a17      	ldr	r2, [pc, #92]	@ (8005630 <TIM_OC4_SetConfig+0xc8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d007      	beq.n	80055e8 <TIM_OC4_SetConfig+0x80>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <TIM_OC4_SetConfig+0xcc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC4_SetConfig+0x80>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a15      	ldr	r2, [pc, #84]	@ (8005638 <TIM_OC4_SetConfig+0xd0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d109      	bne.n	80055fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	019b      	lsls	r3, r3, #6
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	feff8fff 	.word	0xfeff8fff
 8005628:	40010000 	.word	0x40010000
 800562c:	40010400 	.word	0x40010400
 8005630:	40014000 	.word	0x40014000
 8005634:	40014400 	.word	0x40014400
 8005638:	40014800 	.word	0x40014800

0800563c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4b21      	ldr	r3, [pc, #132]	@ (80056ec <TIM_OC5_SetConfig+0xb0>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800567c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <TIM_OC5_SetConfig+0xb4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00f      	beq.n	80056b2 <TIM_OC5_SetConfig+0x76>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <TIM_OC5_SetConfig+0xb8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <TIM_OC5_SetConfig+0x76>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a16      	ldr	r2, [pc, #88]	@ (80056f8 <TIM_OC5_SetConfig+0xbc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <TIM_OC5_SetConfig+0x76>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <TIM_OC5_SetConfig+0xc0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC5_SetConfig+0x76>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a14      	ldr	r2, [pc, #80]	@ (8005700 <TIM_OC5_SetConfig+0xc4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d109      	bne.n	80056c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	fffeff8f 	.word	0xfffeff8f
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800

08005704 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4b22      	ldr	r3, [pc, #136]	@ (80057b8 <TIM_OC6_SetConfig+0xb4>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	051b      	lsls	r3, r3, #20
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a19      	ldr	r2, [pc, #100]	@ (80057bc <TIM_OC6_SetConfig+0xb8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_OC6_SetConfig+0x78>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a18      	ldr	r2, [pc, #96]	@ (80057c0 <TIM_OC6_SetConfig+0xbc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_OC6_SetConfig+0x78>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a17      	ldr	r2, [pc, #92]	@ (80057c4 <TIM_OC6_SetConfig+0xc0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_OC6_SetConfig+0x78>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a16      	ldr	r2, [pc, #88]	@ (80057c8 <TIM_OC6_SetConfig+0xc4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_OC6_SetConfig+0x78>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <TIM_OC6_SetConfig+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d109      	bne.n	8005790 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	feff8fff 	.word	0xfeff8fff
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40010400 	.word	0x40010400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800

080057d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f023 0201 	bic.w	r2, r3, #1
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 030a 	bic.w	r3, r3, #10
 800580c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582e:	b480      	push	{r7}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 0210 	bic.w	r2, r3, #16
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	031b      	lsls	r3, r3, #12
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800586a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4b09      	ldr	r3, [pc, #36]	@ (80058c8 <TIM_ITRx_SetConfig+0x38>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f043 0307 	orr.w	r3, r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	609a      	str	r2, [r3, #8]
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	ffcfff8f 	.word	0xffcfff8f

080058cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	021a      	lsls	r2, r3, #8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2201      	movs	r2, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	43db      	mvns	r3, r3
 800592e:	401a      	ands	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800596c:	2302      	movs	r3, #2
 800596e:	e06d      	b.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a30      	ldr	r2, [pc, #192]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a20      	ldr	r2, [pc, #128]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d022      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e2:	d01d      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d018      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a15      	ldr	r2, [pc, #84]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a16      	ldr	r2, [pc, #88]	@ (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a15      	ldr	r2, [pc, #84]	@ (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10c      	bne.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40014000 	.word	0x40014000

08005a74 <memset>:
 8005a74:	4402      	add	r2, r0
 8005a76:	4603      	mov	r3, r0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d100      	bne.n	8005a7e <memset+0xa>
 8005a7c:	4770      	bx	lr
 8005a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a82:	e7f9      	b.n	8005a78 <memset+0x4>

08005a84 <__libc_init_array>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4d0d      	ldr	r5, [pc, #52]	@ (8005abc <__libc_init_array+0x38>)
 8005a88:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac0 <__libc_init_array+0x3c>)
 8005a8a:	1b64      	subs	r4, r4, r5
 8005a8c:	10a4      	asrs	r4, r4, #2
 8005a8e:	2600      	movs	r6, #0
 8005a90:	42a6      	cmp	r6, r4
 8005a92:	d109      	bne.n	8005aa8 <__libc_init_array+0x24>
 8005a94:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac4 <__libc_init_array+0x40>)
 8005a96:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac8 <__libc_init_array+0x44>)
 8005a98:	f000 f818 	bl	8005acc <_init>
 8005a9c:	1b64      	subs	r4, r4, r5
 8005a9e:	10a4      	asrs	r4, r4, #2
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	42a6      	cmp	r6, r4
 8005aa4:	d105      	bne.n	8005ab2 <__libc_init_array+0x2e>
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aac:	4798      	blx	r3
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7ee      	b.n	8005a90 <__libc_init_array+0xc>
 8005ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab6:	4798      	blx	r3
 8005ab8:	3601      	adds	r6, #1
 8005aba:	e7f2      	b.n	8005aa2 <__libc_init_array+0x1e>
 8005abc:	08005b00 	.word	0x08005b00
 8005ac0:	08005b00 	.word	0x08005b00
 8005ac4:	08005b00 	.word	0x08005b00
 8005ac8:	08005b04 	.word	0x08005b04

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
