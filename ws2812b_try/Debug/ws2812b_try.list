
ws2812b_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d8  08006168  08006168  00007168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007a44  08007a44  00008a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  24000000  08007a48  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005b8  2400006c  08007ab4  0000906c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000624  08007ab4  00009624  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000109c0  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002531  00000000  00000000  00019a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc8  00000000  00000000  0001bf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a8f  00000000  00000000  0001cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037ffc  00000000  00000000  0001d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001368f  00000000  00000000  000557e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001652cb  00000000  00000000  00068e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ce13d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003c2c  00000000  00000000  001ce180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001d1dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006150 	.word	0x08006150

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08006150 	.word	0x08006150

080002d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <MX_DMA_Init+0x3c>)
 80002f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fe5a 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000306:	200b      	movs	r0, #11
 8000308:	f000 fe71 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	58024400 	.word	0x58024400

08000318 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b08a      	sub	sp, #40	@ 0x28
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b34      	ldr	r3, [pc, #208]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000334:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033e:	4b30      	ldr	r3, [pc, #192]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	613b      	str	r3, [r7, #16]
 800034a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034c:	4b2c      	ldr	r3, [pc, #176]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800034e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000352:	4a2b      	ldr	r2, [pc, #172]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800035c:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800035e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800036c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000370:	4a23      	ldr	r2, [pc, #140]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000380:	f003 0302 	and.w	r3, r3, #2
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000388:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800038a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800038e:	4a1c      	ldr	r2, [pc, #112]	@ (8000400 <MX_GPIO_Init+0xe8>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_GPIO_Init+0xe8>)
 800039a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f244 0101 	movw	r1, #16385	@ 0x4001
 80003ac:	4815      	ldr	r0, [pc, #84]	@ (8000404 <MX_GPIO_Init+0xec>)
 80003ae:	f003 f925 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	4814      	ldr	r0, [pc, #80]	@ (8000408 <MX_GPIO_Init+0xf0>)
 80003b8:	f003 f920 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80003bc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80003c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	@ (8000404 <MX_GPIO_Init+0xec>)
 80003d6:	f002 ff61 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003da:	2302      	movs	r3, #2
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003de:	2301      	movs	r3, #1
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	4619      	mov	r1, r3
 80003f0:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_GPIO_Init+0xf0>)
 80003f2:	f002 ff53 	bl	800329c <HAL_GPIO_Init>

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	@ 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	58024400 	.word	0x58024400
 8000404:	58020400 	.word	0x58020400
 8000408:	58021000 	.word	0x58021000
 800040c:	00000000 	.word	0x00000000

08000410 <gammaCorrect>:
#include "tim.h"
#include "gpio.h"
#include <math.h>  // For pow() function

/* Gamma correction function */
uint8_t gammaCorrect(uint8_t value) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
    float gamma = 2.2;  // Standard gamma value
 800041a:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <gammaCorrect+0x60>)
 800041c:	60fb      	str	r3, [r7, #12]
    return (uint8_t)(pow((float)value / 255.0, gamma) * 255.0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	ee07 3a90 	vmov	s15, r3
 8000424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800042c:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8000468 <gammaCorrect+0x58>
 8000430:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000434:	edd7 7a03 	vldr	s15, [r7, #12]
 8000438:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800043c:	eeb0 1b47 	vmov.f64	d1, d7
 8000440:	eeb0 0b46 	vmov.f64	d0, d6
 8000444:	f005 fbc0 	bl	8005bc8 <pow>
 8000448:	eeb0 7b40 	vmov.f64	d7, d0
 800044c:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8000468 <gammaCorrect+0x58>
 8000450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000454:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000458:	edc7 7a00 	vstr	s15, [r7]
 800045c:	783b      	ldrb	r3, [r7, #0]
 800045e:	b2db      	uxtb	r3, r3
}
 8000460:	4618      	mov	r0, r3
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	00000000 	.word	0x00000000
 800046c:	406fe000 	.word	0x406fe000
 8000470:	400ccccd 	.word	0x400ccccd

08000474 <WS2812_SetColor>:
  * @param  led: LED index (0-15)
  * @param  green: Green intensity (0-255)
  * @param  red: Red intensity (0-255)
  * @param  blue: Blue intensity (0-255)
  */
void WS2812_SetColor(uint8_t led, uint8_t green, uint8_t red, uint8_t blue) {
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	4604      	mov	r4, r0
 800047c:	4608      	mov	r0, r1
 800047e:	4611      	mov	r1, r2
 8000480:	461a      	mov	r2, r3
 8000482:	4623      	mov	r3, r4
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	4603      	mov	r3, r0
 8000488:	71bb      	strb	r3, [r7, #6]
 800048a:	460b      	mov	r3, r1
 800048c:	717b      	strb	r3, [r7, #5]
 800048e:	4613      	mov	r3, r2
 8000490:	713b      	strb	r3, [r7, #4]
    if (led >= NUM_LEDS) return;  // Check if the LED index is valid
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d824      	bhi.n	80004e2 <WS2812_SetColor+0x6e>

    uint32_t ledOffset = led * 3;
 8000498:	79fa      	ldrb	r2, [r7, #7]
 800049a:	4613      	mov	r3, r2
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4413      	add	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]

    // Apply gamma correction to each color component
    LED_Data[ledOffset] = gammaCorrect(green);  // Corrected Green
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffb3 	bl	8000410 <gammaCorrect>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4619      	mov	r1, r3
 80004ae:	4a0f      	ldr	r2, [pc, #60]	@ (80004ec <WS2812_SetColor+0x78>)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	460a      	mov	r2, r1
 80004b6:	701a      	strb	r2, [r3, #0]
    LED_Data[ledOffset + 1] = gammaCorrect(red);  // Corrected Red
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	1c5c      	adds	r4, r3, #1
 80004bc:	797b      	ldrb	r3, [r7, #5]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ffa6 	bl	8000410 <gammaCorrect>
 80004c4:	4603      	mov	r3, r0
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <WS2812_SetColor+0x78>)
 80004ca:	551a      	strb	r2, [r3, r4]
    LED_Data[ledOffset + 2] = gammaCorrect(blue);  // Corrected Blue
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	1c9c      	adds	r4, r3, #2
 80004d0:	793b      	ldrb	r3, [r7, #4]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff9c 	bl	8000410 <gammaCorrect>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b03      	ldr	r3, [pc, #12]	@ (80004ec <WS2812_SetColor+0x78>)
 80004de:	551a      	strb	r2, [r3, r4]
 80004e0:	e000      	b.n	80004e4 <WS2812_SetColor+0x70>
    if (led >= NUM_LEDS) return;  // Check if the LED index is valid
 80004e2:	bf00      	nop
}
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	bf00      	nop
 80004ec:	240003ec 	.word	0x240003ec

080004f0 <WS2812_Refresh>:

/**
  * @brief  Prepare and send LED data via DMA
  */
void WS2812_Refresh(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
    uint16_t pos = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	82fb      	strh	r3, [r7, #22]

    // Convert LED_Data to PWM signal
    for (int led = 0; led < NUM_LEDS; led++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	e02f      	b.n	8000560 <WS2812_Refresh+0x70>
        for (int color = 0; color < 3; color++) {
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	e026      	b.n	8000554 <WS2812_Refresh+0x64>
            uint8_t byte = LED_Data[led * 3 + color];
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	4613      	mov	r3, r2
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	441a      	add	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4413      	add	r3, r2
 8000512:	4a23      	ldr	r2, [pc, #140]	@ (80005a0 <WS2812_Refresh+0xb0>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	70fb      	strb	r3, [r7, #3]

            // Send each bit (MSB first)
            for (int bit = 7; bit >= 0; bit--) {
 8000518:	2307      	movs	r3, #7
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	e014      	b.n	8000548 <WS2812_Refresh+0x58>
                LEDBuffer[pos++] = (byte & (1 << bit)) ? 56 : 28;
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	fa42 f303 	asr.w	r3, r2, r3
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <WS2812_Refresh+0x42>
 800052e:	2138      	movs	r1, #56	@ 0x38
 8000530:	e000      	b.n	8000534 <WS2812_Refresh+0x44>
 8000532:	211c      	movs	r1, #28
 8000534:	8afb      	ldrh	r3, [r7, #22]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	82fa      	strh	r2, [r7, #22]
 800053a:	461a      	mov	r2, r3
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <WS2812_Refresh+0xb4>)
 800053e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for (int bit = 7; bit >= 0; bit--) {
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	3b01      	subs	r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dae7      	bge.n	800051e <WS2812_Refresh+0x2e>
        for (int color = 0; color < 3; color++) {
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3301      	adds	r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b02      	cmp	r3, #2
 8000558:	ddd5      	ble.n	8000506 <WS2812_Refresh+0x16>
    for (int led = 0; led < NUM_LEDS; led++) {
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	2b0f      	cmp	r3, #15
 8000564:	ddcc      	ble.n	8000500 <WS2812_Refresh+0x10>
            }
        }
    }

    // Add reset pulse (all zeros)
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 8000566:	8afb      	ldrh	r3, [r7, #22]
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e00a      	b.n	8000582 <WS2812_Refresh+0x92>
        LEDBuffer[pos++] = 0;
 800056c:	8afb      	ldrh	r3, [r7, #22]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	82fa      	strh	r2, [r7, #22]
 8000572:	461a      	mov	r2, r3
 8000574:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <WS2812_Refresh+0xb4>)
 8000576:	2100      	movs	r1, #0
 8000578:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = pos; i < LED_BUFFER_SIZE; i++) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f5b3 7fd9 	cmp.w	r3, #434	@ 0x1b2
 8000588:	dbf0      	blt.n	800056c <WS2812_Refresh+0x7c>
    }

    // Start DMA transfer
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t*)LEDBuffer, LED_BUFFER_SIZE);
 800058a:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <WS2812_Refresh+0xb4>)
 8000590:	2104      	movs	r1, #4
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <WS2812_Refresh+0xb8>)
 8000594:	f004 f8c8 	bl	8004728 <HAL_TIM_PWM_Start_DMA>
}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	240003ec 	.word	0x240003ec
 80005a4:	24000088 	.word	0x24000088
 80005a8:	2400041c 	.word	0x2400041c

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 80005b2:	f000 fb65 	bl	8000c80 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80005b6:	f000 f833 	bl	8000620 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005ba:	f7ff fead 	bl	8000318 <MX_GPIO_Init>
    MX_DMA_Init();
 80005be:	f7ff fe8b 	bl	80002d8 <MX_DMA_Init>
    MX_TIM3_Init();
 80005c2:	f000 f997 	bl	80008f4 <MX_TIM3_Init>

    /* Initialize USER push-button */
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fac3 	bl	8000b54 <BSP_PB_Init>

    /* Initialize COM1 port */
    COM_InitTypeDef BspCOMInit;
    BspCOMInit.BaudRate   = 115200;
 80005ce:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80005d2:	607b      	str	r3, [r7, #4]
    BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
    BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005d8:	2300      	movs	r3, #0
 80005da:	81bb      	strh	r3, [r7, #12]
    BspCOMInit.Parity     = COM_PARITY_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	81fb      	strh	r3, [r7, #14]
    BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	823b      	strh	r3, [r7, #16]

    /* Demonstrate LED Control */
    // Clear all LEDs
    for (int i = 0; i < NUM_LEDS; i++) {
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	e009      	b.n	80005fe <main+0x52>
        WS2812_SetColor(i, 0, 0, 0);
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	b2d8      	uxtb	r0, r3
 80005ee:	2300      	movs	r3, #0
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	f7ff ff3e 	bl	8000474 <WS2812_SetColor>
    for (int i = 0; i < NUM_LEDS; i++) {
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	3301      	adds	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	ddf2      	ble.n	80005ea <main+0x3e>
    }

    // Set first LED to color with gamma correction
    WS2812_SetColor(0, 0xAA, 0xFF, 0x1D);  // GRB order
 8000604:	231d      	movs	r3, #29
 8000606:	22ff      	movs	r2, #255	@ 0xff
 8000608:	21aa      	movs	r1, #170	@ 0xaa
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff32 	bl	8000474 <WS2812_SetColor>
    WS2812_Refresh();
 8000610:	f7ff ff6e 	bl	80004f0 <WS2812_Refresh>

    /* Infinite loop */
    while (1)
    {
        HAL_Delay(1000);  // 1-second delay
 8000614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000618:	f000 fbc4 	bl	8000da4 <HAL_Delay>
 800061c:	e7fa      	b.n	8000614 <main+0x68>
	...

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fa64 	bl	8005afc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2220      	movs	r2, #32
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fa5e 	bl	8005afc <memset>

    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000640:	2002      	movs	r0, #2
 8000642:	f002 fff5 	bl	8003630 <HAL_PWREx_ConfigSupply>
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xcc>)
 800064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800064e:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <SystemClock_Config+0xcc>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000656:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <SystemClock_Config+0xcc>)
 8000658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5e>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000690:	2301      	movs	r3, #1
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 ffff 	bl	80036a4 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x90>
    {
        Error_Handler();
 80006ac:	f000 f822 	bl	80006f4 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	233f      	movs	r3, #63	@ 0x3f
 80006b2:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                                |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2101      	movs	r1, #1
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fc3f 	bl	8003f58 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 80006e0:	f000 f808 	bl	80006f4 <Error_Handler>
    }
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	@ 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58000400 	.word	0x58000400
 80006f0:	58024800 	.word	0x58024800

080006f4 <Error_Handler>:

/**
  * @brief Error handler
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
    // Infinite loop
    while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <Error_Handler+0x4>

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_MspInit+0x30>)
 8000704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000708:	4a08      	ldr	r2, [pc, #32]	@ (800072c <HAL_MspInit+0x30>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_MspInit+0x30>)
 8000714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	58024400 	.word	0x58024400

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 faed 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000794:	4802      	ldr	r0, [pc, #8]	@ (80007a0 <DMA1_Stream0_IRQHandler+0x10>)
 8000796:	f001 fa0b 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	24000468 	.word	0x24000468

080007a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fa45 	bl	8000c38 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b8:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <SystemInit+0xe4>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007be:	4a36      	ldr	r2, [pc, #216]	@ (8000898 <SystemInit+0xe4>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007c8:	4b34      	ldr	r3, [pc, #208]	@ (800089c <SystemInit+0xe8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 030f 	and.w	r3, r3, #15
 80007d0:	2b06      	cmp	r3, #6
 80007d2:	d807      	bhi.n	80007e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007d4:	4b31      	ldr	r3, [pc, #196]	@ (800089c <SystemInit+0xe8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f023 030f 	bic.w	r3, r3, #15
 80007dc:	4a2f      	ldr	r2, [pc, #188]	@ (800089c <SystemInit+0xe8>)
 80007de:	f043 0307 	orr.w	r3, r3, #7
 80007e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007e4:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <SystemInit+0xec>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a2d      	ldr	r2, [pc, #180]	@ (80008a0 <SystemInit+0xec>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <SystemInit+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <SystemInit+0xec>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4929      	ldr	r1, [pc, #164]	@ (80008a0 <SystemInit+0xec>)
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <SystemInit+0xf0>)
 80007fe:	4013      	ands	r3, r2
 8000800:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000802:	4b26      	ldr	r3, [pc, #152]	@ (800089c <SystemInit+0xe8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	2b00      	cmp	r3, #0
 800080c:	d007      	beq.n	800081e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800080e:	4b23      	ldr	r3, [pc, #140]	@ (800089c <SystemInit+0xe8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f023 030f 	bic.w	r3, r3, #15
 8000816:	4a21      	ldr	r2, [pc, #132]	@ (800089c <SystemInit+0xe8>)
 8000818:	f043 0307 	orr.w	r3, r3, #7
 800081c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <SystemInit+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <SystemInit+0xec>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <SystemInit+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <SystemInit+0xec>)
 8000832:	4a1d      	ldr	r2, [pc, #116]	@ (80008a8 <SystemInit+0xf4>)
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000836:	4b1a      	ldr	r3, [pc, #104]	@ (80008a0 <SystemInit+0xec>)
 8000838:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <SystemInit+0xf8>)
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <SystemInit+0xec>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <SystemInit+0xfc>)
 8000840:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <SystemInit+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <SystemInit+0xec>)
 800084a:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <SystemInit+0xfc>)
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <SystemInit+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <SystemInit+0xec>)
 8000856:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <SystemInit+0xfc>)
 8000858:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <SystemInit+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <SystemInit+0xec>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <SystemInit+0xec>)
 8000866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800086a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <SystemInit+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <SystemInit+0x100>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <SystemInit+0x104>)
 8000878:	4013      	ands	r3, r2
 800087a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800087e:	d202      	bcs.n	8000886 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <SystemInit+0x108>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <SystemInit+0x10c>)
 8000888:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800088c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	52002000 	.word	0x52002000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a8:	02020200 	.word	0x02020200
 80008ac:	01ff0000 	.word	0x01ff0000
 80008b0:	01010280 	.word	0x01010280
 80008b4:	5c001000 	.word	0x5c001000
 80008b8:	ffff0000 	.word	0xffff0000
 80008bc:	51008108 	.word	0x51008108
 80008c0:	52004000 	.word	0x52004000

080008c4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <ExitRun0Mode+0x2c>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <ExitRun0Mode+0x2c>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80008d4:	bf00      	nop
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <ExitRun0Mode+0x2c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	58024800 	.word	0x58024800

080008f4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	@ 0x38
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000928:	4a2c      	ldr	r2, [pc, #176]	@ (80009dc <MX_TIM3_Init+0xe8>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092c:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 800093a:	224f      	movs	r2, #79	@ 0x4f
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	4823      	ldr	r0, [pc, #140]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 800094c:	f003 fe34 	bl	80045b8 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000956:	f7ff fecd 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000964:	4619      	mov	r1, r3
 8000966:	481c      	ldr	r0, [pc, #112]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000968:	f004 fa18 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000972:	f7ff febf 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000978:	f003 fe75 	bl	8004666 <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000982:	f7ff feb7 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 8000996:	f005 f823 	bl	80059e0 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009a0:	f7ff fea8 	bl	80006f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	@ 0x60
 80009a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	2204      	movs	r2, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 80009bc:	f004 f8da 	bl	8004b74 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009c6:	f7ff fe95 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009ca:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <MX_TIM3_Init+0xe4>)
 80009cc:	f000 f85c 	bl	8000a88 <HAL_TIM_MspPostInit>

}
 80009d0:	bf00      	nop
 80009d2:	3738      	adds	r7, #56	@ 0x38
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2400041c 	.word	0x2400041c
 80009dc:	40000400 	.word	0x40000400

080009e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a22      	ldr	r2, [pc, #136]	@ (8000a78 <HAL_TIM_Base_MspInit+0x98>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d13d      	bne.n	8000a6e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009f2:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <HAL_TIM_Base_MspInit+0x9c>)
 80009f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009f8:	4a20      	ldr	r2, [pc, #128]	@ (8000a7c <HAL_TIM_Base_MspInit+0x9c>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <HAL_TIM_Base_MspInit+0x9c>)
 8000a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream0;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <HAL_TIM_Base_MspInit+0xa4>)
 8000a14:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a18:	2218      	movs	r2, #24
 8000a1a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a1e:	2240      	movs	r2, #64	@ 0x40
 8000a20:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a2e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a36:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a3e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000a52:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a54:	f000 fae6 	bl	8001024 <HAL_DMA_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000a5e:	f7ff fe49 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a68:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <HAL_TIM_Base_MspInit+0xa0>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	58024400 	.word	0x58024400
 8000a80:	24000468 	.word	0x24000468
 8000a84:	40020010 	.word	0x40020010

08000a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <HAL_TIM_MspPostInit+0x68>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d11e      	bne.n	8000ae8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_TIM_MspPostInit+0x6c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <HAL_TIM_MspPostInit+0x6c>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_TIM_MspPostInit+0x6c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ac8:	2320      	movs	r3, #32
 8000aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <HAL_TIM_MspPostInit+0x70>)
 8000ae4:	f002 fbda 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40000400 	.word	0x40000400
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020400 	.word	0x58020400

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000b38 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b00:	f7ff fee0 	bl	80008c4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b04:	f7ff fe56 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f004 fff3 	bl	8005b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fd3b 	bl	80005ac <main>
  bx  lr
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b40:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000b44:	08007a48 	.word	0x08007a48
  ldr r2, =_sbss
 8000b48:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000b4c:	24000624 	.word	0x24000624

08000b50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC3_IRQHandler>
	...

08000b54 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000b64:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <BSP_PB_Init+0xcc>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c20 <BSP_PB_Init+0xcc>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b74:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <BSP_PB_Init+0xcc>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10c      	bne.n	8000bb0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <BSP_PB_Init+0xd0>)
 8000b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fb77 	bl	800329c <HAL_GPIO_Init>
 8000bae:	e031      	b.n	8000c14 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000bb0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c24 <BSP_PB_Init+0xd0>)
 8000bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbe:	f107 020c 	add.w	r2, r7, #12
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fb69 	bl	800329c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <BSP_PB_Init+0xd4>)
 8000bd0:	441a      	add	r2, r3
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4915      	ldr	r1, [pc, #84]	@ (8000c2c <BSP_PB_Init+0xd8>)
 8000bd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4610      	mov	r0, r2
 8000bde:	f002 fb18 	bl	8003212 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <BSP_PB_Init+0xd4>)
 8000be8:	1898      	adds	r0, r3, r2
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a10      	ldr	r2, [pc, #64]	@ (8000c30 <BSP_PB_Init+0xdc>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f002 faed 	bl	80031d4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <BSP_PB_Init+0xe0>)
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	2200      	movs	r2, #0
 8000c06:	4619      	mov	r1, r3
 8000c08:	f000 f9d7 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000c0c:	2328      	movs	r3, #40	@ 0x28
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f9ed 	bl	8000fee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	58024400 	.word	0x58024400
 8000c24:	24000008 	.word	0x24000008
 8000c28:	240004e0 	.word	0x240004e0
 8000c2c:	08006178 	.word	0x08006178
 8000c30:	2400000c 	.word	0x2400000c
 8000c34:	24000010 	.word	0x24000010

08000c38 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <BSP_PB_IRQHandler+0x20>)
 8000c48:	4413      	add	r3, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 faf6 	bl	800323c <HAL_EXTI_IRQHandler>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	240004e0 	.word	0x240004e0

08000c5c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fff0 	bl	8000c5c <BSP_PB_Callback>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f98c 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c8c:	f003 fb1a 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8000c90:	4602      	mov	r2, r0
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_Init+0x68>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	4913      	ldr	r1, [pc, #76]	@ (8000cec <HAL_Init+0x6c>)
 8000c9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <HAL_Init+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_Init+0x6c>)
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <HAL_Init+0x70>)
 8000cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf4 <HAL_Init+0x74>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f814 	bl	8000cf8 <HAL_InitTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e002      	b.n	8000ce0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cda:	f7ff fd0f 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	08006168 	.word	0x08006168
 8000cf0:	24000004 	.word	0x24000004
 8000cf4:	24000000 	.word	0x24000000

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_InitTick+0x60>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e021      	b.n	8000d50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <HAL_InitTick+0x64>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_InitTick+0x60>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f971 	bl	800100a <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f93b 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <HAL_InitTick+0x68>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24000018 	.word	0x24000018
 8000d5c:	24000000 	.word	0x24000000
 8000d60:	24000014 	.word	0x24000014

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	24000018 	.word	0x24000018
 8000d88:	240004e8 	.word	0x240004e8

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	240004e8 	.word	0x240004e8

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000018 	.word	0x24000018

08000dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetREVID+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0c1b      	lsrs	r3, r3, #16
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	5c001000 	.word	0x5c001000

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	05fa0000 	.word	0x05fa0000

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff40 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff90 	bl	8000ef8 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5f 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff33 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa4 	bl	8000f60 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff feae 	bl	8000d8c <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e316      	b.n	800166a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a66      	ldr	r2, [pc, #408]	@ (80011dc <HAL_DMA_Init+0x1b8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d04a      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a65      	ldr	r2, [pc, #404]	@ (80011e0 <HAL_DMA_Init+0x1bc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d045      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a63      	ldr	r2, [pc, #396]	@ (80011e4 <HAL_DMA_Init+0x1c0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d040      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a62      	ldr	r2, [pc, #392]	@ (80011e8 <HAL_DMA_Init+0x1c4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d03b      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a60      	ldr	r2, [pc, #384]	@ (80011ec <HAL_DMA_Init+0x1c8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d036      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a5f      	ldr	r2, [pc, #380]	@ (80011f0 <HAL_DMA_Init+0x1cc>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d031      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a5d      	ldr	r2, [pc, #372]	@ (80011f4 <HAL_DMA_Init+0x1d0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02c      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a5c      	ldr	r2, [pc, #368]	@ (80011f8 <HAL_DMA_Init+0x1d4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d027      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a5a      	ldr	r2, [pc, #360]	@ (80011fc <HAL_DMA_Init+0x1d8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d022      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a59      	ldr	r2, [pc, #356]	@ (8001200 <HAL_DMA_Init+0x1dc>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01d      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a57      	ldr	r2, [pc, #348]	@ (8001204 <HAL_DMA_Init+0x1e0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d018      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a56      	ldr	r2, [pc, #344]	@ (8001208 <HAL_DMA_Init+0x1e4>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a54      	ldr	r2, [pc, #336]	@ (800120c <HAL_DMA_Init+0x1e8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00e      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a53      	ldr	r2, [pc, #332]	@ (8001210 <HAL_DMA_Init+0x1ec>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d009      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a51      	ldr	r2, [pc, #324]	@ (8001214 <HAL_DMA_Init+0x1f0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d004      	beq.n	80010dc <HAL_DMA_Init+0xb8>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a50      	ldr	r2, [pc, #320]	@ (8001218 <HAL_DMA_Init+0x1f4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Init+0xbc>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_DMA_Init+0xbe>
 80010e0:	2300      	movs	r3, #0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 813b 	beq.w	800135e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a37      	ldr	r2, [pc, #220]	@ (80011dc <HAL_DMA_Init+0x1b8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d04a      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a36      	ldr	r2, [pc, #216]	@ (80011e0 <HAL_DMA_Init+0x1bc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d045      	beq.n	8001198 <HAL_DMA_Init+0x174>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a34      	ldr	r2, [pc, #208]	@ (80011e4 <HAL_DMA_Init+0x1c0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d040      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a33      	ldr	r2, [pc, #204]	@ (80011e8 <HAL_DMA_Init+0x1c4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d03b      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a31      	ldr	r2, [pc, #196]	@ (80011ec <HAL_DMA_Init+0x1c8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d036      	beq.n	8001198 <HAL_DMA_Init+0x174>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a30      	ldr	r2, [pc, #192]	@ (80011f0 <HAL_DMA_Init+0x1cc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d031      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a2e      	ldr	r2, [pc, #184]	@ (80011f4 <HAL_DMA_Init+0x1d0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02c      	beq.n	8001198 <HAL_DMA_Init+0x174>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a2d      	ldr	r2, [pc, #180]	@ (80011f8 <HAL_DMA_Init+0x1d4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d027      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a2b      	ldr	r2, [pc, #172]	@ (80011fc <HAL_DMA_Init+0x1d8>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d022      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a2a      	ldr	r2, [pc, #168]	@ (8001200 <HAL_DMA_Init+0x1dc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d01d      	beq.n	8001198 <HAL_DMA_Init+0x174>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <HAL_DMA_Init+0x1e0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d018      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <HAL_DMA_Init+0x1e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d013      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a25      	ldr	r2, [pc, #148]	@ (800120c <HAL_DMA_Init+0x1e8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00e      	beq.n	8001198 <HAL_DMA_Init+0x174>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a24      	ldr	r2, [pc, #144]	@ (8001210 <HAL_DMA_Init+0x1ec>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d009      	beq.n	8001198 <HAL_DMA_Init+0x174>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <HAL_DMA_Init+0x1f0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d004      	beq.n	8001198 <HAL_DMA_Init+0x174>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <HAL_DMA_Init+0x1f4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d108      	bne.n	80011aa <HAL_DMA_Init+0x186>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e007      	b.n	80011ba <HAL_DMA_Init+0x196>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80011ba:	e02f      	b.n	800121c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011bc:	f7ff fde6 	bl	8000d8c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d928      	bls.n	800121c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e246      	b.n	800166a <HAL_DMA_Init+0x646>
 80011dc:	40020010 	.word	0x40020010
 80011e0:	40020028 	.word	0x40020028
 80011e4:	40020040 	.word	0x40020040
 80011e8:	40020058 	.word	0x40020058
 80011ec:	40020070 	.word	0x40020070
 80011f0:	40020088 	.word	0x40020088
 80011f4:	400200a0 	.word	0x400200a0
 80011f8:	400200b8 	.word	0x400200b8
 80011fc:	40020410 	.word	0x40020410
 8001200:	40020428 	.word	0x40020428
 8001204:	40020440 	.word	0x40020440
 8001208:	40020458 	.word	0x40020458
 800120c:	40020470 	.word	0x40020470
 8001210:	40020488 	.word	0x40020488
 8001214:	400204a0 	.word	0x400204a0
 8001218:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1c8      	bne.n	80011bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4b83      	ldr	r3, [pc, #524]	@ (8001444 <HAL_DMA_Init+0x420>)
 8001236:	4013      	ands	r3, r2
 8001238:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001242:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126c:	2b04      	cmp	r3, #4
 800126e:	d107      	bne.n	8001280 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	4313      	orrs	r3, r2
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001280:	4b71      	ldr	r3, [pc, #452]	@ (8001448 <HAL_DMA_Init+0x424>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b71      	ldr	r3, [pc, #452]	@ (800144c <HAL_DMA_Init+0x428>)
 8001286:	4013      	ands	r3, r2
 8001288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800128c:	d328      	bcc.n	80012e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b28      	cmp	r3, #40	@ 0x28
 8001294:	d903      	bls.n	800129e <HAL_DMA_Init+0x27a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b2e      	cmp	r3, #46	@ 0x2e
 800129c:	d917      	bls.n	80012ce <HAL_DMA_Init+0x2aa>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80012a4:	d903      	bls.n	80012ae <HAL_DMA_Init+0x28a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b42      	cmp	r3, #66	@ 0x42
 80012ac:	d90f      	bls.n	80012ce <HAL_DMA_Init+0x2aa>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b46      	cmp	r3, #70	@ 0x46
 80012b4:	d903      	bls.n	80012be <HAL_DMA_Init+0x29a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b48      	cmp	r3, #72	@ 0x48
 80012bc:	d907      	bls.n	80012ce <HAL_DMA_Init+0x2aa>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b4e      	cmp	r3, #78	@ 0x4e
 80012c4:	d905      	bls.n	80012d2 <HAL_DMA_Init+0x2ae>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b52      	cmp	r3, #82	@ 0x52
 80012cc:	d801      	bhi.n	80012d2 <HAL_DMA_Init+0x2ae>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_DMA_Init+0x2b0>
 80012d2:	2300      	movs	r3, #0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f023 0307 	bic.w	r3, r3, #7
 80012f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4313      	orrs	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	2b04      	cmp	r3, #4
 8001308:	d117      	bne.n	800133a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00e      	beq.n	800133a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f001 fdcf 	bl	8002ec0 <DMA_CheckFifoParam>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2240      	movs	r2, #64	@ 0x40
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e197      	b.n	800166a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f001 fd0a 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 8001348:	4603      	mov	r3, r0
 800134a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	223f      	movs	r2, #63	@ 0x3f
 8001356:	409a      	lsls	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e0cd      	b.n	80014fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a3b      	ldr	r2, [pc, #236]	@ (8001450 <HAL_DMA_Init+0x42c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d022      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a39      	ldr	r2, [pc, #228]	@ (8001454 <HAL_DMA_Init+0x430>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01d      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a38      	ldr	r2, [pc, #224]	@ (8001458 <HAL_DMA_Init+0x434>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d018      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a36      	ldr	r2, [pc, #216]	@ (800145c <HAL_DMA_Init+0x438>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a35      	ldr	r2, [pc, #212]	@ (8001460 <HAL_DMA_Init+0x43c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d00e      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a33      	ldr	r2, [pc, #204]	@ (8001464 <HAL_DMA_Init+0x440>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d009      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a32      	ldr	r2, [pc, #200]	@ (8001468 <HAL_DMA_Init+0x444>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d004      	beq.n	80013ae <HAL_DMA_Init+0x38a>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a30      	ldr	r2, [pc, #192]	@ (800146c <HAL_DMA_Init+0x448>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_Init+0x38e>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_DMA_Init+0x390>
 80013b2:	2300      	movs	r3, #0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8097 	beq.w	80014e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a24      	ldr	r2, [pc, #144]	@ (8001450 <HAL_DMA_Init+0x42c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d021      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_DMA_Init+0x430>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01c      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <HAL_DMA_Init+0x434>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d017      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <HAL_DMA_Init+0x438>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d012      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <HAL_DMA_Init+0x43c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <HAL_DMA_Init+0x440>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d008      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <HAL_DMA_Init+0x444>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_DMA_Init+0x3e4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_DMA_Init+0x448>)
 8001406:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <HAL_DMA_Init+0x44c>)
 8001424:	4013      	ands	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b40      	cmp	r3, #64	@ 0x40
 800142e:	d021      	beq.n	8001474 <HAL_DMA_Init+0x450>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b80      	cmp	r3, #128	@ 0x80
 8001436:	d102      	bne.n	800143e <HAL_DMA_Init+0x41a>
 8001438:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800143c:	e01b      	b.n	8001476 <HAL_DMA_Init+0x452>
 800143e:	2300      	movs	r3, #0
 8001440:	e019      	b.n	8001476 <HAL_DMA_Init+0x452>
 8001442:	bf00      	nop
 8001444:	fe10803f 	.word	0xfe10803f
 8001448:	5c001000 	.word	0x5c001000
 800144c:	ffff0000 	.word	0xffff0000
 8001450:	58025408 	.word	0x58025408
 8001454:	5802541c 	.word	0x5802541c
 8001458:	58025430 	.word	0x58025430
 800145c:	58025444 	.word	0x58025444
 8001460:	58025458 	.word	0x58025458
 8001464:	5802546c 	.word	0x5802546c
 8001468:	58025480 	.word	0x58025480
 800146c:	58025494 	.word	0x58025494
 8001470:	fffe000f 	.word	0xfffe000f
 8001474:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68d2      	ldr	r2, [r2, #12]
 800147a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800147c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800148c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001494:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800149c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80014a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001674 <HAL_DMA_Init+0x650>)
 80014bc:	4413      	add	r3, r2
 80014be:	4a6e      	ldr	r2, [pc, #440]	@ (8001678 <HAL_DMA_Init+0x654>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	009a      	lsls	r2, r3, #2
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f001 fc45 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 80014d2:	4603      	mov	r3, r0
 80014d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2201      	movs	r2, #1
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e008      	b.n	80014fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2240      	movs	r2, #64	@ 0x40
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0b7      	b.n	800166a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5f      	ldr	r2, [pc, #380]	@ (800167c <HAL_DMA_Init+0x658>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d072      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a5d      	ldr	r2, [pc, #372]	@ (8001680 <HAL_DMA_Init+0x65c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d06d      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a5c      	ldr	r2, [pc, #368]	@ (8001684 <HAL_DMA_Init+0x660>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d068      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a5a      	ldr	r2, [pc, #360]	@ (8001688 <HAL_DMA_Init+0x664>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d063      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a59      	ldr	r2, [pc, #356]	@ (800168c <HAL_DMA_Init+0x668>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d05e      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a57      	ldr	r2, [pc, #348]	@ (8001690 <HAL_DMA_Init+0x66c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d059      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a56      	ldr	r2, [pc, #344]	@ (8001694 <HAL_DMA_Init+0x670>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d054      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a54      	ldr	r2, [pc, #336]	@ (8001698 <HAL_DMA_Init+0x674>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d04f      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a53      	ldr	r2, [pc, #332]	@ (800169c <HAL_DMA_Init+0x678>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d04a      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a51      	ldr	r2, [pc, #324]	@ (80016a0 <HAL_DMA_Init+0x67c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d045      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a50      	ldr	r2, [pc, #320]	@ (80016a4 <HAL_DMA_Init+0x680>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d040      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a4e      	ldr	r2, [pc, #312]	@ (80016a8 <HAL_DMA_Init+0x684>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d03b      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a4d      	ldr	r2, [pc, #308]	@ (80016ac <HAL_DMA_Init+0x688>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d036      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <HAL_DMA_Init+0x68c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d031      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_DMA_Init+0x690>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d02c      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a48      	ldr	r2, [pc, #288]	@ (80016b8 <HAL_DMA_Init+0x694>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d027      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a47      	ldr	r2, [pc, #284]	@ (80016bc <HAL_DMA_Init+0x698>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d022      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a45      	ldr	r2, [pc, #276]	@ (80016c0 <HAL_DMA_Init+0x69c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01d      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a44      	ldr	r2, [pc, #272]	@ (80016c4 <HAL_DMA_Init+0x6a0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d018      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a42      	ldr	r2, [pc, #264]	@ (80016c8 <HAL_DMA_Init+0x6a4>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a41      	ldr	r2, [pc, #260]	@ (80016cc <HAL_DMA_Init+0x6a8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00e      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a3f      	ldr	r2, [pc, #252]	@ (80016d0 <HAL_DMA_Init+0x6ac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d009      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a3e      	ldr	r2, [pc, #248]	@ (80016d4 <HAL_DMA_Init+0x6b0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d004      	beq.n	80015ea <HAL_DMA_Init+0x5c6>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a3c      	ldr	r2, [pc, #240]	@ (80016d8 <HAL_DMA_Init+0x6b4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x5ca>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_DMA_Init+0x5cc>
 80015ee:	2300      	movs	r3, #0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d032      	beq.n	800165a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f001 fcdf 	bl	8002fb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b80      	cmp	r3, #128	@ 0x80
 8001600:	d102      	bne.n	8001608 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800161c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d010      	beq.n	8001648 <HAL_DMA_Init+0x624>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d80c      	bhi.n	8001648 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fd5c 	bl	80030ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	e008      	b.n	800165a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	a7fdabf8 	.word	0xa7fdabf8
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	40020010 	.word	0x40020010
 8001680:	40020028 	.word	0x40020028
 8001684:	40020040 	.word	0x40020040
 8001688:	40020058 	.word	0x40020058
 800168c:	40020070 	.word	0x40020070
 8001690:	40020088 	.word	0x40020088
 8001694:	400200a0 	.word	0x400200a0
 8001698:	400200b8 	.word	0x400200b8
 800169c:	40020410 	.word	0x40020410
 80016a0:	40020428 	.word	0x40020428
 80016a4:	40020440 	.word	0x40020440
 80016a8:	40020458 	.word	0x40020458
 80016ac:	40020470 	.word	0x40020470
 80016b0:	40020488 	.word	0x40020488
 80016b4:	400204a0 	.word	0x400204a0
 80016b8:	400204b8 	.word	0x400204b8
 80016bc:	58025408 	.word	0x58025408
 80016c0:	5802541c 	.word	0x5802541c
 80016c4:	58025430 	.word	0x58025430
 80016c8:	58025444 	.word	0x58025444
 80016cc:	58025458 	.word	0x58025458
 80016d0:	5802546c 	.word	0x5802546c
 80016d4:	58025480 	.word	0x58025480
 80016d8:	58025494 	.word	0x58025494

080016dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e226      	b.n	8001b46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_DMA_Start_IT+0x2a>
 8001702:	2302      	movs	r3, #2
 8001704:	e21f      	b.n	8001b46 <HAL_DMA_Start_IT+0x46a>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b01      	cmp	r3, #1
 8001718:	f040 820a 	bne.w	8001b30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a68      	ldr	r2, [pc, #416]	@ (80018d0 <HAL_DMA_Start_IT+0x1f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d04a      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a66      	ldr	r2, [pc, #408]	@ (80018d4 <HAL_DMA_Start_IT+0x1f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d045      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a65      	ldr	r2, [pc, #404]	@ (80018d8 <HAL_DMA_Start_IT+0x1fc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d040      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a63      	ldr	r2, [pc, #396]	@ (80018dc <HAL_DMA_Start_IT+0x200>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d03b      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a62      	ldr	r2, [pc, #392]	@ (80018e0 <HAL_DMA_Start_IT+0x204>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d036      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a60      	ldr	r2, [pc, #384]	@ (80018e4 <HAL_DMA_Start_IT+0x208>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d031      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <HAL_DMA_Start_IT+0x20c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d02c      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a5d      	ldr	r2, [pc, #372]	@ (80018ec <HAL_DMA_Start_IT+0x210>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d027      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a5c      	ldr	r2, [pc, #368]	@ (80018f0 <HAL_DMA_Start_IT+0x214>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d022      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5a      	ldr	r2, [pc, #360]	@ (80018f4 <HAL_DMA_Start_IT+0x218>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01d      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a59      	ldr	r2, [pc, #356]	@ (80018f8 <HAL_DMA_Start_IT+0x21c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d018      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a57      	ldr	r2, [pc, #348]	@ (80018fc <HAL_DMA_Start_IT+0x220>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a56      	ldr	r2, [pc, #344]	@ (8001900 <HAL_DMA_Start_IT+0x224>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a54      	ldr	r2, [pc, #336]	@ (8001904 <HAL_DMA_Start_IT+0x228>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d009      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a53      	ldr	r2, [pc, #332]	@ (8001908 <HAL_DMA_Start_IT+0x22c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d004      	beq.n	80017ca <HAL_DMA_Start_IT+0xee>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a51      	ldr	r2, [pc, #324]	@ (800190c <HAL_DMA_Start_IT+0x230>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d108      	bne.n	80017dc <HAL_DMA_Start_IT+0x100>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e007      	b.n	80017ec <HAL_DMA_Start_IT+0x110>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f001 f906 	bl	8002a04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_DMA_Start_IT+0x1f4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d04a      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a33      	ldr	r2, [pc, #204]	@ (80018d4 <HAL_DMA_Start_IT+0x1f8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d045      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <HAL_DMA_Start_IT+0x1fc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d040      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <HAL_DMA_Start_IT+0x200>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d03b      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2e      	ldr	r2, [pc, #184]	@ (80018e0 <HAL_DMA_Start_IT+0x204>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d036      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <HAL_DMA_Start_IT+0x208>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d031      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_DMA_Start_IT+0x20c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02c      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_DMA_Start_IT+0x210>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d027      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_DMA_Start_IT+0x214>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d022      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <HAL_DMA_Start_IT+0x218>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d01d      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <HAL_DMA_Start_IT+0x21c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d018      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_DMA_Start_IT+0x220>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d013      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <HAL_DMA_Start_IT+0x224>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00e      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	@ (8001904 <HAL_DMA_Start_IT+0x228>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d009      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_DMA_Start_IT+0x22c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d004      	beq.n	8001898 <HAL_DMA_Start_IT+0x1bc>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1e      	ldr	r2, [pc, #120]	@ (800190c <HAL_DMA_Start_IT+0x230>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_DMA_Start_IT+0x1c0>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_DMA_Start_IT+0x1c2>
 800189c:	2300      	movs	r3, #0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d036      	beq.n	8001910 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 021e 	bic.w	r2, r3, #30
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0216 	orr.w	r2, r2, #22
 80018b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03e      	beq.n	800193c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0208 	orr.w	r2, r2, #8
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e035      	b.n	800193c <HAL_DMA_Start_IT+0x260>
 80018d0:	40020010 	.word	0x40020010
 80018d4:	40020028 	.word	0x40020028
 80018d8:	40020040 	.word	0x40020040
 80018dc:	40020058 	.word	0x40020058
 80018e0:	40020070 	.word	0x40020070
 80018e4:	40020088 	.word	0x40020088
 80018e8:	400200a0 	.word	0x400200a0
 80018ec:	400200b8 	.word	0x400200b8
 80018f0:	40020410 	.word	0x40020410
 80018f4:	40020428 	.word	0x40020428
 80018f8:	40020440 	.word	0x40020440
 80018fc:	40020458 	.word	0x40020458
 8001900:	40020470 	.word	0x40020470
 8001904:	40020488 	.word	0x40020488
 8001908:	400204a0 	.word	0x400204a0
 800190c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 020e 	bic.w	r2, r3, #14
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 020a 	orr.w	r2, r2, #10
 8001922:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0204 	orr.w	r2, r2, #4
 800193a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a83      	ldr	r2, [pc, #524]	@ (8001b50 <HAL_DMA_Start_IT+0x474>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d072      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a82      	ldr	r2, [pc, #520]	@ (8001b54 <HAL_DMA_Start_IT+0x478>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d06d      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a80      	ldr	r2, [pc, #512]	@ (8001b58 <HAL_DMA_Start_IT+0x47c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d068      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7f      	ldr	r2, [pc, #508]	@ (8001b5c <HAL_DMA_Start_IT+0x480>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d063      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a7d      	ldr	r2, [pc, #500]	@ (8001b60 <HAL_DMA_Start_IT+0x484>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d05e      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a7c      	ldr	r2, [pc, #496]	@ (8001b64 <HAL_DMA_Start_IT+0x488>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d059      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a7a      	ldr	r2, [pc, #488]	@ (8001b68 <HAL_DMA_Start_IT+0x48c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d054      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a79      	ldr	r2, [pc, #484]	@ (8001b6c <HAL_DMA_Start_IT+0x490>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d04f      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a77      	ldr	r2, [pc, #476]	@ (8001b70 <HAL_DMA_Start_IT+0x494>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d04a      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a76      	ldr	r2, [pc, #472]	@ (8001b74 <HAL_DMA_Start_IT+0x498>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d045      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a74      	ldr	r2, [pc, #464]	@ (8001b78 <HAL_DMA_Start_IT+0x49c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d040      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a73      	ldr	r2, [pc, #460]	@ (8001b7c <HAL_DMA_Start_IT+0x4a0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d03b      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a71      	ldr	r2, [pc, #452]	@ (8001b80 <HAL_DMA_Start_IT+0x4a4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d036      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a70      	ldr	r2, [pc, #448]	@ (8001b84 <HAL_DMA_Start_IT+0x4a8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d031      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001b88 <HAL_DMA_Start_IT+0x4ac>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d02c      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6d      	ldr	r2, [pc, #436]	@ (8001b8c <HAL_DMA_Start_IT+0x4b0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d027      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001b90 <HAL_DMA_Start_IT+0x4b4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d022      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6a      	ldr	r2, [pc, #424]	@ (8001b94 <HAL_DMA_Start_IT+0x4b8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d01d      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a68      	ldr	r2, [pc, #416]	@ (8001b98 <HAL_DMA_Start_IT+0x4bc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d018      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a67      	ldr	r2, [pc, #412]	@ (8001b9c <HAL_DMA_Start_IT+0x4c0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a65      	ldr	r2, [pc, #404]	@ (8001ba0 <HAL_DMA_Start_IT+0x4c4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00e      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a64      	ldr	r2, [pc, #400]	@ (8001ba4 <HAL_DMA_Start_IT+0x4c8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d009      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a62      	ldr	r2, [pc, #392]	@ (8001ba8 <HAL_DMA_Start_IT+0x4cc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d004      	beq.n	8001a2c <HAL_DMA_Start_IT+0x350>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a61      	ldr	r2, [pc, #388]	@ (8001bac <HAL_DMA_Start_IT+0x4d0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_DMA_Start_IT+0x354>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_DMA_Start_IT+0x356>
 8001a30:	2300      	movs	r3, #0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01a      	beq.n	8001a6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d007      	beq.n	8001a54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <HAL_DMA_Start_IT+0x474>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d04a      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a36      	ldr	r2, [pc, #216]	@ (8001b54 <HAL_DMA_Start_IT+0x478>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d045      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a34      	ldr	r2, [pc, #208]	@ (8001b58 <HAL_DMA_Start_IT+0x47c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d040      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a33      	ldr	r2, [pc, #204]	@ (8001b5c <HAL_DMA_Start_IT+0x480>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d03b      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a31      	ldr	r2, [pc, #196]	@ (8001b60 <HAL_DMA_Start_IT+0x484>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d036      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a30      	ldr	r2, [pc, #192]	@ (8001b64 <HAL_DMA_Start_IT+0x488>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d031      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2e      	ldr	r2, [pc, #184]	@ (8001b68 <HAL_DMA_Start_IT+0x48c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02c      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b6c <HAL_DMA_Start_IT+0x490>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d027      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b70 <HAL_DMA_Start_IT+0x494>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d022      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2a      	ldr	r2, [pc, #168]	@ (8001b74 <HAL_DMA_Start_IT+0x498>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d01d      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a28      	ldr	r2, [pc, #160]	@ (8001b78 <HAL_DMA_Start_IT+0x49c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d018      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <HAL_DMA_Start_IT+0x4a0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	@ (8001b80 <HAL_DMA_Start_IT+0x4a4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00e      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a24      	ldr	r2, [pc, #144]	@ (8001b84 <HAL_DMA_Start_IT+0x4a8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	@ (8001b88 <HAL_DMA_Start_IT+0x4ac>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_DMA_Start_IT+0x430>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a21      	ldr	r2, [pc, #132]	@ (8001b8c <HAL_DMA_Start_IT+0x4b0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d108      	bne.n	8001b1e <HAL_DMA_Start_IT+0x442>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	e012      	b.n	8001b44 <HAL_DMA_Start_IT+0x468>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e009      	b.n	8001b44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40020010 	.word	0x40020010
 8001b54:	40020028 	.word	0x40020028
 8001b58:	40020040 	.word	0x40020040
 8001b5c:	40020058 	.word	0x40020058
 8001b60:	40020070 	.word	0x40020070
 8001b64:	40020088 	.word	0x40020088
 8001b68:	400200a0 	.word	0x400200a0
 8001b6c:	400200b8 	.word	0x400200b8
 8001b70:	40020410 	.word	0x40020410
 8001b74:	40020428 	.word	0x40020428
 8001b78:	40020440 	.word	0x40020440
 8001b7c:	40020458 	.word	0x40020458
 8001b80:	40020470 	.word	0x40020470
 8001b84:	40020488 	.word	0x40020488
 8001b88:	400204a0 	.word	0x400204a0
 8001b8c:	400204b8 	.word	0x400204b8
 8001b90:	58025408 	.word	0x58025408
 8001b94:	5802541c 	.word	0x5802541c
 8001b98:	58025430 	.word	0x58025430
 8001b9c:	58025444 	.word	0x58025444
 8001ba0:	58025458 	.word	0x58025458
 8001ba4:	5802546c 	.word	0x5802546c
 8001ba8:	58025480 	.word	0x58025480
 8001bac:	58025494 	.word	0x58025494

08001bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bbc:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <HAL_DMA_IRQHandler+0x1ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a67      	ldr	r2, [pc, #412]	@ (8001d60 <HAL_DMA_IRQHandler+0x1b0>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d64 <HAL_DMA_IRQHandler+0x1b4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d04a      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d68 <HAL_DMA_IRQHandler+0x1b8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d045      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8001d6c <HAL_DMA_IRQHandler+0x1bc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d040      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5a      	ldr	r2, [pc, #360]	@ (8001d70 <HAL_DMA_IRQHandler+0x1c0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d03b      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a59      	ldr	r2, [pc, #356]	@ (8001d74 <HAL_DMA_IRQHandler+0x1c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d036      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a57      	ldr	r2, [pc, #348]	@ (8001d78 <HAL_DMA_IRQHandler+0x1c8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d031      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a56      	ldr	r2, [pc, #344]	@ (8001d7c <HAL_DMA_IRQHandler+0x1cc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d02c      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a54      	ldr	r2, [pc, #336]	@ (8001d80 <HAL_DMA_IRQHandler+0x1d0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d027      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a53      	ldr	r2, [pc, #332]	@ (8001d84 <HAL_DMA_IRQHandler+0x1d4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d022      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a51      	ldr	r2, [pc, #324]	@ (8001d88 <HAL_DMA_IRQHandler+0x1d8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01d      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a50      	ldr	r2, [pc, #320]	@ (8001d8c <HAL_DMA_IRQHandler+0x1dc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d018      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <HAL_DMA_IRQHandler+0x1e0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <HAL_DMA_IRQHandler+0x1e4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00e      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	@ (8001d98 <HAL_DMA_IRQHandler+0x1e8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d009      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4a      	ldr	r2, [pc, #296]	@ (8001d9c <HAL_DMA_IRQHandler+0x1ec>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d004      	beq.n	8001c82 <HAL_DMA_IRQHandler+0xd2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a48      	ldr	r2, [pc, #288]	@ (8001da0 <HAL_DMA_IRQHandler+0x1f0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_DMA_IRQHandler+0xd6>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 842b 	beq.w	80024e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	2208      	movs	r2, #8
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80a2 	beq.w	8001de8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <HAL_DMA_IRQHandler+0x1b4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d04a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <HAL_DMA_IRQHandler+0x1b8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d045      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <HAL_DMA_IRQHandler+0x1bc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d040      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d70 <HAL_DMA_IRQHandler+0x1c0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d03b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a28      	ldr	r2, [pc, #160]	@ (8001d74 <HAL_DMA_IRQHandler+0x1c4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d036      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a27      	ldr	r2, [pc, #156]	@ (8001d78 <HAL_DMA_IRQHandler+0x1c8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d031      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a25      	ldr	r2, [pc, #148]	@ (8001d7c <HAL_DMA_IRQHandler+0x1cc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d02c      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <HAL_DMA_IRQHandler+0x1d0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d027      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a22      	ldr	r2, [pc, #136]	@ (8001d84 <HAL_DMA_IRQHandler+0x1d4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <HAL_DMA_IRQHandler+0x1d8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01d      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d8c <HAL_DMA_IRQHandler+0x1dc>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <HAL_DMA_IRQHandler+0x1e0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <HAL_DMA_IRQHandler+0x1e4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <HAL_DMA_IRQHandler+0x1e8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <HAL_DMA_IRQHandler+0x1ec>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x194>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	@ (8001da0 <HAL_DMA_IRQHandler+0x1f0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d12f      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x1f4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e02e      	b.n	8001db8 <HAL_DMA_IRQHandler+0x208>
 8001d5a:	bf00      	nop
 8001d5c:	24000000 	.word	0x24000000
 8001d60:	1b4e81b5 	.word	0x1b4e81b5
 8001d64:	40020010 	.word	0x40020010
 8001d68:	40020028 	.word	0x40020028
 8001d6c:	40020040 	.word	0x40020040
 8001d70:	40020058 	.word	0x40020058
 8001d74:	40020070 	.word	0x40020070
 8001d78:	40020088 	.word	0x40020088
 8001d7c:	400200a0 	.word	0x400200a0
 8001d80:	400200b8 	.word	0x400200b8
 8001d84:	40020410 	.word	0x40020410
 8001d88:	40020428 	.word	0x40020428
 8001d8c:	40020440 	.word	0x40020440
 8001d90:	40020458 	.word	0x40020458
 8001d94:	40020470 	.word	0x40020470
 8001d98:	40020488 	.word	0x40020488
 8001d9c:	400204a0 	.word	0x400204a0
 8001da0:	400204b8 	.word	0x400204b8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d015      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d06e      	beq.n	8001edc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a69      	ldr	r2, [pc, #420]	@ (8001fa8 <HAL_DMA_IRQHandler+0x3f8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d04a      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a67      	ldr	r2, [pc, #412]	@ (8001fac <HAL_DMA_IRQHandler+0x3fc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d045      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a66      	ldr	r2, [pc, #408]	@ (8001fb0 <HAL_DMA_IRQHandler+0x400>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d040      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a64      	ldr	r2, [pc, #400]	@ (8001fb4 <HAL_DMA_IRQHandler+0x404>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d03b      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a63      	ldr	r2, [pc, #396]	@ (8001fb8 <HAL_DMA_IRQHandler+0x408>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d036      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a61      	ldr	r2, [pc, #388]	@ (8001fbc <HAL_DMA_IRQHandler+0x40c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d031      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a60      	ldr	r2, [pc, #384]	@ (8001fc0 <HAL_DMA_IRQHandler+0x410>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d02c      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc4 <HAL_DMA_IRQHandler+0x414>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d027      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a5d      	ldr	r2, [pc, #372]	@ (8001fc8 <HAL_DMA_IRQHandler+0x418>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a5b      	ldr	r2, [pc, #364]	@ (8001fcc <HAL_DMA_IRQHandler+0x41c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01d      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd0 <HAL_DMA_IRQHandler+0x420>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d018      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a58      	ldr	r2, [pc, #352]	@ (8001fd4 <HAL_DMA_IRQHandler+0x424>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a57      	ldr	r2, [pc, #348]	@ (8001fd8 <HAL_DMA_IRQHandler+0x428>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00e      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a55      	ldr	r2, [pc, #340]	@ (8001fdc <HAL_DMA_IRQHandler+0x42c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a54      	ldr	r2, [pc, #336]	@ (8001fe0 <HAL_DMA_IRQHandler+0x430>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d004      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ee>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a52      	ldr	r2, [pc, #328]	@ (8001fe4 <HAL_DMA_IRQHandler+0x434>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x304>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e003      	b.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2201      	movs	r2, #1
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	f043 0202 	orr.w	r2, r3, #2
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 808f 	beq.w	8002010 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa8 <HAL_DMA_IRQHandler+0x3f8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04a      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	@ (8001fac <HAL_DMA_IRQHandler+0x3fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d045      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a29      	ldr	r2, [pc, #164]	@ (8001fb0 <HAL_DMA_IRQHandler+0x400>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d040      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_DMA_IRQHandler+0x404>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d03b      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <HAL_DMA_IRQHandler+0x408>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d036      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a24      	ldr	r2, [pc, #144]	@ (8001fbc <HAL_DMA_IRQHandler+0x40c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <HAL_DMA_IRQHandler+0x410>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d02c      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a21      	ldr	r2, [pc, #132]	@ (8001fc4 <HAL_DMA_IRQHandler+0x414>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d027      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a20      	ldr	r2, [pc, #128]	@ (8001fc8 <HAL_DMA_IRQHandler+0x418>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <HAL_DMA_IRQHandler+0x41c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <HAL_DMA_IRQHandler+0x420>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d018      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd4 <HAL_DMA_IRQHandler+0x424>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd8 <HAL_DMA_IRQHandler+0x428>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a18      	ldr	r2, [pc, #96]	@ (8001fdc <HAL_DMA_IRQHandler+0x42c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_DMA_IRQHandler+0x430>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x3e2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <HAL_DMA_IRQHandler+0x434>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d12a      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x438>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e023      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x440>
 8001fa8:	40020010 	.word	0x40020010
 8001fac:	40020028 	.word	0x40020028
 8001fb0:	40020040 	.word	0x40020040
 8001fb4:	40020058 	.word	0x40020058
 8001fb8:	40020070 	.word	0x40020070
 8001fbc:	40020088 	.word	0x40020088
 8001fc0:	400200a0 	.word	0x400200a0
 8001fc4:	400200b8 	.word	0x400200b8
 8001fc8:	40020410 	.word	0x40020410
 8001fcc:	40020428 	.word	0x40020428
 8001fd0:	40020440 	.word	0x40020440
 8001fd4:	40020458 	.word	0x40020458
 8001fd8:	40020470 	.word	0x40020470
 8001fdc:	40020488 	.word	0x40020488
 8001fe0:	400204a0 	.word	0x400204a0
 8001fe4:	400204b8 	.word	0x400204b8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	409a      	lsls	r2, r3
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	2210      	movs	r2, #16
 800201a:	409a      	lsls	r2, r3
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a6 	beq.w	8002172 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a85      	ldr	r2, [pc, #532]	@ (8002240 <HAL_DMA_IRQHandler+0x690>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a83      	ldr	r2, [pc, #524]	@ (8002244 <HAL_DMA_IRQHandler+0x694>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a82      	ldr	r2, [pc, #520]	@ (8002248 <HAL_DMA_IRQHandler+0x698>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a80      	ldr	r2, [pc, #512]	@ (800224c <HAL_DMA_IRQHandler+0x69c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7f      	ldr	r2, [pc, #508]	@ (8002250 <HAL_DMA_IRQHandler+0x6a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a7d      	ldr	r2, [pc, #500]	@ (8002254 <HAL_DMA_IRQHandler+0x6a4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7c      	ldr	r2, [pc, #496]	@ (8002258 <HAL_DMA_IRQHandler+0x6a8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a7a      	ldr	r2, [pc, #488]	@ (800225c <HAL_DMA_IRQHandler+0x6ac>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a79      	ldr	r2, [pc, #484]	@ (8002260 <HAL_DMA_IRQHandler+0x6b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a77      	ldr	r2, [pc, #476]	@ (8002264 <HAL_DMA_IRQHandler+0x6b4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a76      	ldr	r2, [pc, #472]	@ (8002268 <HAL_DMA_IRQHandler+0x6b8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a74      	ldr	r2, [pc, #464]	@ (800226c <HAL_DMA_IRQHandler+0x6bc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a73      	ldr	r2, [pc, #460]	@ (8002270 <HAL_DMA_IRQHandler+0x6c0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a71      	ldr	r2, [pc, #452]	@ (8002274 <HAL_DMA_IRQHandler+0x6c4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a70      	ldr	r2, [pc, #448]	@ (8002278 <HAL_DMA_IRQHandler+0x6c8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x516>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6e      	ldr	r2, [pc, #440]	@ (800227c <HAL_DMA_IRQHandler+0x6cc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10a      	bne.n	80020dc <HAL_DMA_IRQHandler+0x52c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e009      	b.n	80020f0 <HAL_DMA_IRQHandler+0x540>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d03e      	beq.n	8002172 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2210      	movs	r2, #16
 80020fe:	409a      	lsls	r2, r3
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d018      	beq.n	8002144 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d024      	beq.n	8002172 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e01f      	b.n	8002172 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01b      	beq.n	8002172 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
 8002142:	e016      	b.n	8002172 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0208 	bic.w	r2, r2, #8
 8002160:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2220      	movs	r2, #32
 800217c:	409a      	lsls	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8110 	beq.w	80023a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2c      	ldr	r2, [pc, #176]	@ (8002240 <HAL_DMA_IRQHandler+0x690>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d04a      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <HAL_DMA_IRQHandler+0x694>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d045      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_DMA_IRQHandler+0x698>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d040      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a28      	ldr	r2, [pc, #160]	@ (800224c <HAL_DMA_IRQHandler+0x69c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d03b      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a26      	ldr	r2, [pc, #152]	@ (8002250 <HAL_DMA_IRQHandler+0x6a0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d036      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <HAL_DMA_IRQHandler+0x6a4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d031      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <HAL_DMA_IRQHandler+0x6a8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02c      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_DMA_IRQHandler+0x6ac>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d027      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a20      	ldr	r2, [pc, #128]	@ (8002260 <HAL_DMA_IRQHandler+0x6b0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d022      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002264 <HAL_DMA_IRQHandler+0x6b4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d01d      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002268 <HAL_DMA_IRQHandler+0x6b8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d018      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1c      	ldr	r2, [pc, #112]	@ (800226c <HAL_DMA_IRQHandler+0x6bc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1a      	ldr	r2, [pc, #104]	@ (8002270 <HAL_DMA_IRQHandler+0x6c0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00e      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_DMA_IRQHandler+0x6c4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <HAL_DMA_IRQHandler+0x6c8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <HAL_DMA_IRQHandler+0x678>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_DMA_IRQHandler+0x6cc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12b      	bne.n	8002280 <HAL_DMA_IRQHandler+0x6d0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	e02a      	b.n	8002294 <HAL_DMA_IRQHandler+0x6e4>
 800223e:	bf00      	nop
 8002240:	40020010 	.word	0x40020010
 8002244:	40020028 	.word	0x40020028
 8002248:	40020040 	.word	0x40020040
 800224c:	40020058 	.word	0x40020058
 8002250:	40020070 	.word	0x40020070
 8002254:	40020088 	.word	0x40020088
 8002258:	400200a0 	.word	0x400200a0
 800225c:	400200b8 	.word	0x400200b8
 8002260:	40020410 	.word	0x40020410
 8002264:	40020428 	.word	0x40020428
 8002268:	40020440 	.word	0x40020440
 800226c:	40020458 	.word	0x40020458
 8002270:	40020470 	.word	0x40020470
 8002274:	40020488 	.word	0x40020488
 8002278:	400204a0 	.word	0x400204a0
 800227c:	400204b8 	.word	0x400204b8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8087 	beq.w	80023a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2220      	movs	r2, #32
 80022a4:	409a      	lsls	r2, r3
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d139      	bne.n	800232a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0216 	bic.w	r2, r2, #22
 80022c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x736>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0208 	bic.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	223f      	movs	r2, #63	@ 0x3f
 8002300:	409a      	lsls	r2, r3
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 834a 	beq.w	80029b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
          }
          return;
 8002328:	e344      	b.n	80029b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d018      	beq.n	800236a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d108      	bne.n	8002358 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	2b00      	cmp	r3, #0
 800234c:	d02c      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
 8002356:	e027      	b.n	80023a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
 8002368:	e01e      	b.n	80023a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0210 	bic.w	r2, r2, #16
 8002386:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8306 	beq.w	80029be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8088 	beq.w	80024d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7a      	ldr	r2, [pc, #488]	@ (80025b8 <HAL_DMA_IRQHandler+0xa08>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d04a      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a79      	ldr	r2, [pc, #484]	@ (80025bc <HAL_DMA_IRQHandler+0xa0c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d045      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a77      	ldr	r2, [pc, #476]	@ (80025c0 <HAL_DMA_IRQHandler+0xa10>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d040      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a76      	ldr	r2, [pc, #472]	@ (80025c4 <HAL_DMA_IRQHandler+0xa14>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d03b      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a74      	ldr	r2, [pc, #464]	@ (80025c8 <HAL_DMA_IRQHandler+0xa18>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d036      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a73      	ldr	r2, [pc, #460]	@ (80025cc <HAL_DMA_IRQHandler+0xa1c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d031      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a71      	ldr	r2, [pc, #452]	@ (80025d0 <HAL_DMA_IRQHandler+0xa20>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02c      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a70      	ldr	r2, [pc, #448]	@ (80025d4 <HAL_DMA_IRQHandler+0xa24>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d027      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6e      	ldr	r2, [pc, #440]	@ (80025d8 <HAL_DMA_IRQHandler+0xa28>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d022      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6d      	ldr	r2, [pc, #436]	@ (80025dc <HAL_DMA_IRQHandler+0xa2c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d01d      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a6b      	ldr	r2, [pc, #428]	@ (80025e0 <HAL_DMA_IRQHandler+0xa30>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d018      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6a      	ldr	r2, [pc, #424]	@ (80025e4 <HAL_DMA_IRQHandler+0xa34>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a68      	ldr	r2, [pc, #416]	@ (80025e8 <HAL_DMA_IRQHandler+0xa38>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00e      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a67      	ldr	r2, [pc, #412]	@ (80025ec <HAL_DMA_IRQHandler+0xa3c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a65      	ldr	r2, [pc, #404]	@ (80025f0 <HAL_DMA_IRQHandler+0xa40>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_DMA_IRQHandler+0x8b8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a64      	ldr	r2, [pc, #400]	@ (80025f4 <HAL_DMA_IRQHandler+0xa44>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d108      	bne.n	800247a <HAL_DMA_IRQHandler+0x8ca>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e007      	b.n	800248a <HAL_DMA_IRQHandler+0x8da>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3301      	adds	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002492:	429a      	cmp	r2, r3
 8002494:	d307      	bcc.n	80024a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f2      	bne.n	800248a <HAL_DMA_IRQHandler+0x8da>
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80024a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80024be:	e003      	b.n	80024c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8272 	beq.w	80029be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
 80024e2:	e26c      	b.n	80029be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a43      	ldr	r2, [pc, #268]	@ (80025f8 <HAL_DMA_IRQHandler+0xa48>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a42      	ldr	r2, [pc, #264]	@ (80025fc <HAL_DMA_IRQHandler+0xa4c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a40      	ldr	r2, [pc, #256]	@ (8002600 <HAL_DMA_IRQHandler+0xa50>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a3f      	ldr	r2, [pc, #252]	@ (8002604 <HAL_DMA_IRQHandler+0xa54>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3d      	ldr	r2, [pc, #244]	@ (8002608 <HAL_DMA_IRQHandler+0xa58>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a3c      	ldr	r2, [pc, #240]	@ (800260c <HAL_DMA_IRQHandler+0xa5c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3a      	ldr	r2, [pc, #232]	@ (8002610 <HAL_DMA_IRQHandler+0xa60>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_IRQHandler+0x984>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a39      	ldr	r2, [pc, #228]	@ (8002614 <HAL_DMA_IRQHandler+0xa64>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_DMA_IRQHandler+0x988>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_DMA_IRQHandler+0x98a>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 823f 	beq.w	80029be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2204      	movs	r2, #4
 8002552:	409a      	lsls	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80cd 	beq.w	80026f8 <HAL_DMA_IRQHandler+0xb48>
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80c7 	beq.w	80026f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2204      	movs	r2, #4
 8002574:	409a      	lsls	r2, r3
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d049      	beq.n	8002618 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8210 	beq.w	80029b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025a0:	e20a      	b.n	80029b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8206 	beq.w	80029b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80025b4:	e200      	b.n	80029b8 <HAL_DMA_IRQHandler+0xe08>
 80025b6:	bf00      	nop
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
 80025f8:	58025408 	.word	0x58025408
 80025fc:	5802541c 	.word	0x5802541c
 8002600:	58025430 	.word	0x58025430
 8002604:	58025444 	.word	0x58025444
 8002608:	58025458 	.word	0x58025458
 800260c:	5802546c 	.word	0x5802546c
 8002610:	58025480 	.word	0x58025480
 8002614:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d160      	bne.n	80026e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7f      	ldr	r2, [pc, #508]	@ (8002824 <HAL_DMA_IRQHandler+0xc74>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04a      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a7d      	ldr	r2, [pc, #500]	@ (8002828 <HAL_DMA_IRQHandler+0xc78>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d045      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7c      	ldr	r2, [pc, #496]	@ (800282c <HAL_DMA_IRQHandler+0xc7c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7a      	ldr	r2, [pc, #488]	@ (8002830 <HAL_DMA_IRQHandler+0xc80>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d03b      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a79      	ldr	r2, [pc, #484]	@ (8002834 <HAL_DMA_IRQHandler+0xc84>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d036      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a77      	ldr	r2, [pc, #476]	@ (8002838 <HAL_DMA_IRQHandler+0xc88>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a76      	ldr	r2, [pc, #472]	@ (800283c <HAL_DMA_IRQHandler+0xc8c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a74      	ldr	r2, [pc, #464]	@ (8002840 <HAL_DMA_IRQHandler+0xc90>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d027      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	@ (8002844 <HAL_DMA_IRQHandler+0xc94>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a71      	ldr	r2, [pc, #452]	@ (8002848 <HAL_DMA_IRQHandler+0xc98>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a70      	ldr	r2, [pc, #448]	@ (800284c <HAL_DMA_IRQHandler+0xc9c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d018      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	@ (8002850 <HAL_DMA_IRQHandler+0xca0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	@ (8002854 <HAL_DMA_IRQHandler+0xca4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002858 <HAL_DMA_IRQHandler+0xca8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6a      	ldr	r2, [pc, #424]	@ (800285c <HAL_DMA_IRQHandler+0xcac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xb12>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	@ (8002860 <HAL_DMA_IRQHandler+0xcb0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d108      	bne.n	80026d4 <HAL_DMA_IRQHandler+0xb24>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0208 	bic.w	r2, r2, #8
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e007      	b.n	80026e4 <HAL_DMA_IRQHandler+0xb34>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8165 	beq.w	80029b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80026f6:	e15f      	b.n	80029b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2202      	movs	r2, #2
 8002702:	409a      	lsls	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80c5 	beq.w	8002898 <HAL_DMA_IRQHandler+0xce8>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80bf 	beq.w	8002898 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2202      	movs	r2, #2
 8002724:	409a      	lsls	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 813a 	beq.w	80029bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002750:	e134      	b.n	80029bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8130 	beq.w	80029bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002764:	e12a      	b.n	80029bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 8089 	bne.w	8002884 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2b      	ldr	r2, [pc, #172]	@ (8002824 <HAL_DMA_IRQHandler+0xc74>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d04a      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <HAL_DMA_IRQHandler+0xc78>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d045      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a28      	ldr	r2, [pc, #160]	@ (800282c <HAL_DMA_IRQHandler+0xc7c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d040      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <HAL_DMA_IRQHandler+0xc80>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d03b      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a25      	ldr	r2, [pc, #148]	@ (8002834 <HAL_DMA_IRQHandler+0xc84>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d036      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a23      	ldr	r2, [pc, #140]	@ (8002838 <HAL_DMA_IRQHandler+0xc88>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a22      	ldr	r2, [pc, #136]	@ (800283c <HAL_DMA_IRQHandler+0xc8c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d02c      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <HAL_DMA_IRQHandler+0xc90>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d027      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002844 <HAL_DMA_IRQHandler+0xc94>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002848 <HAL_DMA_IRQHandler+0xc98>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01d      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1c      	ldr	r2, [pc, #112]	@ (800284c <HAL_DMA_IRQHandler+0xc9c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d018      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002850 <HAL_DMA_IRQHandler+0xca0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <HAL_DMA_IRQHandler+0xca4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <HAL_DMA_IRQHandler+0xca8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a16      	ldr	r2, [pc, #88]	@ (800285c <HAL_DMA_IRQHandler+0xcac>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_DMA_IRQHandler+0xc62>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <HAL_DMA_IRQHandler+0xcb0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d128      	bne.n	8002864 <HAL_DMA_IRQHandler+0xcb4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0214 	bic.w	r2, r2, #20
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e027      	b.n	8002874 <HAL_DMA_IRQHandler+0xcc4>
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	40020040 	.word	0x40020040
 8002830:	40020058 	.word	0x40020058
 8002834:	40020070 	.word	0x40020070
 8002838:	40020088 	.word	0x40020088
 800283c:	400200a0 	.word	0x400200a0
 8002840:	400200b8 	.word	0x400200b8
 8002844:	40020410 	.word	0x40020410
 8002848:	40020428 	.word	0x40020428
 800284c:	40020440 	.word	0x40020440
 8002850:	40020458 	.word	0x40020458
 8002854:	40020470 	.word	0x40020470
 8002858:	40020488 	.word	0x40020488
 800285c:	400204a0 	.word	0x400204a0
 8002860:	400204b8 	.word	0x400204b8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 020a 	bic.w	r2, r2, #10
 8002872:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002896:	e091      	b.n	80029bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2208      	movs	r2, #8
 80028a2:	409a      	lsls	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8088 	beq.w	80029be <HAL_DMA_IRQHandler+0xe0e>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8082 	beq.w	80029be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a41      	ldr	r2, [pc, #260]	@ (80029c4 <HAL_DMA_IRQHandler+0xe14>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d04a      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a3f      	ldr	r2, [pc, #252]	@ (80029c8 <HAL_DMA_IRQHandler+0xe18>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d045      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	@ (80029cc <HAL_DMA_IRQHandler+0xe1c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3c      	ldr	r2, [pc, #240]	@ (80029d0 <HAL_DMA_IRQHandler+0xe20>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d03b      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3b      	ldr	r2, [pc, #236]	@ (80029d4 <HAL_DMA_IRQHandler+0xe24>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d036      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a39      	ldr	r2, [pc, #228]	@ (80029d8 <HAL_DMA_IRQHandler+0xe28>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a38      	ldr	r2, [pc, #224]	@ (80029dc <HAL_DMA_IRQHandler+0xe2c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d02c      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a36      	ldr	r2, [pc, #216]	@ (80029e0 <HAL_DMA_IRQHandler+0xe30>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d027      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a35      	ldr	r2, [pc, #212]	@ (80029e4 <HAL_DMA_IRQHandler+0xe34>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a33      	ldr	r2, [pc, #204]	@ (80029e8 <HAL_DMA_IRQHandler+0xe38>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01d      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a32      	ldr	r2, [pc, #200]	@ (80029ec <HAL_DMA_IRQHandler+0xe3c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_DMA_IRQHandler+0xe40>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a2f      	ldr	r2, [pc, #188]	@ (80029f4 <HAL_DMA_IRQHandler+0xe44>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2d      	ldr	r2, [pc, #180]	@ (80029f8 <HAL_DMA_IRQHandler+0xe48>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2c      	ldr	r2, [pc, #176]	@ (80029fc <HAL_DMA_IRQHandler+0xe4c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_DMA_IRQHandler+0xdaa>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2a      	ldr	r2, [pc, #168]	@ (8002a00 <HAL_DMA_IRQHandler+0xe50>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <HAL_DMA_IRQHandler+0xdbc>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 021c 	bic.w	r2, r2, #28
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e007      	b.n	800297c <HAL_DMA_IRQHandler+0xdcc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 020e 	bic.w	r2, r2, #14
 800297a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2201      	movs	r2, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
 80029b2:	e004      	b.n	80029be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80029b4:	bf00      	nop
 80029b6:	e002      	b.n	80029be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029b8:	bf00      	nop
 80029ba:	e000      	b.n	80029be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80029be:	3728      	adds	r7, #40	@ 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40020010 	.word	0x40020010
 80029c8:	40020028 	.word	0x40020028
 80029cc:	40020040 	.word	0x40020040
 80029d0:	40020058 	.word	0x40020058
 80029d4:	40020070 	.word	0x40020070
 80029d8:	40020088 	.word	0x40020088
 80029dc:	400200a0 	.word	0x400200a0
 80029e0:	400200b8 	.word	0x400200b8
 80029e4:	40020410 	.word	0x40020410
 80029e8:	40020428 	.word	0x40020428
 80029ec:	40020440 	.word	0x40020440
 80029f0:	40020458 	.word	0x40020458
 80029f4:	40020470 	.word	0x40020470
 80029f8:	40020488 	.word	0x40020488
 80029fc:	400204a0 	.word	0x400204a0
 8002a00:	400204b8 	.word	0x400204b8

08002a04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7f      	ldr	r2, [pc, #508]	@ (8002c20 <DMA_SetConfig+0x21c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d072      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7d      	ldr	r2, [pc, #500]	@ (8002c24 <DMA_SetConfig+0x220>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d06d      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7c      	ldr	r2, [pc, #496]	@ (8002c28 <DMA_SetConfig+0x224>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d068      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7a      	ldr	r2, [pc, #488]	@ (8002c2c <DMA_SetConfig+0x228>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d063      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a79      	ldr	r2, [pc, #484]	@ (8002c30 <DMA_SetConfig+0x22c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d05e      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a77      	ldr	r2, [pc, #476]	@ (8002c34 <DMA_SetConfig+0x230>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d059      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a76      	ldr	r2, [pc, #472]	@ (8002c38 <DMA_SetConfig+0x234>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d054      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a74      	ldr	r2, [pc, #464]	@ (8002c3c <DMA_SetConfig+0x238>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d04f      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a73      	ldr	r2, [pc, #460]	@ (8002c40 <DMA_SetConfig+0x23c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04a      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a71      	ldr	r2, [pc, #452]	@ (8002c44 <DMA_SetConfig+0x240>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d045      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a70      	ldr	r2, [pc, #448]	@ (8002c48 <DMA_SetConfig+0x244>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d040      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6e      	ldr	r2, [pc, #440]	@ (8002c4c <DMA_SetConfig+0x248>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d03b      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8002c50 <DMA_SetConfig+0x24c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d036      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c54 <DMA_SetConfig+0x250>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d031      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <DMA_SetConfig+0x254>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d02c      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a68      	ldr	r2, [pc, #416]	@ (8002c5c <DMA_SetConfig+0x258>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d027      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a67      	ldr	r2, [pc, #412]	@ (8002c60 <DMA_SetConfig+0x25c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a65      	ldr	r2, [pc, #404]	@ (8002c64 <DMA_SetConfig+0x260>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01d      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a64      	ldr	r2, [pc, #400]	@ (8002c68 <DMA_SetConfig+0x264>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d018      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a62      	ldr	r2, [pc, #392]	@ (8002c6c <DMA_SetConfig+0x268>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a61      	ldr	r2, [pc, #388]	@ (8002c70 <DMA_SetConfig+0x26c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00e      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a5f      	ldr	r2, [pc, #380]	@ (8002c74 <DMA_SetConfig+0x270>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5e      	ldr	r2, [pc, #376]	@ (8002c78 <DMA_SetConfig+0x274>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <DMA_SetConfig+0x10a>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a5c      	ldr	r2, [pc, #368]	@ (8002c7c <DMA_SetConfig+0x278>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <DMA_SetConfig+0x10e>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <DMA_SetConfig+0x110>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a39      	ldr	r2, [pc, #228]	@ (8002c20 <DMA_SetConfig+0x21c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04a      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a38      	ldr	r2, [pc, #224]	@ (8002c24 <DMA_SetConfig+0x220>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d045      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a36      	ldr	r2, [pc, #216]	@ (8002c28 <DMA_SetConfig+0x224>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d040      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <DMA_SetConfig+0x228>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d03b      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a33      	ldr	r2, [pc, #204]	@ (8002c30 <DMA_SetConfig+0x22c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d036      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a32      	ldr	r2, [pc, #200]	@ (8002c34 <DMA_SetConfig+0x230>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d031      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a30      	ldr	r2, [pc, #192]	@ (8002c38 <DMA_SetConfig+0x234>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d02c      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002c3c <DMA_SetConfig+0x238>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d027      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <DMA_SetConfig+0x23c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d022      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <DMA_SetConfig+0x240>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d01d      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c48 <DMA_SetConfig+0x244>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a29      	ldr	r2, [pc, #164]	@ (8002c4c <DMA_SetConfig+0x248>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a27      	ldr	r2, [pc, #156]	@ (8002c50 <DMA_SetConfig+0x24c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a26      	ldr	r2, [pc, #152]	@ (8002c54 <DMA_SetConfig+0x250>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a24      	ldr	r2, [pc, #144]	@ (8002c58 <DMA_SetConfig+0x254>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <DMA_SetConfig+0x1d0>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a23      	ldr	r2, [pc, #140]	@ (8002c5c <DMA_SetConfig+0x258>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <DMA_SetConfig+0x1d4>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <DMA_SetConfig+0x1d6>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d059      	beq.n	8002c92 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	223f      	movs	r2, #63	@ 0x3f
 8002be8:	409a      	lsls	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bfc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b40      	cmp	r3, #64	@ 0x40
 8002c0c:	d138      	bne.n	8002c80 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002c1e:	e086      	b.n	8002d2e <DMA_SetConfig+0x32a>
 8002c20:	40020010 	.word	0x40020010
 8002c24:	40020028 	.word	0x40020028
 8002c28:	40020040 	.word	0x40020040
 8002c2c:	40020058 	.word	0x40020058
 8002c30:	40020070 	.word	0x40020070
 8002c34:	40020088 	.word	0x40020088
 8002c38:	400200a0 	.word	0x400200a0
 8002c3c:	400200b8 	.word	0x400200b8
 8002c40:	40020410 	.word	0x40020410
 8002c44:	40020428 	.word	0x40020428
 8002c48:	40020440 	.word	0x40020440
 8002c4c:	40020458 	.word	0x40020458
 8002c50:	40020470 	.word	0x40020470
 8002c54:	40020488 	.word	0x40020488
 8002c58:	400204a0 	.word	0x400204a0
 8002c5c:	400204b8 	.word	0x400204b8
 8002c60:	58025408 	.word	0x58025408
 8002c64:	5802541c 	.word	0x5802541c
 8002c68:	58025430 	.word	0x58025430
 8002c6c:	58025444 	.word	0x58025444
 8002c70:	58025458 	.word	0x58025458
 8002c74:	5802546c 	.word	0x5802546c
 8002c78:	58025480 	.word	0x58025480
 8002c7c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
}
 8002c90:	e04d      	b.n	8002d2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <DMA_SetConfig+0x338>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d022      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <DMA_SetConfig+0x33c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01d      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <DMA_SetConfig+0x340>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d018      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a24      	ldr	r2, [pc, #144]	@ (8002d48 <DMA_SetConfig+0x344>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a23      	ldr	r2, [pc, #140]	@ (8002d4c <DMA_SetConfig+0x348>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <DMA_SetConfig+0x34c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a20      	ldr	r2, [pc, #128]	@ (8002d54 <DMA_SetConfig+0x350>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <DMA_SetConfig+0x2de>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d58 <DMA_SetConfig+0x354>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <DMA_SetConfig+0x2e2>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <DMA_SetConfig+0x2e4>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b40      	cmp	r3, #64	@ 0x40
 8002d0a:	d108      	bne.n	8002d1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	60da      	str	r2, [r3, #12]
}
 8002d1c:	e007      	b.n	8002d2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	58025408 	.word	0x58025408
 8002d40:	5802541c 	.word	0x5802541c
 8002d44:	58025430 	.word	0x58025430
 8002d48:	58025444 	.word	0x58025444
 8002d4c:	58025458 	.word	0x58025458
 8002d50:	5802546c 	.word	0x5802546c
 8002d54:	58025480 	.word	0x58025480
 8002d58:	58025494 	.word	0x58025494

08002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a42      	ldr	r2, [pc, #264]	@ (8002e74 <DMA_CalcBaseAndBitshift+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a41      	ldr	r2, [pc, #260]	@ (8002e78 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8002e7c <DMA_CalcBaseAndBitshift+0x120>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3e      	ldr	r2, [pc, #248]	@ (8002e80 <DMA_CalcBaseAndBitshift+0x124>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3c      	ldr	r2, [pc, #240]	@ (8002e84 <DMA_CalcBaseAndBitshift+0x128>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e88 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a39      	ldr	r2, [pc, #228]	@ (8002e8c <DMA_CalcBaseAndBitshift+0x130>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a38      	ldr	r2, [pc, #224]	@ (8002e90 <DMA_CalcBaseAndBitshift+0x134>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a36      	ldr	r2, [pc, #216]	@ (8002e94 <DMA_CalcBaseAndBitshift+0x138>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a35      	ldr	r2, [pc, #212]	@ (8002e98 <DMA_CalcBaseAndBitshift+0x13c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a33      	ldr	r2, [pc, #204]	@ (8002e9c <DMA_CalcBaseAndBitshift+0x140>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a32      	ldr	r2, [pc, #200]	@ (8002ea0 <DMA_CalcBaseAndBitshift+0x144>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a30      	ldr	r2, [pc, #192]	@ (8002ea4 <DMA_CalcBaseAndBitshift+0x148>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	@ (8002eac <DMA_CalcBaseAndBitshift+0x150>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <DMA_CalcBaseAndBitshift+0xa8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb0 <DMA_CalcBaseAndBitshift+0x154>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <DMA_CalcBaseAndBitshift+0xac>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <DMA_CalcBaseAndBitshift+0xae>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d024      	beq.n	8002e58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3b10      	subs	r3, #16
 8002e16:	4a27      	ldr	r2, [pc, #156]	@ (8002eb4 <DMA_CalcBaseAndBitshift+0x158>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	4a24      	ldr	r2, [pc, #144]	@ (8002eb8 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e28:	5cd3      	ldrb	r3, [r2, r3]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b03      	cmp	r3, #3
 8002e34:	d908      	bls.n	8002e48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ebc <DMA_CalcBaseAndBitshift+0x160>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	1d1a      	adds	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e46:	e00d      	b.n	8002e64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <DMA_CalcBaseAndBitshift+0x160>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e56:	e005      	b.n	8002e64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40020010 	.word	0x40020010
 8002e78:	40020028 	.word	0x40020028
 8002e7c:	40020040 	.word	0x40020040
 8002e80:	40020058 	.word	0x40020058
 8002e84:	40020070 	.word	0x40020070
 8002e88:	40020088 	.word	0x40020088
 8002e8c:	400200a0 	.word	0x400200a0
 8002e90:	400200b8 	.word	0x400200b8
 8002e94:	40020410 	.word	0x40020410
 8002e98:	40020428 	.word	0x40020428
 8002e9c:	40020440 	.word	0x40020440
 8002ea0:	40020458 	.word	0x40020458
 8002ea4:	40020470 	.word	0x40020470
 8002ea8:	40020488 	.word	0x40020488
 8002eac:	400204a0 	.word	0x400204a0
 8002eb0:	400204b8 	.word	0x400204b8
 8002eb4:	aaaaaaab 	.word	0xaaaaaaab
 8002eb8:	0800617c 	.word	0x0800617c
 8002ebc:	fffffc00 	.word	0xfffffc00

08002ec0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d120      	bne.n	8002f16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d858      	bhi.n	8002f8e <DMA_CheckFifoParam+0xce>
 8002edc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee4 <DMA_CheckFifoParam+0x24>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f07 	.word	0x08002f07
 8002eec:	08002ef5 	.word	0x08002ef5
 8002ef0:	08002f8f 	.word	0x08002f8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d048      	beq.n	8002f92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f04:	e045      	b.n	8002f92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f0e:	d142      	bne.n	8002f96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f14:	e03f      	b.n	8002f96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f1e:	d123      	bne.n	8002f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d838      	bhi.n	8002f9a <DMA_CheckFifoParam+0xda>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <DMA_CheckFifoParam+0x70>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f47 	.word	0x08002f47
 8002f38:	08002f41 	.word	0x08002f41
 8002f3c:	08002f59 	.word	0x08002f59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
        break;
 8002f44:	e030      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d025      	beq.n	8002f9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f56:	e022      	b.n	8002f9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f60:	d11f      	bne.n	8002fa2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f66:	e01c      	b.n	8002fa2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d902      	bls.n	8002f76 <DMA_CheckFifoParam+0xb6>
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d003      	beq.n	8002f7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f74:	e018      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
        break;
 8002f7a:	e015      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8002f8c:	e00b      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
        break;
 8002f8e:	bf00      	nop
 8002f90:	e00a      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        break;
 8002f92:	bf00      	nop
 8002f94:	e008      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        break;
 8002f96:	bf00      	nop
 8002f98:	e006      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        break;
 8002f9a:	bf00      	nop
 8002f9c:	e004      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
        break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <DMA_CheckFifoParam+0xe8>
    break;
 8002fa6:	bf00      	nop
    }
  }

  return status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop

08002fb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a38      	ldr	r2, [pc, #224]	@ (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d022      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a36      	ldr	r2, [pc, #216]	@ (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d01d      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a35      	ldr	r2, [pc, #212]	@ (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a33      	ldr	r2, [pc, #204]	@ (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a32      	ldr	r2, [pc, #200]	@ (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a30      	ldr	r2, [pc, #192]	@ (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a2f      	ldr	r2, [pc, #188]	@ (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a2d      	ldr	r2, [pc, #180]	@ (80030c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01a      	beq.n	8003056 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3b08      	subs	r3, #8
 8003028:	4a28      	ldr	r2, [pc, #160]	@ (80030cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a24      	ldr	r2, [pc, #144]	@ (80030d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003044:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2201      	movs	r2, #1
 800304e:	409a      	lsls	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003054:	e024      	b.n	80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3b10      	subs	r3, #16
 800305e:	4a1e      	ldr	r2, [pc, #120]	@ (80030d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4a1c      	ldr	r2, [pc, #112]	@ (80030dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d806      	bhi.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4a1b      	ldr	r2, [pc, #108]	@ (80030e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d902      	bls.n	800307e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3308      	adds	r3, #8
 800307c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003090:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2201      	movs	r2, #1
 800309a:	409a      	lsls	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	58025408 	.word	0x58025408
 80030b0:	5802541c 	.word	0x5802541c
 80030b4:	58025430 	.word	0x58025430
 80030b8:	58025444 	.word	0x58025444
 80030bc:	58025458 	.word	0x58025458
 80030c0:	5802546c 	.word	0x5802546c
 80030c4:	58025480 	.word	0x58025480
 80030c8:	58025494 	.word	0x58025494
 80030cc:	cccccccd 	.word	0xcccccccd
 80030d0:	16009600 	.word	0x16009600
 80030d4:	58025880 	.word	0x58025880
 80030d8:	aaaaaaab 	.word	0xaaaaaaab
 80030dc:	400204b8 	.word	0x400204b8
 80030e0:	4002040f 	.word	0x4002040f
 80030e4:	10008200 	.word	0x10008200
 80030e8:	40020880 	.word	0x40020880

080030ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04a      	beq.n	8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b08      	cmp	r3, #8
 8003106:	d847      	bhi.n	8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a25      	ldr	r2, [pc, #148]	@ (80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a24      	ldr	r2, [pc, #144]	@ (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01d      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a22      	ldr	r2, [pc, #136]	@ (80031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a21      	ldr	r2, [pc, #132]	@ (80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	@ (80031bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a15      	ldr	r2, [pc, #84]	@ (80031c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003174:	671a      	str	r2, [r3, #112]	@ 0x70
 8003176:	e009      	b.n	800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800318a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b01      	subs	r3, #1
 8003190:	2201      	movs	r2, #1
 8003192:	409a      	lsls	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	58025408 	.word	0x58025408
 80031a8:	5802541c 	.word	0x5802541c
 80031ac:	58025430 	.word	0x58025430
 80031b0:	58025444 	.word	0x58025444
 80031b4:	58025458 	.word	0x58025458
 80031b8:	5802546c 	.word	0x5802546c
 80031bc:	58025480 	.word	0x58025480
 80031c0:	58025494 	.word	0x58025494
 80031c4:	1600963f 	.word	0x1600963f
 80031c8:	58025940 	.word	0x58025940
 80031cc:	1000823f 	.word	0x1000823f
 80031d0:	40020940 	.word	0x40020940

080031d4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	460b      	mov	r3, r1
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e00a      	b.n	8003206 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]
      break;
 80031fc:	e002      	b.n	8003204 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
      break;
 8003202:	bf00      	nop
  }

  return status;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e003      	b.n	800322e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2201      	movs	r2, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	011a      	lsls	r2, r3, #4
 8003264:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <HAL_EXTI_IRQHandler+0x5c>)
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4798      	blx	r3
    }
  }
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	58000088 	.word	0x58000088

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	@ 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032aa:	4b89      	ldr	r3, [pc, #548]	@ (80034d0 <HAL_GPIO_Init+0x234>)
 80032ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ae:	e194      	b.n	80035da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2101      	movs	r1, #1
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8186 	beq.w	80035d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d005      	beq.n	80032e0 <HAL_GPIO_Init+0x44>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d130      	bne.n	8003342 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003316:	2201      	movs	r2, #1
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0201 	and.w	r2, r3, #1
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b03      	cmp	r3, #3
 800334c:	d017      	beq.n	800337e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d123      	bne.n	80033d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	69b9      	ldr	r1, [r7, #24]
 80033ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0203 	and.w	r2, r3, #3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80e0 	beq.w	80035d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003414:	4b2f      	ldr	r3, [pc, #188]	@ (80034d4 <HAL_GPIO_Init+0x238>)
 8003416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800341a:	4a2e      	ldr	r2, [pc, #184]	@ (80034d4 <HAL_GPIO_Init+0x238>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003424:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <HAL_GPIO_Init+0x238>)
 8003426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003432:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <HAL_GPIO_Init+0x23c>)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	3302      	adds	r3, #2
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a20      	ldr	r2, [pc, #128]	@ (80034dc <HAL_GPIO_Init+0x240>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d052      	beq.n	8003504 <HAL_GPIO_Init+0x268>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1f      	ldr	r2, [pc, #124]	@ (80034e0 <HAL_GPIO_Init+0x244>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d031      	beq.n	80034ca <HAL_GPIO_Init+0x22e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1e      	ldr	r2, [pc, #120]	@ (80034e4 <HAL_GPIO_Init+0x248>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02b      	beq.n	80034c6 <HAL_GPIO_Init+0x22a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <HAL_GPIO_Init+0x24c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d025      	beq.n	80034c2 <HAL_GPIO_Init+0x226>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <HAL_GPIO_Init+0x250>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <HAL_GPIO_Init+0x222>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1b      	ldr	r2, [pc, #108]	@ (80034f0 <HAL_GPIO_Init+0x254>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d019      	beq.n	80034ba <HAL_GPIO_Init+0x21e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1a      	ldr	r2, [pc, #104]	@ (80034f4 <HAL_GPIO_Init+0x258>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_Init+0x21a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a19      	ldr	r2, [pc, #100]	@ (80034f8 <HAL_GPIO_Init+0x25c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00d      	beq.n	80034b2 <HAL_GPIO_Init+0x216>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a18      	ldr	r2, [pc, #96]	@ (80034fc <HAL_GPIO_Init+0x260>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <HAL_GPIO_Init+0x212>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <HAL_GPIO_Init+0x264>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_GPIO_Init+0x20e>
 80034a6:	2309      	movs	r3, #9
 80034a8:	e02d      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034aa:	230a      	movs	r3, #10
 80034ac:	e02b      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034ae:	2308      	movs	r3, #8
 80034b0:	e029      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e027      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034b6:	2306      	movs	r3, #6
 80034b8:	e025      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034ba:	2305      	movs	r3, #5
 80034bc:	e023      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034be:	2304      	movs	r3, #4
 80034c0:	e021      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034c2:	2303      	movs	r3, #3
 80034c4:	e01f      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e01d      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e01b      	b.n	8003506 <HAL_GPIO_Init+0x26a>
 80034ce:	bf00      	nop
 80034d0:	58000080 	.word	0x58000080
 80034d4:	58024400 	.word	0x58024400
 80034d8:	58000400 	.word	0x58000400
 80034dc:	58020000 	.word	0x58020000
 80034e0:	58020400 	.word	0x58020400
 80034e4:	58020800 	.word	0x58020800
 80034e8:	58020c00 	.word	0x58020c00
 80034ec:	58021000 	.word	0x58021000
 80034f0:	58021400 	.word	0x58021400
 80034f4:	58021800 	.word	0x58021800
 80034f8:	58021c00 	.word	0x58021c00
 80034fc:	58022000 	.word	0x58022000
 8003500:	58022400 	.word	0x58022400
 8003504:	2300      	movs	r3, #0
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	f002 0203 	and.w	r2, r2, #3
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	4093      	lsls	r3, r2
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003516:	4938      	ldr	r1, [pc, #224]	@ (80035f8 <HAL_GPIO_Init+0x35c>)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800354a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003578:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f ae63 	bne.w	80032b0 <HAL_GPIO_Init+0x14>
  }
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	3724      	adds	r7, #36	@ 0x24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	58000400 	.word	0x58000400

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003618:	e003      	b.n	8003622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	619a      	str	r2, [r3, #24]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003638:	4b19      	ldr	r3, [pc, #100]	@ (80036a0 <HAL_PWREx_ConfigSupply+0x70>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00a      	beq.n	800365a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003644:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <HAL_PWREx_ConfigSupply+0x70>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d001      	beq.n	8003656 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e01f      	b.n	8003696 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e01d      	b.n	8003696 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800365a:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <HAL_PWREx_ConfigSupply+0x70>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f023 0207 	bic.w	r2, r3, #7
 8003662:	490f      	ldr	r1, [pc, #60]	@ (80036a0 <HAL_PWREx_ConfigSupply+0x70>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800366a:	f7fd fb8f 	bl	8000d8c <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003670:	e009      	b.n	8003686 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003672:	f7fd fb8b 	bl	8000d8c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003680:	d901      	bls.n	8003686 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e007      	b.n	8003696 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_PWREx_ConfigSupply+0x70>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003692:	d1ee      	bne.n	8003672 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	58024800 	.word	0x58024800

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	@ 0x30
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f000 bc48 	b.w	8003f48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8088 	beq.w	80037d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c6:	4b99      	ldr	r3, [pc, #612]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036d0:	4b96      	ldr	r3, [pc, #600]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d007      	beq.n	80036ec <HAL_RCC_OscConfig+0x48>
 80036dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036de:	2b18      	cmp	r3, #24
 80036e0:	d111      	bne.n	8003706 <HAL_RCC_OscConfig+0x62>
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	4b8f      	ldr	r3, [pc, #572]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d06d      	beq.n	80037d4 <HAL_RCC_OscConfig+0x130>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d169      	bne.n	80037d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f000 bc21 	b.w	8003f48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x7a>
 8003710:	4b86      	ldr	r3, [pc, #536]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a85      	ldr	r2, [pc, #532]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e02e      	b.n	800377c <HAL_RCC_OscConfig+0xd8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x9c>
 8003726:	4b81      	ldr	r3, [pc, #516]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a80      	ldr	r2, [pc, #512]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b7e      	ldr	r3, [pc, #504]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a7d      	ldr	r2, [pc, #500]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xd8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0xc0>
 800374a:	4b78      	ldr	r3, [pc, #480]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a77      	ldr	r2, [pc, #476]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b75      	ldr	r3, [pc, #468]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a74      	ldr	r2, [pc, #464]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xd8>
 8003764:	4b71      	ldr	r3, [pc, #452]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a70      	ldr	r2, [pc, #448]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b6e      	ldr	r3, [pc, #440]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6d      	ldr	r2, [pc, #436]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800377a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fb02 	bl	8000d8c <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fd fafe 	bl	8000d8c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e3d4      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800379e:	4b63      	ldr	r3, [pc, #396]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd faee 	bl	8000d8c <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fd faea 	bl	8000d8c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e3c0      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037c6:	4b59      	ldr	r3, [pc, #356]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x110>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80ca 	beq.w	8003978 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e4:	4b51      	ldr	r3, [pc, #324]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037ee:	4b4f      	ldr	r3, [pc, #316]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_RCC_OscConfig+0x166>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2b18      	cmp	r3, #24
 80037fe:	d156      	bne.n	80038ae <HAL_RCC_OscConfig+0x20a>
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d151      	bne.n	80038ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800380a:	4b48      	ldr	r3, [pc, #288]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e392      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003822:	4b42      	ldr	r3, [pc, #264]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 0219 	bic.w	r2, r3, #25
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	493f      	ldr	r1, [pc, #252]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd faaa 	bl	8000d8c <HAL_GetTick>
 8003838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383c:	f7fd faa6 	bl	8000d8c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e37c      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384e:	4b37      	ldr	r3, [pc, #220]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385a:	f7fd fac7 	bl	8000dec <HAL_GetREVID>
 800385e:	4603      	mov	r3, r0
 8003860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003864:	4293      	cmp	r3, r2
 8003866:	d817      	bhi.n	8003898 <HAL_RCC_OscConfig+0x1f4>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2b40      	cmp	r3, #64	@ 0x40
 800386e:	d108      	bne.n	8003882 <HAL_RCC_OscConfig+0x1de>
 8003870:	4b2e      	ldr	r3, [pc, #184]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003878:	4a2c      	ldr	r2, [pc, #176]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003880:	e07a      	b.n	8003978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	4b2a      	ldr	r3, [pc, #168]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	031b      	lsls	r3, r3, #12
 8003890:	4926      	ldr	r1, [pc, #152]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003896:	e06f      	b.n	8003978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b24      	ldr	r3, [pc, #144]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	4921      	ldr	r1, [pc, #132]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038ac:	e064      	b.n	8003978 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d047      	beq.n	8003946 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0219 	bic.w	r2, r3, #25
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	491a      	ldr	r1, [pc, #104]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd fa60 	bl	8000d8c <HAL_GetTick>
 80038cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fd fa5c 	bl	8000d8c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e332      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e2:	4b12      	ldr	r3, [pc, #72]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	f7fd fa7d 	bl	8000dec <HAL_GetREVID>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d819      	bhi.n	8003930 <HAL_RCC_OscConfig+0x28c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b40      	cmp	r3, #64	@ 0x40
 8003902:	d108      	bne.n	8003916 <HAL_RCC_OscConfig+0x272>
 8003904:	4b09      	ldr	r3, [pc, #36]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800390c:	4a07      	ldr	r2, [pc, #28]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 800390e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003912:	6053      	str	r3, [r2, #4]
 8003914:	e030      	b.n	8003978 <HAL_RCC_OscConfig+0x2d4>
 8003916:	4b05      	ldr	r3, [pc, #20]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	031b      	lsls	r3, r3, #12
 8003924:	4901      	ldr	r1, [pc, #4]	@ (800392c <HAL_RCC_OscConfig+0x288>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
 800392a:	e025      	b.n	8003978 <HAL_RCC_OscConfig+0x2d4>
 800392c:	58024400 	.word	0x58024400
 8003930:	4b9a      	ldr	r3, [pc, #616]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	061b      	lsls	r3, r3, #24
 800393e:	4997      	ldr	r1, [pc, #604]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
 8003944:	e018      	b.n	8003978 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b95      	ldr	r3, [pc, #596]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a94      	ldr	r2, [pc, #592]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fd fa1b 	bl	8000d8c <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395a:	f7fd fa17 	bl	8000d8c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e2ed      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800396c:	4b8b      	ldr	r3, [pc, #556]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a9 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003986:	4b85      	ldr	r3, [pc, #532]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800398e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003990:	4b82      	ldr	r3, [pc, #520]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d007      	beq.n	80039ac <HAL_RCC_OscConfig+0x308>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b18      	cmp	r3, #24
 80039a0:	d13a      	bne.n	8003a18 <HAL_RCC_OscConfig+0x374>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d135      	bne.n	8003a18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ac:	4b7b      	ldr	r3, [pc, #492]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_OscConfig+0x320>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e2c1      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039c4:	f7fd fa12 	bl	8000dec <HAL_GetREVID>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d817      	bhi.n	8003a02 <HAL_RCC_OscConfig+0x35e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d108      	bne.n	80039ec <HAL_RCC_OscConfig+0x348>
 80039da:	4b70      	ldr	r3, [pc, #448]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039e2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 80039e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ea:	e075      	b.n	8003ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ec:	4b6b      	ldr	r3, [pc, #428]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	069b      	lsls	r3, r3, #26
 80039fa:	4968      	ldr	r1, [pc, #416]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a00:	e06a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a02:	4b66      	ldr	r3, [pc, #408]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	4962      	ldr	r1, [pc, #392]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a16:	e05f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d042      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a20:	4b5e      	ldr	r3, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5d      	ldr	r2, [pc, #372]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd f9ae 	bl	8000d8c <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a34:	f7fd f9aa 	bl	8000d8c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e280      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a46:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a52:	f7fd f9cb 	bl	8000dec <HAL_GetREVID>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d817      	bhi.n	8003a90 <HAL_RCC_OscConfig+0x3ec>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d108      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3d6>
 8003a68:	4b4c      	ldr	r3, [pc, #304]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a70:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a76:	6053      	str	r3, [r2, #4]
 8003a78:	e02e      	b.n	8003ad8 <HAL_RCC_OscConfig+0x434>
 8003a7a:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	069b      	lsls	r3, r3, #26
 8003a88:	4944      	ldr	r1, [pc, #272]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
 8003a8e:	e023      	b.n	8003ad8 <HAL_RCC_OscConfig+0x434>
 8003a90:	4b42      	ldr	r3, [pc, #264]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	493f      	ldr	r1, [pc, #252]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
 8003aa4:	e018      	b.n	8003ad8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd f96b 	bl	8000d8c <HAL_GetTick>
 8003ab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003aba:	f7fd f967 	bl	8000d8c <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e23d      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003acc:	4b33      	ldr	r3, [pc, #204]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d036      	beq.n	8003b52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aec:	4b2b      	ldr	r3, [pc, #172]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd f948 	bl	8000d8c <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd f944 	bl	8000d8c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e21a      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b12:	4b22      	ldr	r3, [pc, #136]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x45c>
 8003b1e:	e018      	b.n	8003b52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b24:	4a1d      	ldr	r2, [pc, #116]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd f92e 	bl	8000d8c <HAL_GetTick>
 8003b30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b34:	f7fd f92a 	bl	8000d8c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e200      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b46:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d039      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b66:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b72:	f7fd f90b 	bl	8000d8c <HAL_GetTick>
 8003b76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b7a:	f7fd f907 	bl	8000d8c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1dd      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b8c:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <HAL_RCC_OscConfig+0x4f8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x4d6>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x52e>
 8003b9a:	bf00      	nop
 8003b9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ba0:	4b9b      	ldr	r3, [pc, #620]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a9a      	ldr	r2, [pc, #616]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bac:	f7fd f8ee 	bl	8000d8c <HAL_GetTick>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb4:	f7fd f8ea 	bl	8000d8c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1c0      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bc6:	4b92      	ldr	r3, [pc, #584]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8081 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003be0:	4b8c      	ldr	r3, [pc, #560]	@ (8003e14 <HAL_RCC_OscConfig+0x770>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a8b      	ldr	r2, [pc, #556]	@ (8003e14 <HAL_RCC_OscConfig+0x770>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bec:	f7fd f8ce 	bl	8000d8c <HAL_GetTick>
 8003bf0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fd f8ca 	bl	8000d8c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1a0      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c06:	4b83      	ldr	r3, [pc, #524]	@ (8003e14 <HAL_RCC_OscConfig+0x770>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x584>
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c26:	e02d      	b.n	8003c84 <HAL_RCC_OscConfig+0x5e0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_OscConfig+0x5a6>
 8003c30:	4b77      	ldr	r3, [pc, #476]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c34:	4a76      	ldr	r2, [pc, #472]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3c:	4b74      	ldr	r3, [pc, #464]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a73      	ldr	r2, [pc, #460]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c42:	f023 0304 	bic.w	r3, r3, #4
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x5e0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c8>
 8003c52:	4b6f      	ldr	r3, [pc, #444]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a6e      	ldr	r2, [pc, #440]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a6b      	ldr	r2, [pc, #428]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x5e0>
 8003c6c:	4b68      	ldr	r3, [pc, #416]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a67      	ldr	r2, [pc, #412]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	4b65      	ldr	r3, [pc, #404]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a64      	ldr	r2, [pc, #400]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fd f87e 	bl	8000d8c <HAL_GetTick>
 8003c90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd f87a 	bl	8000d8c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e14e      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003caa:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x5f0>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd f868 	bl	8000d8c <HAL_GetTick>
 8003cbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd f864 	bl	8000d8c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e138      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 812d 	beq.w	8003f46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cec:	4b48      	ldr	r3, [pc, #288]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cf4:	2b18      	cmp	r3, #24
 8003cf6:	f000 80bd 	beq.w	8003e74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	f040 809e 	bne.w	8003e40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b42      	ldr	r3, [pc, #264]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a41      	ldr	r2, [pc, #260]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd f83c 	bl	8000d8c <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fd f838 	bl	8000d8c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e10e      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d2a:	4b39      	ldr	r3, [pc, #228]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d36:	4b36      	ldr	r3, [pc, #216]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d3a:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <HAL_RCC_OscConfig+0x774>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	4931      	ldr	r1, [pc, #196]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	3b01      	subs	r3, #1
 8003d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d80:	4923      	ldr	r1, [pc, #140]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d86:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	4a21      	ldr	r2, [pc, #132]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d92:	4b1f      	ldr	r3, [pc, #124]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d96:	4b21      	ldr	r3, [pc, #132]	@ (8003e1c <HAL_RCC_OscConfig+0x778>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d9e:	00d2      	lsls	r2, r2, #3
 8003da0:	491b      	ldr	r1, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	f023 020c 	bic.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	4917      	ldr	r1, [pc, #92]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003db8:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	f023 0202 	bic.w	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	4912      	ldr	r1, [pc, #72]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dca:	4b11      	ldr	r3, [pc, #68]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003de2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003dee:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	4a07      	ldr	r2, [pc, #28]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dfa:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <HAL_RCC_OscConfig+0x76c>)
 8003e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fc ffc1 	bl	8000d8c <HAL_GetTick>
 8003e0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e0c:	e011      	b.n	8003e32 <HAL_RCC_OscConfig+0x78e>
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58024800 	.word	0x58024800
 8003e18:	fffffc0c 	.word	0xfffffc0c
 8003e1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fc ffb4 	bl	8000d8c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e08a      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e32:	4b47      	ldr	r3, [pc, #284]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x77c>
 8003e3e:	e082      	b.n	8003f46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b43      	ldr	r3, [pc, #268]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a42      	ldr	r2, [pc, #264]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fc ff9e 	bl	8000d8c <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fc ff9a 	bl	8000d8c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e070      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e66:	4b3a      	ldr	r3, [pc, #232]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x7b0>
 8003e72:	e068      	b.n	8003f46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e74:	4b36      	ldr	r3, [pc, #216]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e7a:	4b35      	ldr	r3, [pc, #212]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d031      	beq.n	8003eec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0203 	and.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d12a      	bne.n	8003eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d122      	bne.n	8003eec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0a5b      	lsrs	r3, r3, #9
 8003eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d108      	bne.n	8003eec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	0e1b      	lsrs	r3, r3, #24
 8003ede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e02b      	b.n	8003f48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003ef0:	4b17      	ldr	r3, [pc, #92]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef4:	08db      	lsrs	r3, r3, #3
 8003ef6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003efa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d01f      	beq.n	8003f46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	4a11      	ldr	r2, [pc, #68]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f12:	f7fc ff3b 	bl	8000d8c <HAL_GetTick>
 8003f16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f18:	bf00      	nop
 8003f1a:	f7fc ff37 	bl	8000d8c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d0f9      	beq.n	8003f1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f26:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_RCC_OscConfig+0x8b0>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f32:	00d2      	lsls	r2, r2, #3
 8003f34:	4906      	ldr	r1, [pc, #24]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f3a:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	4a04      	ldr	r2, [pc, #16]	@ (8003f50 <HAL_RCC_OscConfig+0x8ac>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	@ 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	58024400 	.word	0x58024400
 8003f54:	ffff0007 	.word	0xffff0007

08003f58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e19c      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b87      	ldr	r3, [pc, #540]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 020f 	bic.w	r2, r3, #15
 8003f82:	4985      	ldr	r1, [pc, #532]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b83      	ldr	r3, [pc, #524]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e184      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	4b7b      	ldr	r3, [pc, #492]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d908      	bls.n	8003fca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fb8:	4b78      	ldr	r3, [pc, #480]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4975      	ldr	r1, [pc, #468]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	4b70      	ldr	r3, [pc, #448]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d908      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	496a      	ldr	r1, [pc, #424]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699a      	ldr	r2, [r3, #24]
 8004008:	4b64      	ldr	r3, [pc, #400]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004010:	429a      	cmp	r2, r3
 8004012:	d908      	bls.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004014:	4b61      	ldr	r3, [pc, #388]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	495e      	ldr	r1, [pc, #376]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004022:	4313      	orrs	r3, r2
 8004024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	4b59      	ldr	r3, [pc, #356]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800403e:	429a      	cmp	r2, r3
 8004040:	d908      	bls.n	8004054 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004042:	4b56      	ldr	r3, [pc, #344]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4953      	ldr	r1, [pc, #332]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004050:	4313      	orrs	r3, r2
 8004052:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	429a      	cmp	r2, r3
 800406e:	d908      	bls.n	8004082 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b4a      	ldr	r3, [pc, #296]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f023 020f 	bic.w	r2, r3, #15
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4947      	ldr	r1, [pc, #284]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 800407e:	4313      	orrs	r3, r2
 8004080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d055      	beq.n	800413a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800408e:	4b43      	ldr	r3, [pc, #268]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4940      	ldr	r1, [pc, #256]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 800409c:	4313      	orrs	r3, r2
 800409e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d107      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040a8:	4b3c      	ldr	r3, [pc, #240]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d121      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0f6      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040c0:	4b36      	ldr	r3, [pc, #216]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d115      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0ea      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040d8:	4b30      	ldr	r3, [pc, #192]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d109      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0de      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e8:	4b2c      	ldr	r3, [pc, #176]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0d6      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f8:	4b28      	ldr	r3, [pc, #160]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f023 0207 	bic.w	r2, r3, #7
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4925      	ldr	r1, [pc, #148]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800410a:	f7fc fe3f 	bl	8000d8c <HAL_GetTick>
 800410e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004110:	e00a      	b.n	8004128 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004112:	f7fc fe3b 	bl	8000d8c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0be      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004128:	4b1c      	ldr	r3, [pc, #112]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	429a      	cmp	r2, r3
 8004138:	d1eb      	bne.n	8004112 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	4b14      	ldr	r3, [pc, #80]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	429a      	cmp	r2, r3
 8004154:	d208      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004156:	4b11      	ldr	r3, [pc, #68]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f023 020f 	bic.w	r2, r3, #15
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	490e      	ldr	r1, [pc, #56]	@ (800419c <HAL_RCC_ClockConfig+0x244>)
 8004164:	4313      	orrs	r3, r2
 8004166:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d214      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 020f 	bic.w	r2, r3, #15
 800417e:	4906      	ldr	r1, [pc, #24]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <HAL_RCC_ClockConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e086      	b.n	80042a6 <HAL_RCC_ClockConfig+0x34e>
 8004198:	52002000 	.word	0x52002000
 800419c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	4b3f      	ldr	r3, [pc, #252]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d208      	bcs.n	80041ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041bc:	4b3c      	ldr	r3, [pc, #240]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	4939      	ldr	r1, [pc, #228]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d010      	beq.n	80041fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	4b34      	ldr	r3, [pc, #208]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d208      	bcs.n	80041fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041ea:	4b31      	ldr	r3, [pc, #196]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	492e      	ldr	r1, [pc, #184]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d010      	beq.n	800422a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	4b28      	ldr	r3, [pc, #160]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004214:	429a      	cmp	r2, r3
 8004216:	d208      	bcs.n	800422a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004218:	4b25      	ldr	r3, [pc, #148]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4922      	ldr	r1, [pc, #136]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 8004226:	4313      	orrs	r3, r2
 8004228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	4b1d      	ldr	r3, [pc, #116]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004242:	429a      	cmp	r2, r3
 8004244:	d208      	bcs.n	8004258 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004246:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4917      	ldr	r1, [pc, #92]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 8004254:	4313      	orrs	r3, r2
 8004256:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004258:	f000 f834 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	4912      	ldr	r1, [pc, #72]	@ (80042b4 <HAL_RCC_ClockConfig+0x35c>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004276:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <HAL_RCC_ClockConfig+0x358>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <HAL_RCC_ClockConfig+0x35c>)
 8004280:	5cd3      	ldrb	r3, [r2, r3]
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
 800428c:	4a0a      	ldr	r2, [pc, #40]	@ (80042b8 <HAL_RCC_ClockConfig+0x360>)
 800428e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004290:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <HAL_RCC_ClockConfig+0x364>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004296:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <HAL_RCC_ClockConfig+0x368>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fd2c 	bl	8000cf8 <HAL_InitTick>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	58024400 	.word	0x58024400
 80042b4:	08006168 	.word	0x08006168
 80042b8:	24000004 	.word	0x24000004
 80042bc:	24000000 	.word	0x24000000
 80042c0:	24000014 	.word	0x24000014

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	@ 0x24
 80042c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ca:	4bb3      	ldr	r3, [pc, #716]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042d2:	2b18      	cmp	r3, #24
 80042d4:	f200 8155 	bhi.w	8004582 <HAL_RCC_GetSysClockFreq+0x2be>
 80042d8:	a201      	add	r2, pc, #4	@ (adr r2, 80042e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004345 	.word	0x08004345
 80042e4:	08004583 	.word	0x08004583
 80042e8:	08004583 	.word	0x08004583
 80042ec:	08004583 	.word	0x08004583
 80042f0:	08004583 	.word	0x08004583
 80042f4:	08004583 	.word	0x08004583
 80042f8:	08004583 	.word	0x08004583
 80042fc:	08004583 	.word	0x08004583
 8004300:	0800436b 	.word	0x0800436b
 8004304:	08004583 	.word	0x08004583
 8004308:	08004583 	.word	0x08004583
 800430c:	08004583 	.word	0x08004583
 8004310:	08004583 	.word	0x08004583
 8004314:	08004583 	.word	0x08004583
 8004318:	08004583 	.word	0x08004583
 800431c:	08004583 	.word	0x08004583
 8004320:	08004371 	.word	0x08004371
 8004324:	08004583 	.word	0x08004583
 8004328:	08004583 	.word	0x08004583
 800432c:	08004583 	.word	0x08004583
 8004330:	08004583 	.word	0x08004583
 8004334:	08004583 	.word	0x08004583
 8004338:	08004583 	.word	0x08004583
 800433c:	08004583 	.word	0x08004583
 8004340:	08004377 	.word	0x08004377
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004344:	4b94      	ldr	r3, [pc, #592]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004350:	4b91      	ldr	r3, [pc, #580]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	4a90      	ldr	r2, [pc, #576]	@ (800459c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004362:	e111      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004364:	4b8d      	ldr	r3, [pc, #564]	@ (800459c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004366:	61bb      	str	r3, [r7, #24]
      break;
 8004368:	e10e      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800436a:	4b8d      	ldr	r3, [pc, #564]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800436c:	61bb      	str	r3, [r7, #24]
      break;
 800436e:	e10b      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004370:	4b8c      	ldr	r3, [pc, #560]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004372:	61bb      	str	r3, [r7, #24]
      break;
 8004374:	e108      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004376:	4b88      	ldr	r3, [pc, #544]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004380:	4b85      	ldr	r3, [pc, #532]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800438a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800438c:	4b82      	ldr	r3, [pc, #520]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004396:	4b80      	ldr	r3, [pc, #512]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439a:	08db      	lsrs	r3, r3, #3
 800439c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80e1 	beq.w	800457c <HAL_RCC_GetSysClockFreq+0x2b8>
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	f000 8083 	beq.w	80044c8 <HAL_RCC_GetSysClockFreq+0x204>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	f200 80a1 	bhi.w	800450c <HAL_RCC_GetSysClockFreq+0x248>
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x114>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d056      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x1c0>
 80043d6:	e099      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02d      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	4a6b      	ldr	r2, [pc, #428]	@ (800459c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
 80043f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b62      	ldr	r3, [pc, #392]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004422:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80045a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800443e:	e087      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80045ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b51      	ldr	r3, [pc, #324]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a02 	vldr	s12, [r7, #8]
 8004466:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80045a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004482:	e065      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80045b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b40      	ldr	r3, [pc, #256]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80044aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80045a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044c6:	e043      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80045b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b2f      	ldr	r3, [pc, #188]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80044ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80045a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800450a:	e021      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80045b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800451a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451e:	4b1e      	ldr	r3, [pc, #120]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004532:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80045a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800454e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004550:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	0a5b      	lsrs	r3, r3, #9
 8004556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800455a:	3301      	adds	r3, #1
 800455c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004568:	edd7 6a07 	vldr	s13, [r7, #28]
 800456c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004574:	ee17 3a90 	vmov	r3, s15
 8004578:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800457a:	e005      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
      break;
 8004580:	e002      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004582:	4b07      	ldr	r3, [pc, #28]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004584:	61bb      	str	r3, [r7, #24]
      break;
 8004586:	bf00      	nop
  }

  return sysclockfreq;
 8004588:	69bb      	ldr	r3, [r7, #24]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	@ 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
 800459c:	03d09000 	.word	0x03d09000
 80045a0:	003d0900 	.word	0x003d0900
 80045a4:	007a1200 	.word	0x007a1200
 80045a8:	46000000 	.word	0x46000000
 80045ac:	4c742400 	.word	0x4c742400
 80045b0:	4a742400 	.word	0x4a742400
 80045b4:	4af42400 	.word	0x4af42400

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e049      	b.n	800465e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc f9fe 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fdb8 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e049      	b.n	800470c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f841 	bl	8004714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fd61 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d109      	bne.n	8004754 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	e03c      	b.n	80047ce <HAL_TIM_PWM_Start_DMA+0xa6>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d109      	bne.n	800476e <HAL_TIM_PWM_Start_DMA+0x46>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e02f      	b.n	80047ce <HAL_TIM_PWM_Start_DMA+0xa6>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d109      	bne.n	8004788 <HAL_TIM_PWM_Start_DMA+0x60>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e022      	b.n	80047ce <HAL_TIM_PWM_Start_DMA+0xa6>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d109      	bne.n	80047a2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	bf0c      	ite	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	2300      	movne	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	e015      	b.n	80047ce <HAL_TIM_PWM_Start_DMA+0xa6>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d109      	bne.n	80047bc <HAL_TIM_PWM_Start_DMA+0x94>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e008      	b.n	80047ce <HAL_TIM_PWM_Start_DMA+0xa6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	e1b0      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e03c      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x142>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d109      	bne.n	800480a <HAL_TIM_PWM_Start_DMA+0xe2>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e02f      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x142>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d109      	bne.n	8004824 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	e022      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x142>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d109      	bne.n	800483e <HAL_TIM_PWM_Start_DMA+0x116>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e015      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x142>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d109      	bne.n	8004858 <HAL_TIM_PWM_Start_DMA+0x130>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e008      	b.n	800486a <HAL_TIM_PWM_Start_DMA+0x142>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d034      	beq.n	80048d8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_TIM_PWM_Start_DMA+0x152>
 8004874:	887b      	ldrh	r3, [r7, #2]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e15c      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start_DMA+0x166>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800488c:	e026      	b.n	80048dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start_DMA+0x176>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800489c:	e01e      	b.n	80048dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start_DMA+0x186>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ac:	e016      	b.n	80048dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start_DMA+0x196>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048bc:	e00e      	b.n	80048dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048cc:	e006      	b.n	80048dc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048d6:	e001      	b.n	80048dc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e12d      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	f200 80ae 	bhi.w	8004a40 <HAL_TIM_PWM_Start_DMA+0x318>
 80048e4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ea:	bf00      	nop
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004a41 	.word	0x08004a41
 80048f4:	08004a41 	.word	0x08004a41
 80048f8:	08004a41 	.word	0x08004a41
 80048fc:	08004969 	.word	0x08004969
 8004900:	08004a41 	.word	0x08004a41
 8004904:	08004a41 	.word	0x08004a41
 8004908:	08004a41 	.word	0x08004a41
 800490c:	080049b1 	.word	0x080049b1
 8004910:	08004a41 	.word	0x08004a41
 8004914:	08004a41 	.word	0x08004a41
 8004918:	08004a41 	.word	0x08004a41
 800491c:	080049f9 	.word	0x080049f9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	4a86      	ldr	r2, [pc, #536]	@ (8004b40 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004926:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	4a85      	ldr	r2, [pc, #532]	@ (8004b44 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	4a84      	ldr	r2, [pc, #528]	@ (8004b48 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004936:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3334      	adds	r3, #52	@ 0x34
 8004944:	461a      	mov	r2, r3
 8004946:	887b      	ldrh	r3, [r7, #2]
 8004948:	f7fc fec8 	bl	80016dc <HAL_DMA_Start_IT>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0f0      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004964:	60da      	str	r2, [r3, #12]
      break;
 8004966:	e06e      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	4a74      	ldr	r2, [pc, #464]	@ (8004b40 <HAL_TIM_PWM_Start_DMA+0x418>)
 800496e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	4a73      	ldr	r2, [pc, #460]	@ (8004b44 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	4a72      	ldr	r2, [pc, #456]	@ (8004b48 <HAL_TIM_PWM_Start_DMA+0x420>)
 800497e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3338      	adds	r3, #56	@ 0x38
 800498c:	461a      	mov	r2, r3
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	f7fc fea4 	bl	80016dc <HAL_DMA_Start_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0cc      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049ac:	60da      	str	r2, [r3, #12]
      break;
 80049ae:	e04a      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	4a62      	ldr	r2, [pc, #392]	@ (8004b40 <HAL_TIM_PWM_Start_DMA+0x418>)
 80049b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	4a61      	ldr	r2, [pc, #388]	@ (8004b44 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	4a60      	ldr	r2, [pc, #384]	@ (8004b48 <HAL_TIM_PWM_Start_DMA+0x420>)
 80049c6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	333c      	adds	r3, #60	@ 0x3c
 80049d4:	461a      	mov	r2, r3
 80049d6:	887b      	ldrh	r3, [r7, #2]
 80049d8:	f7fc fe80 	bl	80016dc <HAL_DMA_Start_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0a8      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049f4:	60da      	str	r2, [r3, #12]
      break;
 80049f6:	e026      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_TIM_PWM_Start_DMA+0x418>)
 80049fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	4a4f      	ldr	r2, [pc, #316]	@ (8004b44 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8004b48 <HAL_TIM_PWM_Start_DMA+0x420>)
 8004a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3340      	adds	r3, #64	@ 0x40
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	f7fc fe5c 	bl	80016dc <HAL_DMA_Start_IT>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e084      	b.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a3c:	60da      	str	r2, [r3, #12]
      break;
 8004a3e:	e002      	b.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d174      	bne.n	8004b36 <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2201      	movs	r2, #1
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 ff9d 	bl	8005994 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b4c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x364>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a39      	ldr	r2, [pc, #228]	@ (8004b50 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x364>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a38      	ldr	r2, [pc, #224]	@ (8004b54 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x364>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a36      	ldr	r2, [pc, #216]	@ (8004b58 <HAL_TIM_PWM_Start_DMA+0x430>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIM_PWM_Start_DMA+0x364>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a35      	ldr	r2, [pc, #212]	@ (8004b5c <HAL_TIM_PWM_Start_DMA+0x434>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_PWM_Start_DMA+0x368>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004a90:	2300      	movs	r3, #0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a28      	ldr	r2, [pc, #160]	@ (8004b4c <HAL_TIM_PWM_Start_DMA+0x424>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab8:	d01d      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a28      	ldr	r2, [pc, #160]	@ (8004b60 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a25      	ldr	r2, [pc, #148]	@ (8004b68 <HAL_TIM_PWM_Start_DMA+0x440>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b50 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a21      	ldr	r2, [pc, #132]	@ (8004b6c <HAL_TIM_PWM_Start_DMA+0x444>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x3ce>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d115      	bne.n	8004b22 <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <HAL_TIM_PWM_Start_DMA+0x448>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d015      	beq.n	8004b34 <HAL_TIM_PWM_Start_DMA+0x40c>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0e:	d011      	beq.n	8004b34 <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	e008      	b.n	8004b34 <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e000      	b.n	8004b36 <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	0800505b 	.word	0x0800505b
 8004b44:	08005103 	.word	0x08005103
 8004b48:	08004fc9 	.word	0x08004fc9
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40000c00 	.word	0x40000c00
 8004b6c:	40001800 	.word	0x40001800
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0ff      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b14      	cmp	r3, #20
 8004b9e:	f200 80f0 	bhi.w	8004d82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004d83 	.word	0x08004d83
 8004bb0:	08004d83 	.word	0x08004d83
 8004bb4:	08004d83 	.word	0x08004d83
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004d83 	.word	0x08004d83
 8004bc0:	08004d83 	.word	0x08004d83
 8004bc4:	08004d83 	.word	0x08004d83
 8004bc8:	08004c7f 	.word	0x08004c7f
 8004bcc:	08004d83 	.word	0x08004d83
 8004bd0:	08004d83 	.word	0x08004d83
 8004bd4:	08004d83 	.word	0x08004d83
 8004bd8:	08004cbf 	.word	0x08004cbf
 8004bdc:	08004d83 	.word	0x08004d83
 8004be0:	08004d83 	.word	0x08004d83
 8004be4:	08004d83 	.word	0x08004d83
 8004be8:	08004d01 	.word	0x08004d01
 8004bec:	08004d83 	.word	0x08004d83
 8004bf0:	08004d83 	.word	0x08004d83
 8004bf4:	08004d83 	.word	0x08004d83
 8004bf8:	08004d41 	.word	0x08004d41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fb52 	bl	80052ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0208 	orr.w	r2, r2, #8
 8004c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0204 	bic.w	r2, r2, #4
 8004c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	619a      	str	r2, [r3, #24]
      break;
 8004c3a:	e0a5      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fbc2 	bl	80053cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	021a      	lsls	r2, r3, #8
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	619a      	str	r2, [r3, #24]
      break;
 8004c7c:	e084      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fc2b 	bl	80054e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0208 	orr.w	r2, r2, #8
 8004c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0204 	bic.w	r2, r2, #4
 8004ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69d9      	ldr	r1, [r3, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]
      break;
 8004cbc:	e064      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fc93 	bl	80055f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69d9      	ldr	r1, [r3, #28]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	021a      	lsls	r2, r3, #8
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	61da      	str	r2, [r3, #28]
      break;
 8004cfe:	e043      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fcdc 	bl	80056c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d3e:	e023      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fd20 	bl	800578c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d80:	e002      	b.n	8004d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	75fb      	strb	r3, [r7, #23]
      break;
 8004d86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop

08004d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	2300      	movs	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_ConfigClockSource+0x1c>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e0dc      	b.n	8004f72 <HAL_TIM_ConfigClockSource+0x1d6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f7c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	f000 80a9 	beq.w	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004df4:	4a62      	ldr	r2, [pc, #392]	@ (8004f80 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	f200 80ae 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004dfc:	4a61      	ldr	r2, [pc, #388]	@ (8004f84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	f000 80a1 	beq.w	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e04:	4a5f      	ldr	r2, [pc, #380]	@ (8004f84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	f200 80a6 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8004f88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	f000 8099 	beq.w	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e14:	4a5c      	ldr	r2, [pc, #368]	@ (8004f88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	f200 809e 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e20:	f000 8091 	beq.w	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e28:	f200 8096 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e30:	f000 8089 	beq.w	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e38:	f200 808e 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e40:	d03e      	beq.n	8004ec0 <HAL_TIM_ConfigClockSource+0x124>
 8004e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e46:	f200 8087 	bhi.w	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e4e:	f000 8086 	beq.w	8004f5e <HAL_TIM_ConfigClockSource+0x1c2>
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e56:	d87f      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e58:	2b70      	cmp	r3, #112	@ 0x70
 8004e5a:	d01a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xf6>
 8004e5c:	2b70      	cmp	r3, #112	@ 0x70
 8004e5e:	d87b      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e60:	2b60      	cmp	r3, #96	@ 0x60
 8004e62:	d050      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x16a>
 8004e64:	2b60      	cmp	r3, #96	@ 0x60
 8004e66:	d877      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e68:	2b50      	cmp	r3, #80	@ 0x50
 8004e6a:	d03c      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x14a>
 8004e6c:	2b50      	cmp	r3, #80	@ 0x50
 8004e6e:	d873      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e70:	2b40      	cmp	r3, #64	@ 0x40
 8004e72:	d058      	beq.n	8004f26 <HAL_TIM_ConfigClockSource+0x18a>
 8004e74:	2b40      	cmp	r3, #64	@ 0x40
 8004e76:	d86f      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e78:	2b30      	cmp	r3, #48	@ 0x30
 8004e7a:	d064      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e7c:	2b30      	cmp	r3, #48	@ 0x30
 8004e7e:	d86b      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d060      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d867      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d05c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d05a      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e90:	e062      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	f000 fd57 	bl	8005954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	609a      	str	r2, [r3, #8]
      break;
 8004ebe:	e04f      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	f000 fd40 	bl	8005954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ee2:	609a      	str	r2, [r3, #8]
      break;
 8004ee4:	e03c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 fcb0 	bl	8005858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2150      	movs	r1, #80	@ 0x50
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fd0a 	bl	8005918 <TIM_ITRx_SetConfig>
      break;
 8004f04:	e02c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f12:	461a      	mov	r2, r3
 8004f14:	f000 fccf 	bl	80058b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2160      	movs	r1, #96	@ 0x60
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fcfa 	bl	8005918 <TIM_ITRx_SetConfig>
      break;
 8004f24:	e01c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f32:	461a      	mov	r2, r3
 8004f34:	f000 fc90 	bl	8005858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2140      	movs	r1, #64	@ 0x40
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fcea 	bl	8005918 <TIM_ITRx_SetConfig>
      break;
 8004f44:	e00c      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fce1 	bl	8005918 <TIM_ITRx_SetConfig>
      break;
 8004f56:	e003      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f5c:	e000      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	ffceff88 	.word	0xffceff88
 8004f80:	00100040 	.word	0x00100040
 8004f84:	00100030 	.word	0x00100030
 8004f88:	00100020 	.word	0x00100020

08004f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d107      	bne.n	8004ff0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fee:	e02a      	b.n	8005046 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d107      	bne.n	800500a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005008:	e01d      	b.n	8005046 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d107      	bne.n	8005024 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2204      	movs	r2, #4
 8005018:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005022:	e010      	b.n	8005046 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d107      	bne.n	800503e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2208      	movs	r2, #8
 8005032:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503c:	e003      	b.n	8005046 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff ffb4 	bl	8004fb4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	771a      	strb	r2, [r3, #28]
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005066:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d10b      	bne.n	800508a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d136      	bne.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005088:	e031      	b.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d10b      	bne.n	80050ac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2202      	movs	r2, #2
 8005098:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d125      	bne.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050aa:	e020      	b.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d10b      	bne.n	80050ce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2204      	movs	r2, #4
 80050ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d114      	bne.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050cc:	e00f      	b.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d10a      	bne.n	80050ee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2208      	movs	r2, #8
 80050dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff4c 	bl	8004f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
}
 80050fa:	bf00      	nop
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d103      	bne.n	8005122 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	771a      	strb	r2, [r3, #28]
 8005120:	e019      	b.n	8005156 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	d103      	bne.n	8005134 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2202      	movs	r2, #2
 8005130:	771a      	strb	r2, [r3, #28]
 8005132:	e010      	b.n	8005156 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d103      	bne.n	8005146 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2204      	movs	r2, #4
 8005142:	771a      	strb	r2, [r3, #28]
 8005144:	e007      	b.n	8005156 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d102      	bne.n	8005156 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2208      	movs	r2, #8
 8005154:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff22 	bl	8004fa0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	771a      	strb	r2, [r3, #28]
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a43      	ldr	r2, [pc, #268]	@ (800528c <TIM_Base_SetConfig+0x120>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a40      	ldr	r2, [pc, #256]	@ (8005290 <TIM_Base_SetConfig+0x124>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3f      	ldr	r2, [pc, #252]	@ (8005294 <TIM_Base_SetConfig+0x128>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3e      	ldr	r2, [pc, #248]	@ (8005298 <TIM_Base_SetConfig+0x12c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3d      	ldr	r2, [pc, #244]	@ (800529c <TIM_Base_SetConfig+0x130>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a32      	ldr	r2, [pc, #200]	@ (800528c <TIM_Base_SetConfig+0x120>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01f      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051cc:	d01b      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005290 <TIM_Base_SetConfig+0x124>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d017      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005294 <TIM_Base_SetConfig+0x128>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <TIM_Base_SetConfig+0x12c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00f      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <TIM_Base_SetConfig+0x130>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2b      	ldr	r2, [pc, #172]	@ (80052a0 <TIM_Base_SetConfig+0x134>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2a      	ldr	r2, [pc, #168]	@ (80052a4 <TIM_Base_SetConfig+0x138>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_Base_SetConfig+0x9a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a29      	ldr	r2, [pc, #164]	@ (80052a8 <TIM_Base_SetConfig+0x13c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d108      	bne.n	8005218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800520c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a14      	ldr	r2, [pc, #80]	@ (800528c <TIM_Base_SetConfig+0x120>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_Base_SetConfig+0xf2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <TIM_Base_SetConfig+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0xf2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <TIM_Base_SetConfig+0x134>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0xf2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a14      	ldr	r2, [pc, #80]	@ (80052a4 <TIM_Base_SetConfig+0x138>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0xf2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a13      	ldr	r2, [pc, #76]	@ (80052a8 <TIM_Base_SetConfig+0x13c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d103      	bne.n	8005266 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40010000 	.word	0x40010000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40010400 	.word	0x40010400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 0201 	bic.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4b37      	ldr	r3, [pc, #220]	@ (80053b4 <TIM_OC1_SetConfig+0x108>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 0302 	bic.w	r3, r3, #2
 80052f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <TIM_OC1_SetConfig+0x10c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00f      	beq.n	8005328 <TIM_OC1_SetConfig+0x7c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a2c      	ldr	r2, [pc, #176]	@ (80053bc <TIM_OC1_SetConfig+0x110>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_OC1_SetConfig+0x7c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a2b      	ldr	r2, [pc, #172]	@ (80053c0 <TIM_OC1_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_OC1_SetConfig+0x7c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a2a      	ldr	r2, [pc, #168]	@ (80053c4 <TIM_OC1_SetConfig+0x118>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_OC1_SetConfig+0x7c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a29      	ldr	r2, [pc, #164]	@ (80053c8 <TIM_OC1_SetConfig+0x11c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d10c      	bne.n	8005342 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0308 	bic.w	r3, r3, #8
 800532e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f023 0304 	bic.w	r3, r3, #4
 8005340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <TIM_OC1_SetConfig+0x10c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_OC1_SetConfig+0xbe>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1b      	ldr	r2, [pc, #108]	@ (80053bc <TIM_OC1_SetConfig+0x110>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_OC1_SetConfig+0xbe>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1a      	ldr	r2, [pc, #104]	@ (80053c0 <TIM_OC1_SetConfig+0x114>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_OC1_SetConfig+0xbe>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a19      	ldr	r2, [pc, #100]	@ (80053c4 <TIM_OC1_SetConfig+0x118>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_OC1_SetConfig+0xbe>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a18      	ldr	r2, [pc, #96]	@ (80053c8 <TIM_OC1_SetConfig+0x11c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d111      	bne.n	800538e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	621a      	str	r2, [r3, #32]
}
 80053a8:	bf00      	nop
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	fffeff8f 	.word	0xfffeff8f
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40010400 	.word	0x40010400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0210 	bic.w	r2, r3, #16
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4b34      	ldr	r3, [pc, #208]	@ (80054c8 <TIM_OC2_SetConfig+0xfc>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0320 	bic.w	r3, r3, #32
 8005416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a29      	ldr	r2, [pc, #164]	@ (80054cc <TIM_OC2_SetConfig+0x100>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_OC2_SetConfig+0x68>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a28      	ldr	r2, [pc, #160]	@ (80054d0 <TIM_OC2_SetConfig+0x104>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10d      	bne.n	8005450 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800544e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <TIM_OC2_SetConfig+0x100>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00f      	beq.n	8005478 <TIM_OC2_SetConfig+0xac>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <TIM_OC2_SetConfig+0x104>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_OC2_SetConfig+0xac>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <TIM_OC2_SetConfig+0x108>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_OC2_SetConfig+0xac>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <TIM_OC2_SetConfig+0x10c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC2_SetConfig+0xac>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <TIM_OC2_SetConfig+0x110>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d113      	bne.n	80054a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800547e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	621a      	str	r2, [r3, #32]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	feff8fff 	.word	0xfeff8fff
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800

080054e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4b33      	ldr	r3, [pc, #204]	@ (80055d8 <TIM_OC3_SetConfig+0xf8>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a28      	ldr	r2, [pc, #160]	@ (80055dc <TIM_OC3_SetConfig+0xfc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC3_SetConfig+0x66>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a27      	ldr	r2, [pc, #156]	@ (80055e0 <TIM_OC3_SetConfig+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10d      	bne.n	8005562 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800554c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1d      	ldr	r2, [pc, #116]	@ (80055dc <TIM_OC3_SetConfig+0xfc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_OC3_SetConfig+0xaa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <TIM_OC3_SetConfig+0x100>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_OC3_SetConfig+0xaa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <TIM_OC3_SetConfig+0x104>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_OC3_SetConfig+0xaa>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a1a      	ldr	r2, [pc, #104]	@ (80055e8 <TIM_OC3_SetConfig+0x108>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC3_SetConfig+0xaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a19      	ldr	r2, [pc, #100]	@ (80055ec <TIM_OC3_SetConfig+0x10c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d113      	bne.n	80055b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	621a      	str	r2, [r3, #32]
}
 80055cc:	bf00      	nop
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	fffeff8f 	.word	0xfffeff8f
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40010400 	.word	0x40010400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800

080055f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4b24      	ldr	r3, [pc, #144]	@ (80056ac <TIM_OC4_SetConfig+0xbc>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800563a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a19      	ldr	r2, [pc, #100]	@ (80056b0 <TIM_OC4_SetConfig+0xc0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_OC4_SetConfig+0x80>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <TIM_OC4_SetConfig+0xc4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_OC4_SetConfig+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a17      	ldr	r2, [pc, #92]	@ (80056b8 <TIM_OC4_SetConfig+0xc8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC4_SetConfig+0x80>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <TIM_OC4_SetConfig+0xcc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC4_SetConfig+0x80>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <TIM_OC4_SetConfig+0xd0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	feff8fff 	.word	0xfeff8fff
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800

080056c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <TIM_OC5_SetConfig+0xb0>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005704:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a18      	ldr	r2, [pc, #96]	@ (8005778 <TIM_OC5_SetConfig+0xb4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_OC5_SetConfig+0x76>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a17      	ldr	r2, [pc, #92]	@ (800577c <TIM_OC5_SetConfig+0xb8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_OC5_SetConfig+0x76>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a16      	ldr	r2, [pc, #88]	@ (8005780 <TIM_OC5_SetConfig+0xbc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_OC5_SetConfig+0x76>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <TIM_OC5_SetConfig+0xc0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC5_SetConfig+0x76>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a14      	ldr	r2, [pc, #80]	@ (8005788 <TIM_OC5_SetConfig+0xc4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d109      	bne.n	800574e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005740:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	fffeff8f 	.word	0xfffeff8f
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800

0800578c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4b22      	ldr	r3, [pc, #136]	@ (8005840 <TIM_OC6_SetConfig+0xb4>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	051b      	lsls	r3, r3, #20
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a19      	ldr	r2, [pc, #100]	@ (8005844 <TIM_OC6_SetConfig+0xb8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC6_SetConfig+0x78>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a18      	ldr	r2, [pc, #96]	@ (8005848 <TIM_OC6_SetConfig+0xbc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC6_SetConfig+0x78>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a17      	ldr	r2, [pc, #92]	@ (800584c <TIM_OC6_SetConfig+0xc0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC6_SetConfig+0x78>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a16      	ldr	r2, [pc, #88]	@ (8005850 <TIM_OC6_SetConfig+0xc4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC6_SetConfig+0x78>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <TIM_OC6_SetConfig+0xc8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	029b      	lsls	r3, r3, #10
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	feff8fff 	.word	0xfeff8fff
 8005844:	40010000 	.word	0x40010000
 8005848:	40010400 	.word	0x40010400
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800

08005858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 030a 	bic.w	r3, r3, #10
 8005894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b087      	sub	sp, #28
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f023 0210 	bic.w	r2, r3, #16
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	031b      	lsls	r3, r3, #12
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <TIM_ITRx_SetConfig+0x38>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	f043 0307 	orr.w	r3, r3, #7
 800593a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	609a      	str	r2, [r3, #8]
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	ffcfff8f 	.word	0xffcfff8f

08005954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800596e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	021a      	lsls	r2, r3, #8
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	431a      	orrs	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	371c      	adds	r7, #28
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	2201      	movs	r2, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1a      	ldr	r2, [r3, #32]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	401a      	ands	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	fa01 f303 	lsl.w	r3, r1, r3
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e06d      	b.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d022      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	d01d      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d018      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1a      	ldr	r2, [pc, #104]	@ (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00e      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	@ (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40001800 	.word	0x40001800
 8005af8:	40014000 	.word	0x40014000

08005afc <memset>:
 8005afc:	4402      	add	r2, r0
 8005afe:	4603      	mov	r3, r0
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d100      	bne.n	8005b06 <memset+0xa>
 8005b04:	4770      	bx	lr
 8005b06:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0a:	e7f9      	b.n	8005b00 <memset+0x4>

08005b0c <__errno>:
 8005b0c:	4b01      	ldr	r3, [pc, #4]	@ (8005b14 <__errno+0x8>)
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2400001c 	.word	0x2400001c

08005b18 <__libc_init_array>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b50 <__libc_init_array+0x38>)
 8005b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b54 <__libc_init_array+0x3c>)
 8005b1e:	1b64      	subs	r4, r4, r5
 8005b20:	10a4      	asrs	r4, r4, #2
 8005b22:	2600      	movs	r6, #0
 8005b24:	42a6      	cmp	r6, r4
 8005b26:	d109      	bne.n	8005b3c <__libc_init_array+0x24>
 8005b28:	4d0b      	ldr	r5, [pc, #44]	@ (8005b58 <__libc_init_array+0x40>)
 8005b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b5c <__libc_init_array+0x44>)
 8005b2c:	f000 fb10 	bl	8006150 <_init>
 8005b30:	1b64      	subs	r4, r4, r5
 8005b32:	10a4      	asrs	r4, r4, #2
 8005b34:	2600      	movs	r6, #0
 8005b36:	42a6      	cmp	r6, r4
 8005b38:	d105      	bne.n	8005b46 <__libc_init_array+0x2e>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b40:	4798      	blx	r3
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7ee      	b.n	8005b24 <__libc_init_array+0xc>
 8005b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4a:	4798      	blx	r3
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	e7f2      	b.n	8005b36 <__libc_init_array+0x1e>
 8005b50:	08007a40 	.word	0x08007a40
 8005b54:	08007a40 	.word	0x08007a40
 8005b58:	08007a40 	.word	0x08007a40
 8005b5c:	08007a44 	.word	0x08007a44

08005b60 <checkint>:
 8005b60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b64:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	b570      	push	{r4, r5, r6, lr}
 8005b6c:	dd2a      	ble.n	8005bc4 <checkint+0x64>
 8005b6e:	f240 4333 	movw	r3, #1075	@ 0x433
 8005b72:	429a      	cmp	r2, r3
 8005b74:	dc24      	bgt.n	8005bc0 <checkint+0x60>
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	f1a3 0620 	sub.w	r6, r3, #32
 8005b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b80:	fa02 f403 	lsl.w	r4, r2, r3
 8005b84:	fa02 f606 	lsl.w	r6, r2, r6
 8005b88:	f1c3 0520 	rsb	r5, r3, #32
 8005b8c:	fa22 f505 	lsr.w	r5, r2, r5
 8005b90:	4334      	orrs	r4, r6
 8005b92:	432c      	orrs	r4, r5
 8005b94:	409a      	lsls	r2, r3
 8005b96:	ea20 0202 	bic.w	r2, r0, r2
 8005b9a:	ea21 0404 	bic.w	r4, r1, r4
 8005b9e:	4322      	orrs	r2, r4
 8005ba0:	f1a3 0420 	sub.w	r4, r3, #32
 8005ba4:	f1c3 0220 	rsb	r2, r3, #32
 8005ba8:	d10c      	bne.n	8005bc4 <checkint+0x64>
 8005baa:	40d8      	lsrs	r0, r3
 8005bac:	fa01 f302 	lsl.w	r3, r1, r2
 8005bb0:	4318      	orrs	r0, r3
 8005bb2:	40e1      	lsrs	r1, r4
 8005bb4:	4308      	orrs	r0, r1
 8005bb6:	f000 0001 	and.w	r0, r0, #1
 8005bba:	f1d0 0002 	rsbs	r0, r0, #2
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	2002      	movs	r0, #2
 8005bc2:	e7fc      	b.n	8005bbe <checkint+0x5e>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e7fa      	b.n	8005bbe <checkint+0x5e>

08005bc8 <pow>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	ee10 4a90 	vmov	r4, s1
 8005bd0:	ed2d 8b0a 	vpush	{d8-d12}
 8005bd4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8005bd8:	ee11 aa90 	vmov	sl, s3
 8005bdc:	f108 32ff 	add.w	r2, r8, #4294967295
 8005be0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8005be4:	429a      	cmp	r2, r3
 8005be6:	ee10 5a10 	vmov	r5, s0
 8005bea:	ee11 0a10 	vmov	r0, s2
 8005bee:	b087      	sub	sp, #28
 8005bf0:	46c4      	mov	ip, r8
 8005bf2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8005bf6:	d806      	bhi.n	8005c06 <pow+0x3e>
 8005bf8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8005bfc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8005c00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c02:	f240 8157 	bls.w	8005eb4 <pow+0x2ec>
 8005c06:	1802      	adds	r2, r0, r0
 8005c08:	eb4a 010a 	adc.w	r1, sl, sl
 8005c0c:	f06f 0b01 	mvn.w	fp, #1
 8005c10:	1e57      	subs	r7, r2, #1
 8005c12:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005c16:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8005c1a:	45bb      	cmp	fp, r7
 8005c1c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8005c20:	d242      	bcs.n	8005ca8 <pow+0xe0>
 8005c22:	ea52 0301 	orrs.w	r3, r2, r1
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	d10c      	bne.n	8005c46 <pow+0x7e>
 8005c2c:	196d      	adds	r5, r5, r5
 8005c2e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8005c32:	4164      	adcs	r4, r4
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005c3a:	41a3      	sbcs	r3, r4
 8005c3c:	f0c0 808f 	bcc.w	8005d5e <pow+0x196>
 8005c40:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005c44:	e02b      	b.n	8005c9e <pow+0xd6>
 8005c46:	4ed4      	ldr	r6, [pc, #848]	@ (8005f98 <pow+0x3d0>)
 8005c48:	42b4      	cmp	r4, r6
 8005c4a:	bf08      	it	eq
 8005c4c:	429d      	cmpeq	r5, r3
 8005c4e:	d109      	bne.n	8005c64 <pow+0x9c>
 8005c50:	1800      	adds	r0, r0, r0
 8005c52:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8005c56:	eb4a 0a0a 	adc.w	sl, sl, sl
 8005c5a:	4283      	cmp	r3, r0
 8005c5c:	4bcf      	ldr	r3, [pc, #828]	@ (8005f9c <pow+0x3d4>)
 8005c5e:	eb73 030a 	sbcs.w	r3, r3, sl
 8005c62:	e7eb      	b.n	8005c3c <pow+0x74>
 8005c64:	196d      	adds	r5, r5, r5
 8005c66:	48ce      	ldr	r0, [pc, #824]	@ (8005fa0 <pow+0x3d8>)
 8005c68:	4164      	adcs	r4, r4
 8005c6a:	42ab      	cmp	r3, r5
 8005c6c:	eb70 0604 	sbcs.w	r6, r0, r4
 8005c70:	d375      	bcc.n	8005d5e <pow+0x196>
 8005c72:	4281      	cmp	r1, r0
 8005c74:	bf08      	it	eq
 8005c76:	429a      	cmpeq	r2, r3
 8005c78:	d171      	bne.n	8005d5e <pow+0x196>
 8005c7a:	4aca      	ldr	r2, [pc, #808]	@ (8005fa4 <pow+0x3dc>)
 8005c7c:	4294      	cmp	r4, r2
 8005c7e:	bf08      	it	eq
 8005c80:	429d      	cmpeq	r5, r3
 8005c82:	d0dd      	beq.n	8005c40 <pow+0x78>
 8005c84:	4294      	cmp	r4, r2
 8005c86:	ea6f 0a0a 	mvn.w	sl, sl
 8005c8a:	bf34      	ite	cc
 8005c8c:	2400      	movcc	r4, #0
 8005c8e:	2401      	movcs	r4, #1
 8005c90:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8005c94:	4554      	cmp	r4, sl
 8005c96:	f040 81dc 	bne.w	8006052 <pow+0x48a>
 8005c9a:	ee21 0b01 	vmul.f64	d0, d1, d1
 8005c9e:	b007      	add	sp, #28
 8005ca0:	ecbd 8b0a 	vpop	{d8-d12}
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	196f      	adds	r7, r5, r5
 8005caa:	eb44 0904 	adc.w	r9, r4, r4
 8005cae:	1e7a      	subs	r2, r7, #1
 8005cb0:	f169 0300 	sbc.w	r3, r9, #0
 8005cb4:	4593      	cmp	fp, r2
 8005cb6:	eb7e 0303 	sbcs.w	r3, lr, r3
 8005cba:	d225      	bcs.n	8005d08 <pow+0x140>
 8005cbc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8005cc0:	2c00      	cmp	r4, #0
 8005cc2:	da13      	bge.n	8005cec <pow+0x124>
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	f7ff ff4b 	bl	8005b60 <checkint>
 8005cca:	2801      	cmp	r0, #1
 8005ccc:	d10e      	bne.n	8005cec <pow+0x124>
 8005cce:	eeb1 0b40 	vneg.f64	d0, d0
 8005cd2:	ea57 0909 	orrs.w	r9, r7, r9
 8005cd6:	d10b      	bne.n	8005cf0 <pow+0x128>
 8005cd8:	f1ba 0f00 	cmp.w	sl, #0
 8005cdc:	dadf      	bge.n	8005c9e <pow+0xd6>
 8005cde:	b007      	add	sp, #28
 8005ce0:	ecbd 8b0a 	vpop	{d8-d12}
 8005ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	f000 b9ee 	b.w	80060c8 <__math_divzero>
 8005cec:	2000      	movs	r0, #0
 8005cee:	e7f0      	b.n	8005cd2 <pow+0x10a>
 8005cf0:	f1ba 0f00 	cmp.w	sl, #0
 8005cf4:	dad3      	bge.n	8005c9e <pow+0xd6>
 8005cf6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005cfa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8005cfe:	ed8d 7b00 	vstr	d7, [sp]
 8005d02:	ed9d 0b00 	vldr	d0, [sp]
 8005d06:	e7ca      	b.n	8005c9e <pow+0xd6>
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	da2b      	bge.n	8005d64 <pow+0x19c>
 8005d0c:	4651      	mov	r1, sl
 8005d0e:	f7ff ff27 	bl	8005b60 <checkint>
 8005d12:	b930      	cbnz	r0, 8005d22 <pow+0x15a>
 8005d14:	b007      	add	sp, #28
 8005d16:	ecbd 8b0a 	vpop	{d8-d12}
 8005d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1e:	f000 b9eb 	b.w	80060f8 <__math_invalid>
 8005d22:	1e41      	subs	r1, r0, #1
 8005d24:	4248      	negs	r0, r1
 8005d26:	4148      	adcs	r0, r1
 8005d28:	0480      	lsls	r0, r0, #18
 8005d2a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005d2e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8005d32:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8005d36:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8005d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d3c:	d92d      	bls.n	8005d9a <pow+0x1d2>
 8005d3e:	4b96      	ldr	r3, [pc, #600]	@ (8005f98 <pow+0x3d0>)
 8005d40:	2000      	movs	r0, #0
 8005d42:	429c      	cmp	r4, r3
 8005d44:	bf08      	it	eq
 8005d46:	4285      	cmpeq	r5, r0
 8005d48:	f43f af7a 	beq.w	8005c40 <pow+0x78>
 8005d4c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8005d50:	428a      	cmp	r2, r1
 8005d52:	d80c      	bhi.n	8005d6e <pow+0x1a6>
 8005d54:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005d58:	42a8      	cmp	r0, r5
 8005d5a:	41a3      	sbcs	r3, r4
 8005d5c:	d204      	bcs.n	8005d68 <pow+0x1a0>
 8005d5e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8005d62:	e79c      	b.n	8005c9e <pow+0xd6>
 8005d64:	2000      	movs	r0, #0
 8005d66:	e7e4      	b.n	8005d32 <pow+0x16a>
 8005d68:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005d6c:	e797      	b.n	8005c9e <pow+0xd6>
 8005d6e:	2d01      	cmp	r5, #1
 8005d70:	eb74 0303 	sbcs.w	r3, r4, r3
 8005d74:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005d78:	bf34      	ite	cc
 8005d7a:	2301      	movcc	r3, #1
 8005d7c:	2300      	movcs	r3, #0
 8005d7e:	4296      	cmp	r6, r2
 8005d80:	bf8c      	ite	hi
 8005d82:	2600      	movhi	r6, #0
 8005d84:	2601      	movls	r6, #1
 8005d86:	42b3      	cmp	r3, r6
 8005d88:	f000 809c 	beq.w	8005ec4 <pow+0x2fc>
 8005d8c:	b007      	add	sp, #28
 8005d8e:	ecbd 8b0a 	vpop	{d8-d12}
 8005d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d96:	f000 b98f 	b.w	80060b8 <__math_oflow>
 8005d9a:	f1bc 0f00 	cmp.w	ip, #0
 8005d9e:	d10a      	bne.n	8005db6 <pow+0x1ee>
 8005da0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8005f88 <pow+0x3c0>
 8005da4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005da8:	ec53 2b17 	vmov	r2, r3, d7
 8005dac:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8005db0:	4615      	mov	r5, r2
 8005db2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8005db6:	4a7c      	ldr	r2, [pc, #496]	@ (8005fa8 <pow+0x3e0>)
 8005db8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8005dbc:	4422      	add	r2, r4
 8005dbe:	1513      	asrs	r3, r2, #20
 8005dc0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8005dc4:	ee03 3a10 	vmov	s6, r3
 8005dc8:	0d12      	lsrs	r2, r2, #20
 8005dca:	4b78      	ldr	r3, [pc, #480]	@ (8005fac <pow+0x3e4>)
 8005dcc:	0512      	lsls	r2, r2, #20
 8005dce:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8005dd2:	1aa7      	subs	r7, r4, r2
 8005dd4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8005dd8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8005ddc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8005de0:	1e2e      	subs	r6, r5, #0
 8005de2:	ec47 6b14 	vmov	d4, r6, r7
 8005de6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8005dea:	eea4 6b05 	vfma.f64	d6, d4, d5
 8005dee:	ed93 5b00 	vldr	d5, [r3]
 8005df2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8005df6:	eea3 2b05 	vfma.f64	d2, d3, d5
 8005dfa:	ed93 5b02 	vldr	d5, [r3, #8]
 8005dfe:	ee36 4b02 	vadd.f64	d4, d6, d2
 8005e02:	ee32 2b44 	vsub.f64	d2, d2, d4
 8005e06:	eea3 7b05 	vfma.f64	d7, d3, d5
 8005e0a:	ed93 5b04 	vldr	d5, [r3, #16]
 8005e0e:	ee32 2b06 	vadd.f64	d2, d2, d6
 8005e12:	ee37 7b02 	vadd.f64	d7, d7, d2
 8005e16:	ee26 5b05 	vmul.f64	d5, d6, d5
 8005e1a:	ee26 0b05 	vmul.f64	d0, d6, d5
 8005e1e:	ee34 8b00 	vadd.f64	d8, d4, d0
 8005e22:	eeb0 9b40 	vmov.f64	d9, d0
 8005e26:	ee34 4b48 	vsub.f64	d4, d4, d8
 8005e2a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8005e2e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8005e32:	ed93 5b06 	vldr	d5, [r3, #24]
 8005e36:	ee26 bb00 	vmul.f64	d11, d6, d0
 8005e3a:	ee37 7b09 	vadd.f64	d7, d7, d9
 8005e3e:	ed93 4b08 	vldr	d4, [r3, #32]
 8005e42:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8005e46:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8005e4a:	eea6 5b04 	vfma.f64	d5, d6, d4
 8005e4e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8005e52:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8005e56:	eea6 4b03 	vfma.f64	d4, d6, d3
 8005e5a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8005e5e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8005e62:	eea0 4b03 	vfma.f64	d4, d0, d3
 8005e66:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005e6a:	eeab 7b05 	vfma.f64	d7, d11, d5
 8005e6e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8005e72:	ee21 6b04 	vmul.f64	d6, d1, d4
 8005e76:	ee16 3a90 	vmov	r3, s13
 8005e7a:	eeb0 5b46 	vmov.f64	d5, d6
 8005e7e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005e82:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8005e86:	18b2      	adds	r2, r6, r2
 8005e88:	2a3e      	cmp	r2, #62	@ 0x3e
 8005e8a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8005e8e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8005e92:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005e96:	eea1 5b08 	vfma.f64	d5, d1, d8
 8005e9a:	d91b      	bls.n	8005ed4 <pow+0x30c>
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	da0b      	bge.n	8005eb8 <pow+0x2f0>
 8005ea0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8005ea4:	ee36 0b00 	vadd.f64	d0, d6, d0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f43f aef8 	beq.w	8005c9e <pow+0xd6>
 8005eae:	eeb1 0b40 	vneg.f64	d0, d0
 8005eb2:	e6f4      	b.n	8005c9e <pow+0xd6>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e77e      	b.n	8005db6 <pow+0x1ee>
 8005eb8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8005ebc:	d909      	bls.n	8005ed2 <pow+0x30a>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f6bf af64 	bge.w	8005d8c <pow+0x1c4>
 8005ec4:	b007      	add	sp, #28
 8005ec6:	ecbd 8b0a 	vpop	{d8-d12}
 8005eca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ece:	f000 b8eb 	b.w	80060a8 <__math_uflow>
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	4936      	ldr	r1, [pc, #216]	@ (8005fb0 <pow+0x3e8>)
 8005ed6:	ed91 4b02 	vldr	d4, [r1, #8]
 8005eda:	ed91 3b00 	vldr	d3, [r1]
 8005ede:	eeb0 7b44 	vmov.f64	d7, d4
 8005ee2:	eea6 7b03 	vfma.f64	d7, d6, d3
 8005ee6:	ee17 5a10 	vmov	r5, s14
 8005eea:	ee37 7b44 	vsub.f64	d7, d7, d4
 8005eee:	ed91 4b04 	vldr	d4, [r1, #16]
 8005ef2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8005ef6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005efa:	ed91 4b06 	vldr	d4, [r1, #24]
 8005efe:	18dc      	adds	r4, r3, r3
 8005f00:	f104 030f 	add.w	r3, r4, #15
 8005f04:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005f08:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005f0c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8005f10:	ee35 5b06 	vadd.f64	d5, d5, d6
 8005f14:	ee25 6b05 	vmul.f64	d6, d5, d5
 8005f18:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8005f1c:	ed91 4b08 	vldr	d4, [r1, #32]
 8005f20:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005f24:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8005f28:	eea5 4b03 	vfma.f64	d4, d5, d3
 8005f2c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8005f30:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005f34:	ee26 6b06 	vmul.f64	d6, d6, d6
 8005f38:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8005f3c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005f40:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005f44:	eea5 4b03 	vfma.f64	d4, d5, d3
 8005f48:	1940      	adds	r0, r0, r5
 8005f4a:	2700      	movs	r7, #0
 8005f4c:	eb17 020c 	adds.w	r2, r7, ip
 8005f50:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005f54:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005f58:	2e00      	cmp	r6, #0
 8005f5a:	d175      	bne.n	8006048 <pow+0x480>
 8005f5c:	42bd      	cmp	r5, r7
 8005f5e:	db29      	blt.n	8005fb4 <pow+0x3ec>
 8005f60:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8005f64:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8005f68:	4610      	mov	r0, r2
 8005f6a:	ec41 0b10 	vmov	d0, r0, r1
 8005f6e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005f72:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8005f90 <pow+0x3c8>
 8005f76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005f7a:	b007      	add	sp, #28
 8005f7c:	ecbd 8b0a 	vpop	{d8-d12}
 8005f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	f000 b8d0 	b.w	8006128 <__math_check_oflow>
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	43300000 	.word	0x43300000
 8005f90:	00000000 	.word	0x00000000
 8005f94:	7f000000 	.word	0x7f000000
 8005f98:	3ff00000 	.word	0x3ff00000
 8005f9c:	fff00000 	.word	0xfff00000
 8005fa0:	ffe00000 	.word	0xffe00000
 8005fa4:	7fe00000 	.word	0x7fe00000
 8005fa8:	c0196aab 	.word	0xc0196aab
 8005fac:	08006188 	.word	0x08006188
 8005fb0:	080071d0 	.word	0x080071d0
 8005fb4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8005fb8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	ec41 0b15 	vmov	d5, r0, r1
 8005fc2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8005fc6:	ee27 6b05 	vmul.f64	d6, d7, d5
 8005fca:	ee35 7b06 	vadd.f64	d7, d5, d6
 8005fce:	eeb0 4bc7 	vabs.f64	d4, d7
 8005fd2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8005fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fda:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8006058 <pow+0x490>
 8005fde:	d52a      	bpl.n	8006036 <pow+0x46e>
 8005fe0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005fe4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fec:	ee35 5b06 	vadd.f64	d5, d5, d6
 8005ff0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8005ff4:	bf58      	it	pl
 8005ff6:	eeb0 4b43 	vmovpl.f64	d4, d3
 8005ffa:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005ffe:	ee34 6b43 	vsub.f64	d6, d4, d3
 8006002:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006006:	ee36 6b05 	vadd.f64	d6, d6, d5
 800600a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800600e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8006012:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601a:	d104      	bne.n	8006026 <pow+0x45e>
 800601c:	4632      	mov	r2, r6
 800601e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8006022:	ec43 2b17 	vmov	d7, r2, r3
 8006026:	ed8d 0b02 	vstr	d0, [sp, #8]
 800602a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800602e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8006032:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006036:	ee27 0b00 	vmul.f64	d0, d7, d0
 800603a:	b007      	add	sp, #28
 800603c:	ecbd 8b0a 	vpop	{d8-d12}
 8006040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	f000 b867 	b.w	8006116 <__math_check_uflow>
 8006048:	ec43 2b10 	vmov	d0, r2, r3
 800604c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006050:	e625      	b.n	8005c9e <pow+0xd6>
 8006052:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8006060 <pow+0x498>
 8006056:	e622      	b.n	8005c9e <pow+0xd6>
 8006058:	00000000 	.word	0x00000000
 800605c:	00100000 	.word	0x00100000
	...

08006068 <with_errno>:
 8006068:	b510      	push	{r4, lr}
 800606a:	ed2d 8b02 	vpush	{d8}
 800606e:	eeb0 8b40 	vmov.f64	d8, d0
 8006072:	4604      	mov	r4, r0
 8006074:	f7ff fd4a 	bl	8005b0c <__errno>
 8006078:	eeb0 0b48 	vmov.f64	d0, d8
 800607c:	ecbd 8b02 	vpop	{d8}
 8006080:	6004      	str	r4, [r0, #0]
 8006082:	bd10      	pop	{r4, pc}

08006084 <xflow>:
 8006084:	b082      	sub	sp, #8
 8006086:	b158      	cbz	r0, 80060a0 <xflow+0x1c>
 8006088:	eeb1 7b40 	vneg.f64	d7, d0
 800608c:	ed8d 7b00 	vstr	d7, [sp]
 8006090:	ed9d 7b00 	vldr	d7, [sp]
 8006094:	2022      	movs	r0, #34	@ 0x22
 8006096:	ee20 0b07 	vmul.f64	d0, d0, d7
 800609a:	b002      	add	sp, #8
 800609c:	f7ff bfe4 	b.w	8006068 <with_errno>
 80060a0:	eeb0 7b40 	vmov.f64	d7, d0
 80060a4:	e7f2      	b.n	800608c <xflow+0x8>
	...

080060a8 <__math_uflow>:
 80060a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80060b0 <__math_uflow+0x8>
 80060ac:	f7ff bfea 	b.w	8006084 <xflow>
 80060b0:	00000000 	.word	0x00000000
 80060b4:	10000000 	.word	0x10000000

080060b8 <__math_oflow>:
 80060b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80060c0 <__math_oflow+0x8>
 80060bc:	f7ff bfe2 	b.w	8006084 <xflow>
 80060c0:	00000000 	.word	0x00000000
 80060c4:	70000000 	.word	0x70000000

080060c8 <__math_divzero>:
 80060c8:	b082      	sub	sp, #8
 80060ca:	2800      	cmp	r0, #0
 80060cc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80060d0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80060d4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80060d8:	ed8d 7b00 	vstr	d7, [sp]
 80060dc:	ed9d 0b00 	vldr	d0, [sp]
 80060e0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80060f0 <__math_divzero+0x28>
 80060e4:	2022      	movs	r0, #34	@ 0x22
 80060e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80060ea:	b002      	add	sp, #8
 80060ec:	f7ff bfbc 	b.w	8006068 <with_errno>
	...

080060f8 <__math_invalid>:
 80060f8:	eeb0 7b40 	vmov.f64	d7, d0
 80060fc:	eeb4 7b47 	vcmp.f64	d7, d7
 8006100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006104:	ee30 6b40 	vsub.f64	d6, d0, d0
 8006108:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800610c:	d602      	bvs.n	8006114 <__math_invalid+0x1c>
 800610e:	2021      	movs	r0, #33	@ 0x21
 8006110:	f7ff bfaa 	b.w	8006068 <with_errno>
 8006114:	4770      	bx	lr

08006116 <__math_check_uflow>:
 8006116:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800611a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611e:	d102      	bne.n	8006126 <__math_check_uflow+0x10>
 8006120:	2022      	movs	r0, #34	@ 0x22
 8006122:	f7ff bfa1 	b.w	8006068 <with_errno>
 8006126:	4770      	bx	lr

08006128 <__math_check_oflow>:
 8006128:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8006148 <__math_check_oflow+0x20>
 800612c:	eeb0 7bc0 	vabs.f64	d7, d0
 8006130:	eeb4 7b46 	vcmp.f64	d7, d6
 8006134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006138:	dd02      	ble.n	8006140 <__math_check_oflow+0x18>
 800613a:	2022      	movs	r0, #34	@ 0x22
 800613c:	f7ff bf94 	b.w	8006068 <with_errno>
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	f3af 8000 	nop.w
 8006148:	ffffffff 	.word	0xffffffff
 800614c:	7fefffff 	.word	0x7fefffff

08006150 <_init>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr

0800615c <_fini>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr
