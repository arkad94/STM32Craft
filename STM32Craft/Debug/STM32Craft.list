
STM32Craft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cd8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001f70  08001f70  00002f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f8c  08001f8c  00002f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001f90  08001f90  00002f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08001f94  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  24000010  08001fa4  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000040  08001fa4  00003040  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007230  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000013d4  00000000  00000000  0000a26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000628  00000000  00000000  0000b648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000480  00000000  00000000  0000bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035094  00000000  00000000  0000c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00007b73  00000000  00000000  00041184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00150d65  00000000  00000000  00048cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00199a5c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016f8  00000000  00000000  00199aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  0019b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001f58 	.word	0x08001f58

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001f58 	.word	0x08001f58

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000418 <MX_GPIO_Init+0x140>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	4a48      	ldr	r2, [pc, #288]	@ (8000418 <MX_GPIO_Init+0x140>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002fe:	4b46      	ldr	r3, [pc, #280]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	613b      	str	r3, [r7, #16]
 800030a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800030c:	4b42      	ldr	r3, [pc, #264]	@ (8000418 <MX_GPIO_Init+0x140>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	4a41      	ldr	r2, [pc, #260]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800031c:	4b3e      	ldr	r3, [pc, #248]	@ (8000418 <MX_GPIO_Init+0x140>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b3b      	ldr	r3, [pc, #236]	@ (8000418 <MX_GPIO_Init+0x140>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000330:	4a39      	ldr	r2, [pc, #228]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800033a:	4b37      	ldr	r3, [pc, #220]	@ (8000418 <MX_GPIO_Init+0x140>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000340:	f003 0302 	and.w	r3, r3, #2
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000348:	4b33      	ldr	r3, [pc, #204]	@ (8000418 <MX_GPIO_Init+0x140>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800034e:	4a32      	ldr	r2, [pc, #200]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000358:	4b2f      	ldr	r3, [pc, #188]	@ (8000418 <MX_GPIO_Init+0x140>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800035e:	f003 0308 	and.w	r3, r3, #8
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000366:	4b2c      	ldr	r3, [pc, #176]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800036c:	4a2a      	ldr	r2, [pc, #168]	@ (8000418 <MX_GPIO_Init+0x140>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000376:	4b28      	ldr	r3, [pc, #160]	@ (8000418 <MX_GPIO_Init+0x140>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f244 0101 	movw	r1, #16385	@ 0x4001
 800038a:	4824      	ldr	r0, [pc, #144]	@ (800041c <MX_GPIO_Init+0x144>)
 800038c:	f000 fdda 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2102      	movs	r1, #2
 8000394:	4822      	ldr	r0, [pc, #136]	@ (8000420 <MX_GPIO_Init+0x148>)
 8000396:	f000 fdd5 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800039a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	481d      	ldr	r0, [pc, #116]	@ (8000424 <MX_GPIO_Init+0x14c>)
 80003b0:	f000 fc00 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80003b4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2300      	movs	r3, #0
 80003c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	4619      	mov	r1, r3
 80003cc:	4813      	ldr	r0, [pc, #76]	@ (800041c <MX_GPIO_Init+0x144>)
 80003ce:	f000 fbf1 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80003d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d8:	2302      	movs	r3, #2
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003dc:	2300      	movs	r3, #0
 80003de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e0:	2300      	movs	r3, #0
 80003e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80003e4:	2307      	movs	r3, #7
 80003e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	4619      	mov	r1, r3
 80003ee:	480e      	ldr	r0, [pc, #56]	@ (8000428 <MX_GPIO_Init+0x150>)
 80003f0:	f000 fbe0 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	4805      	ldr	r0, [pc, #20]	@ (8000420 <MX_GPIO_Init+0x148>)
 800040c:	f000 fbd2 	bl	8000bb4 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3728      	adds	r7, #40	@ 0x28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	58024400 	.word	0x58024400
 800041c:	58020400 	.word	0x58020400
 8000420:	58021000 	.word	0x58021000
 8000424:	58020800 	.word	0x58020800
 8000428:	58020c00 	.word	0x58020c00

0800042c <main>:
/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    /* Initialize the Hardware Abstraction Layer (HAL) and reset peripherals. */
    HAL_Init();
 8000430:	f000 fa3e 	bl	80008b0 <HAL_Init>

    /* Configure the system clock. */
    SystemClock_Config();
 8000434:	f000 f8b6 	bl	80005a4 <SystemClock_Config>

    /* Initialize all configured peripherals. */
    MX_GPIO_Init();
 8000438:	f7ff ff4e 	bl	80002d8 <MX_GPIO_Init>

    /* Infinite loop */
    while (1)
    {
        /* Debounced button press handling */
        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) // Active low
 800043c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000440:	484e      	ldr	r0, [pc, #312]	@ (800057c <main+0x150>)
 8000442:	f000 fd67 	bl	8000f14 <HAL_GPIO_ReadPin>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d132      	bne.n	80004b2 <main+0x86>
        {
            if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY) // Debounce check
 800044c:	f000 fab6 	bl	80009bc <HAL_GetTick>
 8000450:	4602      	mov	r2, r0
 8000452:	4b4b      	ldr	r3, [pc, #300]	@ (8000580 <main+0x154>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	1ad3      	subs	r3, r2, r3
 8000458:	2b32      	cmp	r3, #50	@ 0x32
 800045a:	d93a      	bls.n	80004d2 <main+0xa6>
            {
                if (!button_stable) // If button state changed
 800045c:	4b49      	ldr	r3, [pc, #292]	@ (8000584 <main+0x158>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d136      	bne.n	80004d2 <main+0xa6>
                {
                    button_stable = 1; // Mark button as pressed
 8000464:	4b47      	ldr	r3, [pc, #284]	@ (8000584 <main+0x158>)
 8000466:	2201      	movs	r2, #1
 8000468:	701a      	strb	r2, [r3, #0]
                    last_debounce_time = HAL_GetTick(); // Reset debounce timer
 800046a:	f000 faa7 	bl	80009bc <HAL_GetTick>
 800046e:	4603      	mov	r3, r0
 8000470:	4a43      	ldr	r2, [pc, #268]	@ (8000580 <main+0x154>)
 8000472:	6013      	str	r3, [r2, #0]

                    /* Toggle animation state */
                    animation_active = !animation_active;
 8000474:	4b44      	ldr	r3, [pc, #272]	@ (8000588 <main+0x15c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf0c      	ite	eq
 800047c:	2301      	moveq	r3, #1
 800047e:	2300      	movne	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	4b40      	ldr	r3, [pc, #256]	@ (8000588 <main+0x15c>)
 8000486:	701a      	strb	r2, [r3, #0]

                    /* If animation is turned off, ensure all LEDs are off */
                    if (!animation_active)
 8000488:	4b3f      	ldr	r3, [pc, #252]	@ (8000588 <main+0x15c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d120      	bne.n	80004d2 <main+0xa6>
                    {
                        HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2101      	movs	r1, #1
 8000494:	483d      	ldr	r0, [pc, #244]	@ (800058c <main+0x160>)
 8000496:	f000 fd55 	bl	8000f44 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2102      	movs	r1, #2
 800049e:	483c      	ldr	r0, [pc, #240]	@ (8000590 <main+0x164>)
 80004a0:	f000 fd50 	bl	8000f44 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004aa:	4838      	ldr	r0, [pc, #224]	@ (800058c <main+0x160>)
 80004ac:	f000 fd4a 	bl	8000f44 <HAL_GPIO_WritePin>
 80004b0:	e00f      	b.n	80004d2 <main+0xa6>
                }
            }
        }
        else
        {
            if ((HAL_GetTick() - last_debounce_time) > DEBOUNCE_DELAY) // Debounce release
 80004b2:	f000 fa83 	bl	80009bc <HAL_GetTick>
 80004b6:	4602      	mov	r2, r0
 80004b8:	4b31      	ldr	r3, [pc, #196]	@ (8000580 <main+0x154>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	2b32      	cmp	r3, #50	@ 0x32
 80004c0:	d907      	bls.n	80004d2 <main+0xa6>
            {
                button_stable = 0; // Mark button as released
 80004c2:	4b30      	ldr	r3, [pc, #192]	@ (8000584 <main+0x158>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
                last_debounce_time = HAL_GetTick(); // Reset debounce timer
 80004c8:	f000 fa78 	bl	80009bc <HAL_GetTick>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000580 <main+0x154>)
 80004d0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Run animation if active */
        if (animation_active)
 80004d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000588 <main+0x15c>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0b0      	beq.n	800043c <main+0x10>
        {
            if (HAL_GetTick() - last_animation_time >= animation_delays[animation_step]) // Use individual delay for each step
 80004da:	f000 fa6f 	bl	80009bc <HAL_GetTick>
 80004de:	4602      	mov	r2, r0
 80004e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000594 <main+0x168>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	1ad2      	subs	r2, r2, r3
 80004e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000598 <main+0x16c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	4619      	mov	r1, r3
 80004ec:	4b2b      	ldr	r3, [pc, #172]	@ (800059c <main+0x170>)
 80004ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d3a2      	bcc.n	800043c <main+0x10>
            {
                last_animation_time = HAL_GetTick(); // Update last animation time
 80004f6:	f000 fa61 	bl	80009bc <HAL_GetTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a25      	ldr	r2, [pc, #148]	@ (8000594 <main+0x168>)
 80004fe:	6013      	str	r3, [r2, #0]

                /* Perform animation steps */
                switch (animation_step)
 8000500:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <main+0x16c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d01d      	beq.n	8000544 <main+0x118>
 8000508:	2b02      	cmp	r3, #2
 800050a:	dc27      	bgt.n	800055c <main+0x130>
 800050c:	2b00      	cmp	r3, #0
 800050e:	d002      	beq.n	8000516 <main+0xea>
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00c      	beq.n	800052e <main+0x102>
 8000514:	e022      	b.n	800055c <main+0x130>
                {
                case 0:
                    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2101      	movs	r1, #1
 800051a:	481c      	ldr	r0, [pc, #112]	@ (800058c <main+0x160>)
 800051c:	f000 fd12 	bl	8000f44 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000526:	4819      	ldr	r0, [pc, #100]	@ (800058c <main+0x160>)
 8000528:	f000 fd0c 	bl	8000f44 <HAL_GPIO_WritePin>
                    break;
 800052c:	e016      	b.n	800055c <main+0x130>
                case 1:
                    HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	4816      	ldr	r0, [pc, #88]	@ (800058c <main+0x160>)
 8000534:	f000 fd06 	bl	8000f44 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2102      	movs	r1, #2
 800053c:	4814      	ldr	r0, [pc, #80]	@ (8000590 <main+0x164>)
 800053e:	f000 fd01 	bl	8000f44 <HAL_GPIO_WritePin>
                    break;
 8000542:	e00b      	b.n	800055c <main+0x130>
                case 2:
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <main+0x164>)
 800054a:	f000 fcfb 	bl	8000f44 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000554:	480d      	ldr	r0, [pc, #52]	@ (800058c <main+0x160>)
 8000556:	f000 fcf5 	bl	8000f44 <HAL_GPIO_WritePin>
                    break;
 800055a:	bf00      	nop
                }

                /* Update animation step */
                animation_step = (animation_step + 1) % NUM_ANIMATION_STEPS; // Cycle through steps
 800055c:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <main+0x16c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	4619      	mov	r1, r3
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <main+0x174>)
 8000566:	fba3 2301 	umull	r2, r3, r3, r1
 800056a:	085a      	lsrs	r2, r3, #1
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	1aca      	subs	r2, r1, r3
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <main+0x16c>)
 8000578:	701a      	strb	r2, [r3, #0]
        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) // Active low
 800057a:	e75f      	b.n	800043c <main+0x10>
 800057c:	58020800 	.word	0x58020800
 8000580:	24000030 	.word	0x24000030
 8000584:	2400002d 	.word	0x2400002d
 8000588:	2400002c 	.word	0x2400002c
 800058c:	58020400 	.word	0x58020400
 8000590:	58021000 	.word	0x58021000
 8000594:	24000034 	.word	0x24000034
 8000598:	24000038 	.word	0x24000038
 800059c:	08001f70 	.word	0x08001f70
 80005a0:	aaaaaaab 	.word	0xaaaaaaab

080005a4 <SystemClock_Config>:
/**
 * @brief Configures the system clock.
 * @retval None
 */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b09c      	sub	sp, #112	@ 0x70
 80005a8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ae:	224c      	movs	r2, #76	@ 0x4c
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fca4 	bl	8001f00 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2220      	movs	r2, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 fc9e 	bl	8001f00 <memset>

    /* Configure power supply. */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 fcd7 	bl	8000f78 <HAL_PWREx_ConfigSupply>

    /* Set voltage scaling for power efficiency. */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d2:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d4:	f023 0301 	bic.w	r3, r3, #1
 80005d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xd0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

    /* Wait until the voltage regulator is ready. */
    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000600:	bf00      	nop
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <SystemClock_Config+0xd0>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800060a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800060e:	d1f8      	bne.n	8000602 <SystemClock_Config+0x5e>
    {
    }

    /* Initialize the oscillators. */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000614:	2301      	movs	r3, #1
 8000616:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2340      	movs	r3, #64	@ 0x40
 800061a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fce1 	bl	8000fec <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x90>
    {
        Error_Handler();
 8000630:	f000 f822 	bl	8000678 <Error_Handler>
    }

    /* Configure the CPU, AHB, and APB clocks. */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000634:	233f      	movs	r3, #63	@ 0x3f
 8000636:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2101      	movs	r1, #1
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f921 	bl	80018a0 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 8000664:	f000 f808 	bl	8000678 <Error_Handler>
    }
}
 8000668:	bf00      	nop
 800066a:	3770      	adds	r7, #112	@ 0x70
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58000400 	.word	0x58000400
 8000674:	58024800 	.word	0x58024800

08000678 <Error_Handler>:
/**
 * @brief Handles system-level errors.
 * @retval None
 */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
    /* Disable interrupts and enter infinite loop on error. */
    __disable_irq();
    while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <Error_Handler+0x8>

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <HAL_MspInit+0x30>)
 800068c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000690:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <HAL_MspInit+0x30>)
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_MspInit+0x30>)
 800069c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	58024400 	.word	0x58024400

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <NMI_Handler+0x4>

080006c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <MemManage_Handler+0x4>

080006d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <UsageFault_Handler+0x4>

080006e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070e:	f000 f941 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800071c:	4b37      	ldr	r3, [pc, #220]	@ (80007fc <SystemInit+0xe4>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000722:	4a36      	ldr	r2, [pc, #216]	@ (80007fc <SystemInit+0xe4>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800072c:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <SystemInit+0xe8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 030f 	and.w	r3, r3, #15
 8000734:	2b06      	cmp	r3, #6
 8000736:	d807      	bhi.n	8000748 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000738:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <SystemInit+0xe8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f023 030f 	bic.w	r3, r3, #15
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <SystemInit+0xe8>)
 8000742:	f043 0307 	orr.w	r3, r3, #7
 8000746:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000748:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <SystemInit+0xec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a2d      	ldr	r2, [pc, #180]	@ (8000804 <SystemInit+0xec>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000754:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <SystemInit+0xec>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <SystemInit+0xec>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4929      	ldr	r1, [pc, #164]	@ (8000804 <SystemInit+0xec>)
 8000760:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <SystemInit+0xf0>)
 8000762:	4013      	ands	r3, r2
 8000764:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000766:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <SystemInit+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000772:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <SystemInit+0xe8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f023 030f 	bic.w	r3, r3, #15
 800077a:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <SystemInit+0xe8>)
 800077c:	f043 0307 	orr.w	r3, r3, #7
 8000780:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <SystemInit+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <SystemInit+0xec>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <SystemInit+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <SystemInit+0xec>)
 8000796:	4a1d      	ldr	r2, [pc, #116]	@ (800080c <SystemInit+0xf4>)
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <SystemInit+0xec>)
 800079c:	4a1c      	ldr	r2, [pc, #112]	@ (8000810 <SystemInit+0xf8>)
 800079e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <SystemInit+0xec>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000814 <SystemInit+0xfc>)
 80007a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <SystemInit+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <SystemInit+0xec>)
 80007ae:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <SystemInit+0xfc>)
 80007b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <SystemInit+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <SystemInit+0xec>)
 80007ba:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <SystemInit+0xfc>)
 80007bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <SystemInit+0xec>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <SystemInit+0xec>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <SystemInit+0xec>)
 80007ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <SystemInit+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <SystemInit+0x100>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <SystemInit+0x104>)
 80007dc:	4013      	ands	r3, r2
 80007de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007e2:	d202      	bcs.n	80007ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SystemInit+0x108>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <SystemInit+0x10c>)
 80007ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	e000ed00 	.word	0xe000ed00
 8000800:	52002000 	.word	0x52002000
 8000804:	58024400 	.word	0x58024400
 8000808:	eaf6ed7f 	.word	0xeaf6ed7f
 800080c:	02020200 	.word	0x02020200
 8000810:	01ff0000 	.word	0x01ff0000
 8000814:	01010280 	.word	0x01010280
 8000818:	5c001000 	.word	0x5c001000
 800081c:	ffff0000 	.word	0xffff0000
 8000820:	51008108 	.word	0x51008108
 8000824:	52004000 	.word	0x52004000

08000828 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <ExitRun0Mode+0x2c>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <ExitRun0Mode+0x2c>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <ExitRun0Mode+0x2c>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	58024800 	.word	0x58024800

08000858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000894 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800085c:	f7ff ffe4 	bl	8000828 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f7ff ff5a 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088a:	f001 fb41 	bl	8001f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff fdcd 	bl	800042c <main>
  bx  lr
 8000892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000894:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000898:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800089c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008a0:	08001f94 	.word	0x08001f94
  ldr r2, =_sbss
 80008a4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008a8:	24000040 	.word	0x24000040

080008ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC3_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b6:	2003      	movs	r0, #3
 80008b8:	f000 f94a 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008bc:	f001 f9a6 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 80008c0:	4602      	mov	r2, r0
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_Init+0x68>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	4913      	ldr	r1, [pc, #76]	@ (800091c <HAL_Init+0x6c>)
 80008ce:	5ccb      	ldrb	r3, [r1, r3]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_Init+0x68>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <HAL_Init+0x6c>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	f003 031f 	and.w	r3, r3, #31
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <HAL_Init+0x70>)
 80008f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <HAL_Init+0x74>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f814 	bl	8000928 <HAL_InitTick>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e002      	b.n	8000910 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800090a:	f7ff febb 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	58024400 	.word	0x58024400
 800091c:	08001f7c 	.word	0x08001f7c
 8000920:	24000004 	.word	0x24000004
 8000924:	24000000 	.word	0x24000000

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_InitTick+0x60>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e021      	b.n	8000980 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <HAL_InitTick+0x64>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <HAL_InitTick+0x60>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f921 	bl	8000b9a <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f8f9 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <HAL_InitTick+0x68>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2400000c 	.word	0x2400000c
 800098c:	24000000 	.word	0x24000000
 8000990:	24000008 	.word	0x24000008

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	2400000c 	.word	0x2400000c
 80009b8:	2400003c 	.word	0x2400003c

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	@ (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2400003c 	.word	0x2400003c

080009d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_GetREVID+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	0c1b      	lsrs	r3, r3, #16
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	5c001000 	.word	0x5c001000

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x40>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x40>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00
 8000a30:	05fa0000 	.word	0x05fa0000

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	@ (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	@ (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	@ 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff47 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5e 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb2 	bl	8000b0c <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	@ 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bc2:	4b89      	ldr	r3, [pc, #548]	@ (8000de8 <HAL_GPIO_Init+0x234>)
 8000bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bc6:	e194      	b.n	8000ef2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8186 	beq.w	8000eec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d005      	beq.n	8000bf8 <HAL_GPIO_Init+0x44>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d017      	beq.n	8000c96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	69b9      	ldr	r1, [r7, #24]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80e0 	beq.w	8000eec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <HAL_GPIO_Init+0x238>)
 8000d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d32:	4a2e      	ldr	r2, [pc, #184]	@ (8000dec <HAL_GPIO_Init+0x238>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <HAL_GPIO_Init+0x238>)
 8000d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4a:	4a29      	ldr	r2, [pc, #164]	@ (8000df0 <HAL_GPIO_Init+0x23c>)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a20      	ldr	r2, [pc, #128]	@ (8000df4 <HAL_GPIO_Init+0x240>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d052      	beq.n	8000e1c <HAL_GPIO_Init+0x268>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1f      	ldr	r2, [pc, #124]	@ (8000df8 <HAL_GPIO_Init+0x244>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d031      	beq.n	8000de2 <HAL_GPIO_Init+0x22e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <HAL_GPIO_Init+0x248>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d02b      	beq.n	8000dde <HAL_GPIO_Init+0x22a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a1d      	ldr	r2, [pc, #116]	@ (8000e00 <HAL_GPIO_Init+0x24c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d025      	beq.n	8000dda <HAL_GPIO_Init+0x226>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <HAL_GPIO_Init+0x250>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01f      	beq.n	8000dd6 <HAL_GPIO_Init+0x222>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <HAL_GPIO_Init+0x254>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x21e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e0c <HAL_GPIO_Init+0x258>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x21a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a19      	ldr	r2, [pc, #100]	@ (8000e10 <HAL_GPIO_Init+0x25c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x216>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_GPIO_Init+0x260>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x212>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a17      	ldr	r2, [pc, #92]	@ (8000e18 <HAL_GPIO_Init+0x264>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x20e>
 8000dbe:	2309      	movs	r3, #9
 8000dc0:	e02d      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	e02b      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	e029      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dca:	2307      	movs	r3, #7
 8000dcc:	e027      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dce:	2306      	movs	r3, #6
 8000dd0:	e025      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e023      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e021      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e01f      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e01d      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e01b      	b.n	8000e1e <HAL_GPIO_Init+0x26a>
 8000de6:	bf00      	nop
 8000de8:	58000080 	.word	0x58000080
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58000400 	.word	0x58000400
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58020800 	.word	0x58020800
 8000e00:	58020c00 	.word	0x58020c00
 8000e04:	58021000 	.word	0x58021000
 8000e08:	58021400 	.word	0x58021400
 8000e0c:	58021800 	.word	0x58021800
 8000e10:	58021c00 	.word	0x58021c00
 8000e14:	58022000 	.word	0x58022000
 8000e18:	58022400 	.word	0x58022400
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	69fa      	ldr	r2, [r7, #28]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2e:	4938      	ldr	r1, [pc, #224]	@ (8000f10 <HAL_GPIO_Init+0x35c>)
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f47f ae63 	bne.w	8000bc8 <HAL_GPIO_Init+0x14>
  }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3724      	adds	r7, #36	@ 0x24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	58000400 	.word	0x58000400

08000f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f60:	e003      	b.n	8000f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	619a      	str	r2, [r3, #24]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d00a      	beq.n	8000fa2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d001      	beq.n	8000f9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e01f      	b.n	8000fde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e01d      	b.n	8000fde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	f023 0207 	bic.w	r2, r3, #7
 8000faa:	490f      	ldr	r1, [pc, #60]	@ (8000fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fb2:	f7ff fd03 	bl	80009bc <HAL_GetTick>
 8000fb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fb8:	e009      	b.n	8000fce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fba:	f7ff fcff 	bl	80009bc <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fc8:	d901      	bls.n	8000fce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e007      	b.n	8000fde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_PWREx_ConfigSupply+0x70>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fda:	d1ee      	bne.n	8000fba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	58024800 	.word	0x58024800

08000fec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	@ 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f000 bc48 	b.w	8001890 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8088 	beq.w	800111e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100e:	4b99      	ldr	r3, [pc, #612]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001018:	4b96      	ldr	r3, [pc, #600]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800101a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800101e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001020:	2b10      	cmp	r3, #16
 8001022:	d007      	beq.n	8001034 <HAL_RCC_OscConfig+0x48>
 8001024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001026:	2b18      	cmp	r3, #24
 8001028:	d111      	bne.n	800104e <HAL_RCC_OscConfig+0x62>
 800102a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d10c      	bne.n	800104e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4b8f      	ldr	r3, [pc, #572]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d06d      	beq.n	800111c <HAL_RCC_OscConfig+0x130>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d169      	bne.n	800111c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	f000 bc21 	b.w	8001890 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x7a>
 8001058:	4b86      	ldr	r3, [pc, #536]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a85      	ldr	r2, [pc, #532]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e02e      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x9c>
 800106e:	4b81      	ldr	r3, [pc, #516]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a80      	ldr	r2, [pc, #512]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b7e      	ldr	r3, [pc, #504]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a7d      	ldr	r2, [pc, #500]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e01d      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0xc0>
 8001092:	4b78      	ldr	r3, [pc, #480]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a77      	ldr	r2, [pc, #476]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b75      	ldr	r3, [pc, #468]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a74      	ldr	r2, [pc, #464]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xd8>
 80010ac:	4b71      	ldr	r3, [pc, #452]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a70      	ldr	r2, [pc, #448]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a6d      	ldr	r2, [pc, #436]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fc76 	bl	80009bc <HAL_GetTick>
 80010d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fc72 	bl	80009bc <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e3d4      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe8>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc62 	bl	80009bc <HAL_GetTick>
 80010f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fc5e 	bl	80009bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	@ 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e3c0      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800110e:	4b59      	ldr	r3, [pc, #356]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x110>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 80ca 	beq.w	80012c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112c:	4b51      	ldr	r3, [pc, #324]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001134:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001136:	4b4f      	ldr	r3, [pc, #316]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_RCC_OscConfig+0x166>
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b18      	cmp	r3, #24
 8001146:	d156      	bne.n	80011f6 <HAL_RCC_OscConfig+0x20a>
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d151      	bne.n	80011f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001152:	4b48      	ldr	r3, [pc, #288]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x17e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e392      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800116a:	4b42      	ldr	r3, [pc, #264]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 0219 	bic.w	r2, r3, #25
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	493f      	ldr	r1, [pc, #252]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fc1e 	bl	80009bc <HAL_GetTick>
 8001180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001184:	f7ff fc1a 	bl	80009bc <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e37c      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001196:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	f7ff fc17 	bl	80009d4 <HAL_GetREVID>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d817      	bhi.n	80011e0 <HAL_RCC_OscConfig+0x1f4>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	2b40      	cmp	r3, #64	@ 0x40
 80011b6:	d108      	bne.n	80011ca <HAL_RCC_OscConfig+0x1de>
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80011c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80011c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c8:	e07a      	b.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	4926      	ldr	r1, [pc, #152]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011de:	e06f      	b.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	4921      	ldr	r1, [pc, #132]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f4:	e064      	b.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d047      	beq.n	800128e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 0219 	bic.w	r2, r3, #25
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	491a      	ldr	r1, [pc, #104]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fbd4 	bl	80009bc <HAL_GetTick>
 8001214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fbd0 	bl	80009bc <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e332      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800122a:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001236:	f7ff fbcd 	bl	80009d4 <HAL_GetREVID>
 800123a:	4603      	mov	r3, r0
 800123c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001240:	4293      	cmp	r3, r2
 8001242:	d819      	bhi.n	8001278 <HAL_RCC_OscConfig+0x28c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b40      	cmp	r3, #64	@ 0x40
 800124a:	d108      	bne.n	800125e <HAL_RCC_OscConfig+0x272>
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125a:	6053      	str	r3, [r2, #4]
 800125c:	e030      	b.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	031b      	lsls	r3, r3, #12
 800126c:	4901      	ldr	r1, [pc, #4]	@ (8001274 <HAL_RCC_OscConfig+0x288>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
 8001272:	e025      	b.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
 8001274:	58024400 	.word	0x58024400
 8001278:	4b9a      	ldr	r3, [pc, #616]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	061b      	lsls	r3, r3, #24
 8001286:	4997      	ldr	r1, [pc, #604]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	e018      	b.n	80012c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128e:	4b95      	ldr	r3, [pc, #596]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a94      	ldr	r2, [pc, #592]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fb8f 	bl	80009bc <HAL_GetTick>
 800129e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fb8b 	bl	80009bc <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e2ed      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b4:	4b8b      	ldr	r3, [pc, #556]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a9 	beq.w	8001420 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ce:	4b85      	ldr	r3, [pc, #532]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012d8:	4b82      	ldr	r3, [pc, #520]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d007      	beq.n	80012f4 <HAL_RCC_OscConfig+0x308>
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b18      	cmp	r3, #24
 80012e8:	d13a      	bne.n	8001360 <HAL_RCC_OscConfig+0x374>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d135      	bne.n	8001360 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012f4:	4b7b      	ldr	r3, [pc, #492]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x320>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	2b80      	cmp	r3, #128	@ 0x80
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e2c1      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800130c:	f7ff fb62 	bl	80009d4 <HAL_GetREVID>
 8001310:	4603      	mov	r3, r0
 8001312:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001316:	4293      	cmp	r3, r2
 8001318:	d817      	bhi.n	800134a <HAL_RCC_OscConfig+0x35e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	2b20      	cmp	r3, #32
 8001320:	d108      	bne.n	8001334 <HAL_RCC_OscConfig+0x348>
 8001322:	4b70      	ldr	r3, [pc, #448]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800132a:	4a6e      	ldr	r2, [pc, #440]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800132c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001330:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001332:	e075      	b.n	8001420 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001334:	4b6b      	ldr	r3, [pc, #428]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	069b      	lsls	r3, r3, #26
 8001342:	4968      	ldr	r1, [pc, #416]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001348:	e06a      	b.n	8001420 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800134a:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	061b      	lsls	r3, r3, #24
 8001358:	4962      	ldr	r1, [pc, #392]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800135e:	e05f      	b.n	8001420 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d042      	beq.n	80013ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001368:	4b5e      	ldr	r3, [pc, #376]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a5d      	ldr	r2, [pc, #372]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800136e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fb22 	bl	80009bc <HAL_GetTick>
 8001378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800137c:	f7ff fb1e 	bl	80009bc <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e280      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800138e:	4b55      	ldr	r3, [pc, #340]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800139a:	f7ff fb1b 	bl	80009d4 <HAL_GetREVID>
 800139e:	4603      	mov	r3, r0
 80013a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d817      	bhi.n	80013d8 <HAL_RCC_OscConfig+0x3ec>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d108      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3d6>
 80013b0:	4b4c      	ldr	r3, [pc, #304]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013b8:	4a4a      	ldr	r2, [pc, #296]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013be:	6053      	str	r3, [r2, #4]
 80013c0:	e02e      	b.n	8001420 <HAL_RCC_OscConfig+0x434>
 80013c2:	4b48      	ldr	r3, [pc, #288]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	069b      	lsls	r3, r3, #26
 80013d0:	4944      	ldr	r1, [pc, #272]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
 80013d6:	e023      	b.n	8001420 <HAL_RCC_OscConfig+0x434>
 80013d8:	4b42      	ldr	r3, [pc, #264]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	493f      	ldr	r1, [pc, #252]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	60cb      	str	r3, [r1, #12]
 80013ec:	e018      	b.n	8001420 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013ee:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a3c      	ldr	r2, [pc, #240]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80013f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fadf 	bl	80009bc <HAL_GetTick>
 80013fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001402:	f7ff fadb 	bl	80009bc <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e23d      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001414:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d036      	beq.n	800149a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d019      	beq.n	8001468 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001438:	4a2a      	ldr	r2, [pc, #168]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fabc 	bl	80009bc <HAL_GetTick>
 8001444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fab8 	bl	80009bc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e21a      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x45c>
 8001466:	e018      	b.n	800149a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff faa2 	bl	80009bc <HAL_GetTick>
 8001478:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fa9e 	bl	80009bc <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e200      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d039      	beq.n	800151a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d01c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fa7f 	bl	80009bc <HAL_GetTick>
 80014be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c2:	f7ff fa7b 	bl	80009bc <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e1dd      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4d6>
 80014e0:	e01b      	b.n	800151a <HAL_RCC_OscConfig+0x52e>
 80014e2:	bf00      	nop
 80014e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014e8:	4b9b      	ldr	r3, [pc, #620]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a9a      	ldr	r2, [pc, #616]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80014ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa62 	bl	80009bc <HAL_GetTick>
 80014f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014fc:	f7ff fa5e 	bl	80009bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1c0      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800150e:	4b92      	ldr	r3, [pc, #584]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8081 	beq.w	800162a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001528:	4b8c      	ldr	r3, [pc, #560]	@ (800175c <HAL_RCC_OscConfig+0x770>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a8b      	ldr	r2, [pc, #556]	@ (800175c <HAL_RCC_OscConfig+0x770>)
 800152e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001532:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001534:	f7ff fa42 	bl	80009bc <HAL_GetTick>
 8001538:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153c:	f7ff fa3e 	bl	80009bc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	@ 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e1a0      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800154e:	4b83      	ldr	r3, [pc, #524]	@ (800175c <HAL_RCC_OscConfig+0x770>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <HAL_RCC_OscConfig+0x584>
 8001562:	4b7d      	ldr	r3, [pc, #500]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001566:	4a7c      	ldr	r2, [pc, #496]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	@ 0x70
 800156e:	e02d      	b.n	80015cc <HAL_RCC_OscConfig+0x5e0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x5a6>
 8001578:	4b77      	ldr	r3, [pc, #476]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157c:	4a76      	ldr	r2, [pc, #472]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6713      	str	r3, [r2, #112]	@ 0x70
 8001584:	4b74      	ldr	r3, [pc, #464]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001588:	4a73      	ldr	r2, [pc, #460]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800158a:	f023 0304 	bic.w	r3, r3, #4
 800158e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x5e0>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5c8>
 800159a:	4b6f      	ldr	r3, [pc, #444]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	4a6e      	ldr	r2, [pc, #440]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x5e0>
 80015b4:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b8:	4a67      	ldr	r2, [pc, #412]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c0:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a64      	ldr	r2, [pc, #400]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff f9f2 	bl	80009bc <HAL_GetTick>
 80015d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff f9ee 	bl	80009bc <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e14e      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f2:	4b59      	ldr	r3, [pc, #356]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x5f0>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff f9dc 	bl	80009bc <HAL_GetTick>
 8001604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff f9d8 	bl	80009bc <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e138      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800161e:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 812d 	beq.w	800188e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001634:	4b48      	ldr	r3, [pc, #288]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800163c:	2b18      	cmp	r3, #24
 800163e:	f000 80bd 	beq.w	80017bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	2b02      	cmp	r3, #2
 8001648:	f040 809e 	bne.w	8001788 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a41      	ldr	r2, [pc, #260]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff f9b0 	bl	80009bc <HAL_GetTick>
 800165c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff f9ac 	bl	80009bc <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e10e      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001672:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800167e:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <HAL_RCC_OscConfig+0x774>)
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	430a      	orrs	r2, r1
 8001692:	4931      	ldr	r1, [pc, #196]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001694:	4313      	orrs	r3, r2
 8001696:	628b      	str	r3, [r1, #40]	@ 0x28
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	3b01      	subs	r3, #1
 800169e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a6:	3b01      	subs	r3, #1
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c0:	3b01      	subs	r3, #1
 80016c2:	061b      	lsls	r3, r3, #24
 80016c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80016c8:	4923      	ldr	r1, [pc, #140]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016da:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <HAL_RCC_OscConfig+0x778>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016e6:	00d2      	lsls	r2, r2, #3
 80016e8:	491b      	ldr	r1, [pc, #108]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f2:	f023 020c 	bic.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4917      	ldr	r1, [pc, #92]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	f023 0202 	bic.w	r2, r3, #2
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	4912      	ldr	r1, [pc, #72]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800170e:	4313      	orrs	r3, r2
 8001710:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173a:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <HAL_RCC_OscConfig+0x76c>)
 8001748:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff f935 	bl	80009bc <HAL_GetTick>
 8001752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001754:	e011      	b.n	800177a <HAL_RCC_OscConfig+0x78e>
 8001756:	bf00      	nop
 8001758:	58024400 	.word	0x58024400
 800175c:	58024800 	.word	0x58024800
 8001760:	fffffc0c 	.word	0xfffffc0c
 8001764:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff f928 	bl	80009bc <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e08a      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x77c>
 8001786:	e082      	b.n	800188e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b43      	ldr	r3, [pc, #268]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a42      	ldr	r2, [pc, #264]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 800178e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f912 	bl	80009bc <HAL_GetTick>
 8001798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f90e 	bl	80009bc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e070      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x7b0>
 80017ba:	e068      	b.n	800188e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017c2:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d031      	beq.n	8001834 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0203 	and.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d12a      	bne.n	8001834 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d122      	bne.n	8001834 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	0a5b      	lsrs	r3, r3, #9
 8001802:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	0c1b      	lsrs	r3, r3, #16
 8001814:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d108      	bne.n	8001834 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	0e1b      	lsrs	r3, r3, #24
 8001826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800182e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e02b      	b.n	8001890 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 800183a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001842:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	429a      	cmp	r2, r3
 800184c:	d01f      	beq.n	800188e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 8001850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001852:	4a11      	ldr	r2, [pc, #68]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800185a:	f7ff f8af 	bl	80009bc <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001860:	bf00      	nop
 8001862:	f7ff f8ab 	bl	80009bc <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	4293      	cmp	r3, r2
 800186c:	d0f9      	beq.n	8001862 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_RCC_OscConfig+0x8b0>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800187a:	00d2      	lsls	r2, r2, #3
 800187c:	4906      	ldr	r1, [pc, #24]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 800187e:	4313      	orrs	r3, r2
 8001880:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001882:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 8001884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <HAL_RCC_OscConfig+0x8ac>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3730      	adds	r7, #48	@ 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	58024400 	.word	0x58024400
 800189c:	ffff0007 	.word	0xffff0007

080018a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e19c      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b87      	ldr	r3, [pc, #540]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 020f 	bic.w	r2, r3, #15
 80018ca:	4985      	ldr	r1, [pc, #532]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b83      	ldr	r3, [pc, #524]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e184      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d010      	beq.n	8001912 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d908      	bls.n	8001912 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001900:	4b78      	ldr	r3, [pc, #480]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	4975      	ldr	r1, [pc, #468]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 800190e:	4313      	orrs	r3, r2
 8001910:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d010      	beq.n	8001940 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	4b70      	ldr	r3, [pc, #448]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800192a:	429a      	cmp	r2, r3
 800192c:	d908      	bls.n	8001940 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800192e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	496a      	ldr	r1, [pc, #424]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 800193c:	4313      	orrs	r3, r2
 800193e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d010      	beq.n	800196e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	4b64      	ldr	r3, [pc, #400]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001958:	429a      	cmp	r2, r3
 800195a:	d908      	bls.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800195c:	4b61      	ldr	r3, [pc, #388]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	495e      	ldr	r1, [pc, #376]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 800196a:	4313      	orrs	r3, r2
 800196c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d010      	beq.n	800199c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69da      	ldr	r2, [r3, #28]
 800197e:	4b59      	ldr	r3, [pc, #356]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001986:	429a      	cmp	r2, r3
 8001988:	d908      	bls.n	800199c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800198a:	4b56      	ldr	r3, [pc, #344]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4953      	ldr	r1, [pc, #332]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001998:	4313      	orrs	r3, r2
 800199a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d010      	beq.n	80019ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d908      	bls.n	80019ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f023 020f 	bic.w	r2, r3, #15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4947      	ldr	r1, [pc, #284]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d055      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019d6:	4b43      	ldr	r3, [pc, #268]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4940      	ldr	r1, [pc, #256]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019f0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d121      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0f6      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a08:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d115      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0ea      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a20:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0de      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0d6      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a40:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f023 0207 	bic.w	r2, r3, #7
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4925      	ldr	r1, [pc, #148]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a52:	f7fe ffb3 	bl	80009bc <HAL_GetTick>
 8001a56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5a:	f7fe ffaf 	bl	80009bc <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0be      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d1eb      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d010      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d208      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f023 020f 	bic.w	r2, r3, #15
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	490e      	ldr	r1, [pc, #56]	@ (8001ae4 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d214      	bcs.n	8001ae8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 020f 	bic.w	r2, r3, #15
 8001ac6:	4906      	ldr	r1, [pc, #24]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <HAL_RCC_ClockConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e086      	b.n	8001bee <HAL_RCC_ClockConfig+0x34e>
 8001ae0:	52002000 	.word	0x52002000
 8001ae4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d208      	bcs.n	8001b16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b04:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	4939      	ldr	r1, [pc, #228]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b34      	ldr	r3, [pc, #208]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d208      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b32:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	492e      	ldr	r1, [pc, #184]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d208      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4922      	ldr	r1, [pc, #136]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d010      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69da      	ldr	r2, [r3, #28]
 8001b82:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d208      	bcs.n	8001ba0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4917      	ldr	r1, [pc, #92]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ba0:	f000 f834 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	4912      	ldr	r1, [pc, #72]	@ (8001bfc <HAL_RCC_ClockConfig+0x35c>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_RCC_ClockConfig+0x35c>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_RCC_ClockConfig+0x360>)
 8001bd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <HAL_RCC_ClockConfig+0x364>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_RCC_ClockConfig+0x368>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fea0 	bl	8000928 <HAL_InitTick>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	08001f7c 	.word	0x08001f7c
 8001c00:	24000004 	.word	0x24000004
 8001c04:	24000000 	.word	0x24000000
 8001c08:	24000008 	.word	0x24000008

08001c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	@ 0x24
 8001c10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c12:	4bb3      	ldr	r3, [pc, #716]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c1a:	2b18      	cmp	r3, #24
 8001c1c:	f200 8155 	bhi.w	8001eca <HAL_RCC_GetSysClockFreq+0x2be>
 8001c20:	a201      	add	r2, pc, #4	@ (adr r2, 8001c28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c8d 	.word	0x08001c8d
 8001c2c:	08001ecb 	.word	0x08001ecb
 8001c30:	08001ecb 	.word	0x08001ecb
 8001c34:	08001ecb 	.word	0x08001ecb
 8001c38:	08001ecb 	.word	0x08001ecb
 8001c3c:	08001ecb 	.word	0x08001ecb
 8001c40:	08001ecb 	.word	0x08001ecb
 8001c44:	08001ecb 	.word	0x08001ecb
 8001c48:	08001cb3 	.word	0x08001cb3
 8001c4c:	08001ecb 	.word	0x08001ecb
 8001c50:	08001ecb 	.word	0x08001ecb
 8001c54:	08001ecb 	.word	0x08001ecb
 8001c58:	08001ecb 	.word	0x08001ecb
 8001c5c:	08001ecb 	.word	0x08001ecb
 8001c60:	08001ecb 	.word	0x08001ecb
 8001c64:	08001ecb 	.word	0x08001ecb
 8001c68:	08001cb9 	.word	0x08001cb9
 8001c6c:	08001ecb 	.word	0x08001ecb
 8001c70:	08001ecb 	.word	0x08001ecb
 8001c74:	08001ecb 	.word	0x08001ecb
 8001c78:	08001ecb 	.word	0x08001ecb
 8001c7c:	08001ecb 	.word	0x08001ecb
 8001c80:	08001ecb 	.word	0x08001ecb
 8001c84:	08001ecb 	.word	0x08001ecb
 8001c88:	08001cbf 	.word	0x08001cbf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c8c:	4b94      	ldr	r3, [pc, #592]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c98:	4b91      	ldr	r3, [pc, #580]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	4a90      	ldr	r2, [pc, #576]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001caa:	e111      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001cac:	4b8d      	ldr	r3, [pc, #564]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cae:	61bb      	str	r3, [r7, #24]
      break;
 8001cb0:	e10e      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cb4:	61bb      	str	r3, [r7, #24]
      break;
 8001cb6:	e10b      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001cba:	61bb      	str	r3, [r7, #24]
      break;
 8001cbc:	e108      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cbe:	4b88      	ldr	r3, [pc, #544]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001cc8:	4b85      	ldr	r3, [pc, #532]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cd2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cd4:	4b82      	ldr	r3, [pc, #520]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001cde:	4b80      	ldr	r3, [pc, #512]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80e1 	beq.w	8001ec4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	f000 8083 	beq.w	8001e10 <HAL_RCC_GetSysClockFreq+0x204>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	f200 80a1 	bhi.w	8001e54 <HAL_RCC_GetSysClockFreq+0x248>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x114>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d056      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001d1e:	e099      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d02d      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d56:	4b62      	ldr	r3, [pc, #392]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001ef0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001d86:	e087      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001ef4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d9a:	4b51      	ldr	r3, [pc, #324]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001ef0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dca:	e065      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001ef8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001df2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001ef0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e0e:	e043      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001efc <HAL_RCC_GetSysClockFreq+0x2f0>
 8001e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e36:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001ef0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e52:	e021      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001ef8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e7a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001ef0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9c:	0a5b      	lsrs	r3, r3, #9
 8001e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebc:	ee17 3a90 	vmov	r3, s15
 8001ec0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001ec2:	e005      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
      break;
 8001ec8:	e002      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ecc:	61bb      	str	r3, [r7, #24]
      break;
 8001ece:	bf00      	nop
  }

  return sysclockfreq;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	03d09000 	.word	0x03d09000
 8001ee8:	003d0900 	.word	0x003d0900
 8001eec:	007a1200 	.word	0x007a1200
 8001ef0:	46000000 	.word	0x46000000
 8001ef4:	4c742400 	.word	0x4c742400
 8001ef8:	4a742400 	.word	0x4a742400
 8001efc:	4af42400 	.word	0x4af42400

08001f00 <memset>:
 8001f00:	4402      	add	r2, r0
 8001f02:	4603      	mov	r3, r0
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d100      	bne.n	8001f0a <memset+0xa>
 8001f08:	4770      	bx	lr
 8001f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f0e:	e7f9      	b.n	8001f04 <memset+0x4>

08001f10 <__libc_init_array>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4d0d      	ldr	r5, [pc, #52]	@ (8001f48 <__libc_init_array+0x38>)
 8001f14:	4c0d      	ldr	r4, [pc, #52]	@ (8001f4c <__libc_init_array+0x3c>)
 8001f16:	1b64      	subs	r4, r4, r5
 8001f18:	10a4      	asrs	r4, r4, #2
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	42a6      	cmp	r6, r4
 8001f1e:	d109      	bne.n	8001f34 <__libc_init_array+0x24>
 8001f20:	4d0b      	ldr	r5, [pc, #44]	@ (8001f50 <__libc_init_array+0x40>)
 8001f22:	4c0c      	ldr	r4, [pc, #48]	@ (8001f54 <__libc_init_array+0x44>)
 8001f24:	f000 f818 	bl	8001f58 <_init>
 8001f28:	1b64      	subs	r4, r4, r5
 8001f2a:	10a4      	asrs	r4, r4, #2
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	42a6      	cmp	r6, r4
 8001f30:	d105      	bne.n	8001f3e <__libc_init_array+0x2e>
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
 8001f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f38:	4798      	blx	r3
 8001f3a:	3601      	adds	r6, #1
 8001f3c:	e7ee      	b.n	8001f1c <__libc_init_array+0xc>
 8001f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f42:	4798      	blx	r3
 8001f44:	3601      	adds	r6, #1
 8001f46:	e7f2      	b.n	8001f2e <__libc_init_array+0x1e>
 8001f48:	08001f8c 	.word	0x08001f8c
 8001f4c:	08001f8c 	.word	0x08001f8c
 8001f50:	08001f8c 	.word	0x08001f8c
 8001f54:	08001f90 	.word	0x08001f90

08001f58 <_init>:
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5a:	bf00      	nop
 8001f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5e:	bc08      	pop	{r3}
 8001f60:	469e      	mov	lr, r3
 8001f62:	4770      	bx	lr

08001f64 <_fini>:
 8001f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f66:	bf00      	nop
 8001f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6a:	bc08      	pop	{r3}
 8001f6c:	469e      	mov	lr, r3
 8001f6e:	4770      	bx	lr
